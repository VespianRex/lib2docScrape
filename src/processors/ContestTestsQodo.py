
# Generated by Qodo Gen

import pytest

class Test_FormatContent:

    # Ensure that the _format_content method correctly formats a section with text content into markdown.
    def test_format_section_with_text_content(self):
        processor = ContentProcessor()
        structure = [{
            "level": 2,
            "title": "Test Section",
            "content": [{
                "type": "text",
                "content": "Sample text content"
            }]
        }]

        expected = "## Test Section\n\nSample text content\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Empty structure list returns empty string
    def test_empty_structure_returns_empty_string(self):
        processor = ContentProcessor()
        structure = []
        result = processor._format_content(structure)
        assert result == ""

    # Format section with code block includes language and content with proper markdown syntax
    def test_format_section_with_code_content(self):
        processor = ContentProcessor()
        structure = [{
            "level": 2,
            "title": "Code Section",
            "content": [{
                "type": "code",
                "language": "python",
                "content": "print('Hello, World!')"
            }]
        }]

        expected = "## Code Section\n\n```python\nprint('Hello, World!')\n```\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Multiple sections are formatted with correct nesting and spacing
    def test_format_multiple_sections_with_varied_content(self):
        processor = ContentProcessor()
        structure = [
            {
                "level": 1,
                "title": "Introduction",
                "content": [
                    {"type": "text", "content": "Welcome to the documentation."}
                ]
            },
            {
                "level": 2,
                "title": "Code Example",
                "content": [
                    {"type": "code", "language": "python", "content": "print('Hello, World!')"}
                ]
            },
            {
                "level": 2,
                "title": "Data Table",
                "content": [
                    {
                        "type": "table",
                        "content": {
                            "headers": ["Name", "Age"],
                            "rows": [["Alice", "30"], ["Bob", "25"]]
                        }
                    }
                ]
            }
        ]

        expected = (
            "# Introduction\n\n"
            "Welcome to the documentation.\n\n\n"
            "## Code Example\n\n"
            "```python\nprint('Hello, World!')\n```\n\n\n"
            "## Data Table\n\n"
            "| Name | Age |\n"
            "| --- | --- |\n"
            "| Alice | 30 |\n"
            "| Bob | 25 |\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected

    # Format section with table generates markdown table with headers and rows
    def test_format_section_with_table_content(self):
        processor = ContentProcessor()
        structure = [{
            "level": 2,
            "title": "Table Section",
            "content": [{
                "type": "table",
                "content": {
                    "headers": ["Header1", "Header2"],
                    "rows": [
                        ["Row1Col1", "Row1Col2"],
                        ["Row2Col1", "Row2Col2"]
                    ]
                }
            }]
        }]

        expected = (
            "## Table Section\n\n"
            "| Header1 | Header2 |\n"
            "| --- | --- |\n"
            "| Row1Col1 | Row1Col2 |\n"
            "| Row2Col1 | Row2Col2 |\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected

    # Different content types within same section are formatted sequentially
    def test_format_section_with_mixed_content(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Mixed Content Section",
            "content": [
                {
                    "type": "text",
                    "content": "This is a text content."
                },
                {
                    "type": "code",
                    "language": "python",
                    "content": "print('Hello, World!')"
                },
                {
                    "type": "table",
                    "content": {
                        "headers": ["Name", "Age"],
                        "rows": [["Alice", "30"], ["Bob", "25"]]
                    }
                }
            ]
        }]

        expected = (
            "# Mixed Content Section\n\n"
            "This is a text content.\n\n"
            "```python\nprint('Hello, World!')\n```\n\n"
            "| Name | Age |\n"
            "| --- | --- |\n"
            "| Alice | 30 |\n"
            "| Bob | 25 |\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected

    # Table with empty rows but with headers
    def test_format_table_with_empty_rows(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Table Section",
            "content": [{
                "type": "table",
                "content": {
                    "headers": ["Column1", "Column2"],
                    "rows": []
                }
            }]
        }]

        expected = "# Table Section\n\n| Column1 | Column2 |\n| --- | --- |\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Code block with empty language parameter
    def test_format_code_block_with_empty_language(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Code Section",
            "content": [{
                "type": "code",
                "language": "",
                "content": "print('Hello, World!')"
            }]
        }]

        expected = "# Code Section\n\n```\nprint('Hello, World!')\n```\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Verify that tables with empty headers are skipped in the formatted content
    def test_format_table_with_empty_headers(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Table Section",
            "content": [{
                "type": "table",
                "content": {
                    "headers": [],
                    "rows": [
                        ["Row1Col1", "Row1Col2"],
                        ["Row2Col1", "Row2Col2"]
                    ]
                }
            }]
        }]

        expected = "# Table Section\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Section with empty content list only includes header
    def test_format_section_with_empty_content(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Empty Content Section",
            "content": []
        }]

        expected = "# Empty Content Section\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Headers are formatted with correct number of
    def test_format_headers_with_correct_number_of_hashes(self):
        processor = ContentProcessor()
        structure = [
            {"level": 1, "title": "Header One", "content": []},
            {"level": 2, "title": "Header Two", "content": []},
            {"level": 3, "title": "Header Three", "content": []}
        ]

        expected = "# Header One\n\n\n## Header Two\n\n\n### Header Three\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Content with special markdown characters is formatted correctly
    def test_format_content_with_special_markdown_characters(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Special Characters",
            "content": [
                {
                    "type": "text",
                    "content": "This is a text with *italic* and **bold** markdown."
                },
                {
                    "type": "code",
                    "language": "python",
                    "content": "def example():\n    return 'Hello, World!'"
                },
                {
                    "type": "table",
                    "content": {
                        "headers": ["Name", "Value"],
                        "rows": [["Item 1", "*10*"], ["Item 2", "**20**"]]
                    }
                }
            ]
        }]

        expected = (
            "# Special Characters\n\n"
            "This is a text with *italic* and **bold** markdown.\n\n"
            "```python\n"
            "def example():\n    return 'Hello, World!'\n"
            "```\n\n"
            "| Name | Value |\n"
            "| --- | --- |\n"
            "| Item 1 | *10* |\n"
            "| Item 2 | **20** |\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected

    # Table rows with different number of columns than headers
    def test_format_table_with_mismatched_columns(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Mismatched Table",
            "content": [{
                "type": "table",
                "content": {
                    "headers": ["Header1", "Header2"],
                    "rows": [
                        ["Row1Col1", "Row1Col2"],
                        ["Row2Col1"]  # Mismatched row with fewer columns
                    ]
                }
            }]
        }]

        expected = (
            "# Mismatched Table\n\n"
            "| Header1 | Header2 |\n"
            "| --- | --- |\n"
            "| Row1Col1 | Row1Col2 |\n"
            "| Row2Col1 |\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected

    # Section titles containing markdown syntax characters
    def test_format_section_with_markdown_characters_in_title(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Title with *markdown* _characters_",
            "content": [{
                "type": "text",
                "content": "Content with no markdown"
            }]
        }]

        expected = "# Title with *markdown* _characters_\n\nContent with no markdown\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Multiple consecutive newlines are preserved between sections
    def test_preserve_multiple_consecutive_newlines(self):
        processor = ContentProcessor()
        structure = [
            {
                "level": 1,
                "title": "First Section",
                "content": [
                    {"type": "text", "content": "First section content"}
                ]
            },
            {
                "level": 1,
                "title": "Second Section",
                "content": [
                    {"type": "text", "content": "Second section content"}
                ]
            }
        ]

        expected = (
            "# First Section\n\n"
            "First section content\n\n\n"
            "# Second Section\n\n"
            "Second section content\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected

    # Content items with empty content fields
    def test_format_content_with_empty_fields(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Empty Content Test",
            "content": [{
                "type": "text",
                "content": ""
            }, {
                "type": "code",
                "content": "",
                "language": "python"
            }, {
                "type": "table",
                "content": {
                    "headers": ["Column1", "Column2"],
                    "rows": []
                }
            }]
        }]

        expected = "# Empty Content Test\n\n\n\n```python\n\n```\n\n| Column1 | Column2 |\n| --- | --- |\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Section with invalid content type is skipped
    def test_skip_invalid_content_type(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Valid Section",
            "content": [
                {"type": "text", "content": "Valid text content"},
                {"type": "invalid", "content": "This should be skipped"}
            ]
        }]

        expected = "# Valid Section\n\nValid text content\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Single text content item is formatted with header and double newlines
    def test_single_text_content_formatting(self):
        processor = ContentProcessor()
        structure = [
            {
                "level": 1,
                "title": "Introduction",
                "content": [
                    {"type": "text", "content": "This is a single text content."}
                ]
            }
        ]
        expected_output = "# Introduction\n\nThis is a single text content.\n\n\n"
        assert processor._format_content(structure) == expected_output

    # Code block with language is wrapped in triple backticks with language identifier
    def test_code_block_with_language(self):
        processor = ContentProcessor()
        structure = [
            {
                "level": 2,
                "title": "Code Example",
                "content": [
                    {"type": "code", "language": "python", "content": "print('Hello, World!')"}
                ]
            }
        ]
        expected_output = "## Code Example\n\n```python\nprint('Hello, World!')\n```\n\n\n"
        assert processor._format_content(structure) == expected_output

    # Empty list input returns empty string output
    def test_empty_list_input(self):
        processor = ContentProcessor()
        structure = []
        expected_output = ""
        assert processor._format_content(structure) == expected_output

    # Empty language results in bare triple backticks
    def test_format_code_content_with_empty_language(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Code Section",
            "content": [{
                "type": "code",
                "language": "",
                "content": "print('Hello, World!')"
            }]
        }]

        expected = "# Code Section\n\n```\nprint('Hello, World!')\n```\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Null language value results in bare triple backticks
    def test_format_code_content_with_null_language(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Code Section",
            "content": [{
                "type": "code",
                "language": None,
                "content": "print('Hello, World!')"
            }]
        }]

        expected = "# Code Section\n\n```\nprint('Hello, World!')\n```\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Ensure code blocks with whitespace-only language are formatted correctly by including the whitespace.
    def test_format_code_content_with_whitespace_language(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Code Section",
            "content": [{
                "type": "code",
                "language": "   ",
                "content": "print('Hello, World!')"
            }]
        }]

        expected = "# Code Section\n\n```   \nprint('Hello, World!')\n```\n\n\n"
        result = processor._format_content(structure)

        assert result == expected

    # Ensure correct formatting when a table row has fewer columns than headers
    def test_format_table_with_fewer_columns_than_headers_fixed(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Table Test",
            "content": [{
                "type": "table",
                "content": {
                    "headers": ["Header1", "Header2", "Header3"],
                    "rows": [
                        ["Row1Col1", "Row1Col2"],
                        ["Row2Col1", "Row2Col2", "Row2Col3"]
                    ]
                }
            }]
        }]

        expected = (
            "# Table Test\n\n"
            "| Header1 | Header2 | Header3 |\n"
            "| --- | --- | --- |\n"
            "| Row1Col1 | Row1Col2 |\n"
            "| Row2Col1 | Row2Col2 | Row2Col3 |\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected

    # More columns in row than headers
    def test_table_with_extra_columns(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Table Test",
            "content": [{
                "type": "table",
                "content": {
                    "headers": ["Header1", "Header2"],
                    "rows": [
                        ["Row1Col1", "Row1Col2", "Row1Col3"],
                        ["Row2Col1", "Row2Col2"]
                    ]
                }
            }]
        }]

        expected = (
            "# Table Test\n\n"
            "| Header1 | Header2 |\n"
            "| --- | --- |\n"
            "| Row1Col1 | Row1Col2 | Row1Col3 |\n"
            "| Row2Col1 | Row2Col2 |\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected

    # Ensure correct formatting of tables with mixed row lengths
    def test_format_table_with_mixed_row_lengths_fixed(self):
        processor = ContentProcessor()
        structure = [{
            "level": 1,
            "title": "Table Test",
            "content": [{
                "type": "table",
                "content": {
                    "headers": ["Column 1", "Column 2", "Column 3"],
                    "rows": [
                        ["Row 1 Col 1", "Row 1 Col 2", "Row 1 Col 3"],
                        ["Row 2 Col 1", "Row 2 Col 2"],
                        ["Row 3 Col 1", "Row 3 Col 2", "Row 3 Col 3"]
                    ]
                }
            }]
        }]

        expected = (
            "# Table Test\n\n"
            "| Column 1 | Column 2 | Column 3 |\n"
            "| --- | --- | --- |\n"
            "| Row 1 Col 1 | Row 1 Col 2 | Row 1 Col 3 |\n"
            "| Row 2 Col 1 | Row 2 Col 2 |\n"
            "| Row 3 Col 1 | Row 3 Col 2 | Row 3 Col 3 |\n\n\n"
        )
        result = processor._format_content(structure)

        assert result == expected