# Docker Compose setup for local CI/CD with Jenkins
# Open-source alternative to GitHub Actions

version: '3.8'

services:
  jenkins:
    image: jenkins/jenkins:lts
    container_name: lib2docscrape-jenkins
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workspace
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    networks:
      - ci_network

  jenkins-agent:
    image: jenkins/inbound-agent:latest
    container_name: lib2docscrape-agent
    restart: unless-stopped
    depends_on:
      - jenkins
    environment:
      - JENKINS_URL=http://jenkins:8080
      - JENKINS_SECRET=${JENKINS_AGENT_SECRET:-}
      - JENKINS_AGENT_NAME=python-agent
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
    volumes:
      - ./:/workspace
    networks:
      - ci_network

  # Python test environment
  python-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: lib2docscrape-test
    volumes:
      - ./:/app
      - test_cache:/app/.cache
    working_dir: /app
    environment:
      - PYTHONPATH=/app/src
      - UV_CACHE_DIR=/app/.cache/uv
    networks:
      - ci_network
    profiles:
      - test

  # GitLab Runner (alternative)
  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    container_name: lib2docscrape-gitlab-runner
    restart: unless-stopped
    volumes:
      - gitlab_runner_config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workspace
    networks:
      - ci_network
    profiles:
      - gitlab

  # Drone CI (another alternative)
  drone-server:
    image: drone/drone:2
    container_name: lib2docscrape-drone
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - drone_data:/data
    environment:
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID:-}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET:-}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET:-supersecret}
      - DRONE_SERVER_HOST=localhost:8081
      - DRONE_SERVER_PROTO=http
    networks:
      - ci_network
    profiles:
      - drone

  drone-runner:
    image: drone/drone-runner-docker:1
    container_name: lib2docscrape-drone-runner
    restart: unless-stopped
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET:-supersecret}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=docker-runner
    networks:
      - ci_network
    profiles:
      - drone

  # Test report server
  report-server:
    image: nginx:alpine
    container_name: lib2docscrape-reports
    restart: unless-stopped
    ports:
      - "8082:80"
    volumes:
      - ./reports:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - ci_network
    profiles:
      - reports

volumes:
  jenkins_home:
    driver: local
  gitlab_runner_config:
    driver: local
  drone_data:
    driver: local
  test_cache:
    driver: local

networks:
  ci_network:
    driver: bridge
