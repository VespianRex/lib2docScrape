{"content": {"suites": {"0": {"status": {"total_pass": 24, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 53, "total_error": 0}, "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 10000 == 1000000\n    +  where 10000 = ProcessorConfig(max_content_length=10000, min_content_length=10, max_heading_length=100, max_heading_level=6, max_code_block_length=5000, max_link_length=200, max_title_length=200, max_description_length=500, max_image_size=5000000, allowed_tags=['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'a', 'img', 'code', 'pre', 'strong', 'em', 'blockquote', 'table', 'tr', 'td', 'th'], allowed_attributes={'a': ['href', 'title'], 'img': ['src', 'alt', 'title'], 'code': ['class'], 'pre': ['class']}, remove_comments=True, sanitize_content=True, extract_metadata=True, extract_assets=True, extract_code_blocks=True, clean_regex=None, preserve_whitespace=False).max_content_length\n    +    where ProcessorConfig(max_content_length=10000, min_content_length=10, max_heading_length=100, max_heading_level=6, max_code_block_length=5000, max_link_length=200, max_title_length=200, max_description_length=500, max_image_size=5000000, allowed_tags=['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'a', 'img', 'code', 'pre', 'strong', 'em', 'blockquote', 'table', 'tr', 'td', 'th'], allowed_attributes={'a': ['href', 'title'], 'img': ['src', 'alt', 'title'], 'code': ['class'], 'pre': ['class']}, remove_comments=True, sanitize_content=True, extract_metadata=True, extract_assets=True, extract_code_blocks=True, clean_regex=None, preserve_whitespace=False) = <src.processors.content_processor.ContentProcessor object at 0x121769cd0>.config\n", "test_name": "test_init_default_config", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_init_custom_config", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_extract_title_with_title_tag", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_extract_title_with_h1_fallback", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_extract_title_no_title", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_extract_text_basic", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_scripts", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_extract_text_preserve_code", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AssertionError: assert 1 == 4\n    +  where 1 = len([{'children': [{'children': [{'children': [...], 'id': 'h3', 'level': 3, 'text': 'Heading 3'}], 'id': '', 'level': 2, 'text': 'Heading 2'}], 'id': 'h1', 'level': 1, 'text': 'Heading 1'}])\n", "test_name": "test_extract_headings", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_extract_links", "rerun": "0"}, "10": {"status": "FAIL", "message": "   assert 0 == 2\n    +  where 0 = len([])\n", "test_name": "test_extract_code_blocks", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_images'\n", "test_name": "test_extract_images", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_stylesheets'\n", "test_name": "test_extract_stylesheets", "rerun": "0"}, "13": {"status": "FAIL", "message": "   assert 3 == 2\n    +  where 3 = len([{'async': False, 'content': '', 'defer': False, 'src': '/script1.js', ...}, {'async': False, 'content': '', 'defer': False, 'src': 'https://example.com/script2.js', ...}, {'async': False, 'content': \"console.log('inline');\", 'defer': False, 'src': '', ...}])\n", "test_name": "test_extract_scripts", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AssertionError: assert 2 == 3\n    +  where 2 = len([{'sources': [], 'src': '/video.mp4', 'type': 'video'}, {'sources': [], 'src': '/audio.mp3', 'type': 'audio'}])\n", "test_name": "test_extract_media", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AssertionError: assert 1 == 2\n    +  where 1 = len([{'children': [{'children': [{'children': [], 'id': '', 'level': 3, 'text': 'Section 1', ...}, {'children': [], 'id': '', 'level': 3, 'text': 'Paragraph 1', ...}, {'children': [], 'id': '', 'level': 3, 'text': 'def test(): pass', ...}, {'children': [], 'id': '', 'level': 3, 'text': 'Section 2', ...}, {'children': [], 'id': '', 'level': 3, 'text': 'Paragraph 2', ...}], 'id': '', 'level': 2, 'text': 'Section 1 Paragraph 1 def test(): pass Section 2 Paragraph 2', ...}], 'id': '', 'level': 1, 'text': 'Section 1 Paragraph 1 def test(): pass Section 2 Paragraph 2', ...}])\n", "test_name": "test_extract_content_structure", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_process_basic", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_process_large_content", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_find_main_content", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AssertionError: assert '- Item' in '# Heading 1\\n\\nParagraph\\n\\n```\\nCode block\\n```\\n\\n* Item 1\\n* Item 2\\n\\nItem 1 Item 2 > Quote'\n", "test_name": "test_format_as_markdown", "rerun": "0"}, "20": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_convert_table_to_markdown'\n", "test_name": "test_convert_table_to_markdown", "rerun": "0"}, "21": {"status": "FAIL", "message": "   AssertionError: assert 'Test & content' in '\\n\\n<p>Test &amp; content</p>\\n\\n'\n", "test_name": "test_safe_content", "rerun": "0"}, "22": {"status": "FAIL", "message": "   TypeError: ContentProcessor._safe_content() got an unexpected keyword argument 'preserve_whitespace'\n", "test_name": "test_safe_content_preserve_whitespace", "rerun": "0"}, "23": {"status": "FAIL", "message": "   TypeError: ContentProcessor._safe_content() got an unexpected keyword argument 'preserve_entities'\n", "test_name": "test_safe_content_preserve_entities", "rerun": "0"}, "24": {"status": "FAIL", "message": "   KeyError: 'opengraph'\n", "test_name": "test_extract_metadata", "rerun": "0"}, "25": {"status": "FAIL", "message": "   AssertionError: assert '/image.jpg' in ['https://example.com/image.jpg']\n", "test_name": "test_collect_assets", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_nested_content", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_comments", "rerun": "0"}, "28": {"status": "FAIL", "message": "   assert 'Unicode: \u2122 \u00a9 \u00ae \u00bc \u00bd \u00be \u00d7' in 'Special & characters: < > \" \\' Unicode: TM \u00a9 \u00ae 1\u20444 1\u20442 3\u20444 \u00d7 Emoji: \ud83c\udf1f \ud83c\udf89 \ud83d\udc4d'\n", "test_name": "test_extract_text_with_special_characters", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_extract_headings_empty", "rerun": "0"}, "30": {"status": "FAIL", "message": "   AssertionError: assert 1 >= 4\n    +  where 1 = len([{'children': [{'children': [{'children': [], 'id': '', 'level': 3, 'text': 'Subsection A'}], 'id': '', 'level': 2, 'text': 'Section One'}, {'children': [{'children': [], 'id': '', 'level': 4, 'text': 'Not included'}], 'id': '', 'level': 2, 'text': 'Section Two'}], 'id': '', 'level': 1, 'text': 'Main Title with emphasis'}])\n", "test_name": "test_extract_headings_with_nested_content", "rerun": "0"}, "31": {"status": "FAIL", "message": "   AssertionError: assert 3 == 0\n    +  where 3 = len([{'text': 'Email Link', 'title': '', 'url': 'mailto:test@example.com'}, {'text': 'Hash Link', 'title': '', 'url': 'https://example.com'}, {'text': 'Whitespace Link', 'title': '', 'url': 'https://example.com'}])\n", "test_name": "test_extract_links_with_invalid_urls", "rerun": "0"}, "32": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_links_with_relative_paths.<locals>.<genexpr> at 0x1216fece0>)\n", "test_name": "test_extract_links_with_relative_paths", "rerun": "0"}, "33": {"status": "FAIL", "message": "   assert 1 == 3\n    +  where 1 = len([{'code': \"puts 'test'\", 'highlighted': True, 'language': ''}])\n", "test_name": "test_extract_code_blocks_with_attributes", "rerun": "0"}, "34": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_images'\n", "test_name": "test_extract_images_with_data_urls", "rerun": "0"}, "35": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_stylesheets'\n", "test_name": "test_extract_stylesheets_with_media_queries", "rerun": "0"}, "36": {"status": "FAIL", "message": "   assert 5 == 4\n    +  where 5 = len([{'async': False, 'content': '', 'defer': False, 'src': 'sync.js', ...}, {'async': True, 'content': '', 'defer': False, 'src': 'async.js', ...}, {'async': False, 'content': '', 'defer': True, 'src': 'defer.js', ...}, {'async': False, 'content': '', 'defer': False, 'src': 'module.js', ...}, {'async': False, 'content': '{\"@type\": \"test\"}', 'defer': False, 'src': '', ...}])\n", "test_name": "test_extract_scripts_with_attributes", "rerun": "0"}, "37": {"status": "FAIL", "message": "   AssertionError: assert 2 == 4\n    +  where 2 = len([{'sources': [{'src': 'video.mp4', 'type': 'video/mp4'}, {'src': 'video.webm', 'type': 'video/webm'}], 'src': '', 'type': 'video'}, {'sources': [{'src': 'audio.mp3', 'type': 'audio/mpeg'}, {'src': 'audio.ogg', 'type': 'audio/ogg'}], 'src': '', 'type': 'audio'}])\n", "test_name": "test_extract_media_with_sources", "rerun": "0"}, "38": {"status": "FAIL", "message": "   assert 'og:title' in \"{'meta_tags': {'description': 'Test description', 'keywords': 'test, complex, metadata', 'author': 'Test Author', 'title': 'Complex Test', 'robots': 'index, follow', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}, 'open_graph': {'title': 'OG Title', 'description': 'OG Description', 'image': 'og-image.jpg'}, 'twitter': {'card': 'summary_large_image', 'title': 'Twitter Title'}}\"\n    +  where \"{'meta_tags': {'description': 'Test description', 'keywords': 'test, complex, metadata', 'author': 'Test Author', 'title': 'Complex Test', 'robots': 'index, follow', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}, 'open_graph': {'title': 'OG Title', 'description': 'OG Description', 'image': 'og-image.jpg'}, 'twitter': {'card': 'summary_large_image', 'title': 'Twitter Title'}}\" = str({'meta_tags': {'author': 'Test Author', 'canonical': '', 'description': 'Test description', 'generator': '', ...}, 'open_graph': {'description': 'OG Description', 'image': 'og-image.jpg', 'title': 'OG Title'}, 'twitter': {'card': 'summary_large_image', 'title': 'Twitter Title'}})\n    +    where {'meta_tags': {'author': 'Test Author', 'canonical': '', 'description': 'Test description', 'generator': '', ...}, 'open_graph': {'description': 'OG Description', 'image': 'og-image.jpg', 'title': 'OG Title'}, 'twitter': {'card': 'summary_large_image', 'title': 'Twitter Title'}} = ProcessedContent(url='https://example.com', title='Complex Test', content={'text': 'Test Content Test paragraph.', 'headings': [{'level': 1, 'text': 'Test Content', 'id': '', 'children': []}], 'links': [], 'code_blocks': [], 'structure': [{'type': 'h1', 'text': 'Test Content', 'children': [], 'level': 1, 'id': ''}, {'type': 'p', 'text': 'Test paragraph.', 'children': [], 'level': 1, 'id': ''}], 'formatted_content': '# Test Content\\n\\nTest paragraph.'}, metadata={'meta_tags': {'description': 'Test description', 'keywords': 'test, complex, metadata', 'author': 'Test Author', 'title': 'Complex Test', 'robots': 'index, follow', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}, 'open_graph': {'title': 'OG Title', 'description': 'OG Description', 'image': 'og-image.jpg'}, 'twitter': {'card': 'summary_large_image', 'title': 'Twitter Title'}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).metadata\n", "test_name": "test_process_with_complex_metadata", "rerun": "0"}, "39": {"status": "FAIL", "message": "   assert 'script' not in '\\n\\n<img sr...a>\\n\\n\\n\\n\\n'\n     \n     'script' is contained here:\n       \n       \n       <img src=\"x\"/>\n       <a href=\"javascript:alert('xss')\">click me</a>\n     ?              ++++++...\n     \n     ...Full output truncated (4 lines hidden), use '-vv' to show\n", "test_name": "test_safe_content_with_malicious_content", "rerun": "0"}, "40": {"status": "FAIL", "message": "   AssertionError: assert 0 > 0\n    +  where 0 = len('')\n", "test_name": "test_extract_metadata_with_missing_values", "rerun": "0"}, "41": {"status": "PASS", "message": "", "test_name": "test_collect_assets_with_base_tag", "rerun": "0"}, "42": {"status": "FAIL", "message": "   AssertionError: assert 'Malformed HTML' in 'Untitled Document'\n    +  where 'Untitled Document' = ProcessedContent(url='https://example.com', title='Untitled Document', content={'text': 'Unclosed paragraph Unclosed div Mixed closing tags Unclosed link', 'headings': [], 'links': [{'url': 'https://example.com/test.html', 'text': 'Unclosed link', 'title': ''}], 'code_blocks': [], 'structure': [{'type': 'p', 'text': 'Unclosed paragraph Unclosed div Mixed closing tags Unclosed link', 'children': [{'type': 'a', 'text': 'Unclosed link', 'children': [], 'level': 2, 'id': ''}], 'level': 1, 'id': ''}], 'formatted_content': 'Unclosed paragraph\\n            Unclosed div\\n            Mixed closing tags\\nUnclosed link\\n    \\n\\n[Unclosed link\\n    ](test.html)'}, metadata={'meta_tags': {'description': '', 'keywords': '', 'author': '', 'title': '', 'robots': '', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).title\n", "test_name": "test_process_with_invalid_html", "rerun": "0"}, "43": {"status": "PASS", "message": "", "test_name": "test_process_with_unicode_content", "rerun": "0"}, "44": {"status": "PASS", "message": "", "test_name": "test_process_with_mixed_content_types", "rerun": "0"}, "45": {"status": "FAIL", "message": "   AssertionError: assert 'Product description' in '# Test Product'\n", "test_name": "test_process_with_microdata", "rerun": "0"}, "46": {"status": "FAIL", "message": "   AssertionError: assert 'Frame 1 content' in ''\n", "test_name": "test_process_with_frames", "rerun": "0"}, "47": {"status": "FAIL", "message": "   AssertionError: assert 'Custom content' in ''\n", "test_name": "test_process_with_custom_elements", "rerun": "0"}, "48": {"status": "PASS", "message": "", "test_name": "test_process_with_conditional_comments", "rerun": "0"}, "49": {"status": "FAIL", "message": "   AssertionError: assert 'Test div' in 'Test paragraph\\n\\n[Test link](#)'\n", "test_name": "test_process_with_data_attributes", "rerun": "0"}, "50": {"status": "FAIL", "message": "   assert 'https://example.com/new' in \"{'meta_tags': {'description': '', 'keywords': '', 'author': '', 'title': 'Meta Redirect', 'robots': '', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}}\"\n    +  where \"{'meta_tags': {'description': '', 'keywords': '', 'author': '', 'title': 'Meta Redirect', 'robots': '', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}}\" = str({'meta_tags': {'author': '', 'canonical': '', 'description': '', 'generator': '', ...}})\n    +    where {'meta_tags': {'author': '', 'canonical': '', 'description': '', 'generator': '', ...}} = ProcessedContent(url='https://example.com', title='Meta Redirect', content={'text': 'Redirecting...', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'p', 'text': 'Redirecting...', 'children': [], 'level': 1, 'id': ''}], 'formatted_content': 'Redirecting...'}, metadata={'meta_tags': {'description': '', 'keywords': '', 'author': '', 'title': 'Meta Redirect', 'robots': '', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).metadata\n", "test_name": "test_process_with_meta_redirects", "rerun": "0"}, "51": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_process_with_base_urls.<locals>.<genexpr> at 0x1216fe500>)\n", "test_name": "test_process_with_base_urls", "rerun": "0"}, "52": {"status": "FAIL", "message": "   AssertionError: assert 'Header content' not in 'Header cont...ebar content'\n     \n     'Header content' is contained here:\n       Header content Navigation First paragraph Preserved whitespace and formatting def test(): pass Nested content Footer content Sidebar content\n     ? ++++++++++++++\n", "test_name": "test_extract_text_with_complex_content", "rerun": "0"}, "53": {"status": "FAIL", "message": "   AssertionError: assert 'Sidebar content' not in 'Documentati...ebar content'\n     \n     'Sidebar content' is contained here:\n       Documentation Main content def example(): return True Sidebar content\n     ?                                                       +++++++++++++++\n", "test_name": "test_extract_text_with_sphinx_content", "rerun": "0"}, "54": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_empty_elements", "rerun": "0"}, "55": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_headings_with_ids.<locals>.<genexpr> at 0x121d13100>)\n", "test_name": "test_extract_headings_with_ids", "rerun": "0"}, "56": {"status": "FAIL", "message": "E   KeyError: 'source'\n", "test_name": "test_extract_links_with_complex_navigation", "rerun": "0"}, "57": {"status": "PASS", "message": "", "test_name": "test_extract_links_with_base_url", "rerun": "0"}, "58": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_code_blocks_with_languages.<locals>.<genexpr> at 0x121794120>)\n", "test_name": "test_extract_code_blocks_with_languages", "rerun": "0"}, "59": {"status": "FAIL", "message": "E   KeyError: 'content'\n", "test_name": "test_extract_code_blocks_with_nested_content", "rerun": "0"}, "60": {"status": "FAIL", "message": "   TypeError: ContentProcessor.process() missing 1 required positional argument: 'url'\n", "test_name": "test_process_with_custom_config", "rerun": "0"}, "61": {"status": "FAIL", "message": "   AssertionError: assert '- Item 1' in 'Title\\nParagraph 1\\n\\nItem 1\\nItem 2\\n\\n\\nNumber 1\\nNumber 2\\n\\nImportant quote\\ndef test():\\n    pass\\n # Title\\n\\nParagraph 1\\n\\n* Item 1\\n* Item 2\\n\\nItem 1 Item 2 1. Number 1\\n2. Number 2\\n\\nNumber 1 Number 2 > Important quote\\n\\n```\\ndef test():\\n    pass\\n```\\n\\n`def test():\\n    pass`'\n", "test_name": "test_format_as_markdown_mixed_content", "rerun": "0"}, "62": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_nested_content", "rerun": "0"}, "63": {"status": "PASS", "message": "", "test_name": "test_find_main_content_with_article", "rerun": "0"}, "64": {"status": "PASS", "message": "", "test_name": "test_find_main_content_with_sphinx", "rerun": "0"}, "65": {"status": "FAIL", "message": "   AssertionError: assert 'exceeds limit' in 'Content exceeds maximum size limit of 10000 bytes'\n", "test_name": "test_process_content_too_large", "rerun": "0"}, "66": {"status": "FAIL", "message": "   AssertionError: assert (ProcessedContent(url='https://example.com', title='Untitled Document', content={'text': 'Small', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'p', 'text': 'Small', 'children': [], 'level': 1, 'id': ''}], 'formatted_content': 'Small'}, metadata={'meta_tags': {'description': '', 'keywords': '', 'author': '', 'title': '', 'robots': '', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]) is None or 0 > 0)\n    +  where 0 = len([])\n    +    where [] = ProcessedContent(url='https://example.com', title='Untitled Document', content={'text': 'Small', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'p', 'text': 'Small', 'children': [], 'level': 1, 'id': ''}], 'formatted_content': 'Small'}, metadata={'meta_tags': {'description': '', 'keywords': '', 'author': '', 'title': '', 'robots': '', 'viewport': '', 'generator': '', 'language': '', 'last_modified': '', 'canonical': ''}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).errors\n", "test_name": "test_process_content_too_small", "rerun": "0"}, "67": {"status": "FAIL", "message": "   AssertionError: assert 'Unclosed div' in 'Unclosed paragraph\\n            Mixed closing tags'\n", "test_name": "test_process_invalid_html", "rerun": "0"}, "68": {"status": "PASS", "message": "", "test_name": "test_process_empty_content", "rerun": "0"}, "69": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_process_with_base_tag.<locals>.<genexpr> at 0x1216b8200>)\n", "test_name": "test_process_with_base_tag", "rerun": "0"}, "70": {"status": "FAIL", "message": "   TypeError: ContentProcessor.process() missing 1 required positional argument: 'url'\n", "test_name": "test_processor_with_size_limits", "rerun": "0"}, "71": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute 'add_content_extractor'\n", "test_name": "test_processor_with_custom_extractors", "rerun": "0"}, "72": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute 'add_content_filter'\n", "test_name": "test_processor_with_custom_filters", "rerun": "0"}, "73": {"status": "FAIL", "message": "   TypeError: ContentProcessor.process() missing 1 required positional argument: 'url'\n", "test_name": "test_metadata_extraction", "rerun": "0"}, "74": {"status": "FAIL", "message": "   TypeError: ContentProcessor.process() missing 1 required positional argument: 'url'\n", "test_name": "test_asset_collection", "rerun": "0"}, "75": {"status": "FAIL", "message": "   TypeError: ContentProcessor.process() missing 1 required positional argument: 'url'\n", "test_name": "test_nested_list_formatting", "rerun": "0"}, "76": {"status": "FAIL", "message": "   pydantic_core._pydantic_core.ValidationError: 1 validation error for ProcessorConfig\n   allowed_attributes\n     Input should be a valid dictionary [type=dict_type, input_value=['class'], input_type=list]\n       For further information visit https://errors.pydantic.dev/2.10/v/dict_type\n", "test_name": "test_processor_with_custom_config", "rerun": "0"}}, "suite_name": "tests/test_content_processor.py"}}}, "date": "December 02, 2024", "start_time": 1733142757.9108129, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "24", "fail": "53", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "77"}