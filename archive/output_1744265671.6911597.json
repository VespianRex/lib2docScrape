{"content": {"suites": {"0": {"status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_backend_lifecycle", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawler_backend_error_handling", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_backend_selector_registration", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_backend_selector_selection", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_backend_selector_advanced_selection", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_mock_crawler_backend_edge_cases", "rerun": "0"}}, "suite_name": "tests/test_base.py"}, "1": {"suite_name": "tests/test_content_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_extract_text_basic", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_process_basic", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_nested_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_special_characters", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_complex_content", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_mixed_content_types", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_scripts", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_script_tags_non_json_ld", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_script_tags_with_invalid_json", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_script_tags_with_different_types", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_scripts_with_data_attributes", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[javascript-console.log(\"Hello, World!\");-```javascript\\nconsole.log(\"Hello, World!\");\\n```]", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[python-print(\"Hello, World!\")-```python\\nprint(\"Hello, World!\")\\n```]", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[ruby-puts \"Hello, Ruby!\"-```ruby\\nputs \"Hello, Ruby!\"\\n```]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[None-Inline code-`Inline code`]", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks_with_attributes", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks_with_nested_content", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_code_blocks_with_disallowed_languages", "rerun": "0"}, "19": {"status": "PASS", "message": "", "test_name": "test_extract_content_structure", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_extract_headings_hierarchy", "rerun": "0"}, "21": {"status": "PASS", "message": "", "test_name": "test_extract_metadata", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_complex_metadata", "rerun": "0"}, "23": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_duplicates", "rerun": "0"}, "24": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_invalid_html", "rerun": "0"}, "25": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_missing_values", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_schema_org_json_ld", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_all_types", "rerun": "0"}, "28": {"status": "PASS", "message": "", "test_name": "test_collect_assets", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_images_with_data_urls", "rerun": "0"}, "30": {"status": "PASS", "message": "", "test_name": "test_extract_assets_with_invalid_urls", "rerun": "0"}, "31": {"status": "PASS", "message": "", "test_name": "test_extract_links_with_invalid_urls", "rerun": "0"}, "32": {"status": "PASS", "message": "", "test_name": "test_extract_links_with_relative_paths", "rerun": "0"}, "33": {"status": "PASS", "message": "", "test_name": "test_links_with_query_parameters", "rerun": "0"}, "34": {"status": "PASS", "message": "", "test_name": "test_links_with_anchors", "rerun": "0"}, "35": {"status": "PASS", "message": "", "test_name": "test_anchor_tags_without_href", "rerun": "0"}, "36": {"status": "PASS", "message": "", "test_name": "test_links_with_various_protocols", "rerun": "0"}, "37": {"status": "PASS", "message": "", "test_name": "test_multiple_links_in_paragraph", "rerun": "0"}, "38": {"status": "PASS", "message": "", "test_name": "test_links_with_no_text", "rerun": "0"}}, "status": {"total_pass": 39, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "2": {"suite_name": "tests/test_content_processor_advanced.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_url_processor_port_handling", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "3": {"suite_name": "tests/test_content_processor_edge.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_empty_content", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_malformed_html", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_special_characters", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_large_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_nested_structures", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_javascript_handling", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_style_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_iframe_handling", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_form_handling", "rerun": "0"}}, "status": {"total_pass": 9, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "4": {"suite_name": "tests/test_crawl4ai.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawl_basic", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawl_with_rate_limit", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_validate_content", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_process_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_backend_selection", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_metrics", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_error_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_concurrent_requests", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_cleanup", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_crawl4ai_config_validation", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_ssl_context_configuration", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_custom_headers_handling", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_domain_filtering", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_url_queue_management", "rerun": "0"}}, "status": {"total_pass": 14, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "5": {"suite_name": "tests/test_crawl4ai_extended.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawl_with_urlinfo", "rerun": "0"}, "1": {"status": "SKIP", "message": "('/home/alex/DEV/lib2docScrape/tests/test_crawl4ai_extended.py', 123, 'Skipped: Link following is handled by the main Crawler, not the backend directly.')\n", "test_name": "test_crawl_depth_first", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_rate_limiting_precision", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_concurrent_request_limit", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_url_normalization", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_error_propagation", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_retry_behavior", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_metrics_accuracy", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_resource_cleanup", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org/3/-expected0]", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org-expected1]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[invalid-url-expected2]", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_url_info_hashable", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_url_info_immutable", "rerun": "0"}}, "status": {"total_pass": 13, "total_skip": 1, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "6": {"suite_name": "tests/test_crawler.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_initialization", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_url_filtering", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_single_url_processing", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_depth_limited_crawling", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_concurrent_processing", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_rate_limiting", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_error_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_cleanup", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_max_pages_limit", "rerun": "0"}, "10": {"status": "FAIL", "message": "   AssertionError: assert 1 == (1 + 1)\n    +  where 1 = CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 12, 966722), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.151873, average_time_per_page=0.151873, quality_issues=4, bytes_processed=589).pages_crawled\n    +    where CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 12, 966722), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.151873, average_time_per_page=0.151873, quality_issues=4, bytes_processed=589) = CrawlResult(target=CrawlTarget(url='https://example.com/doc3', depth=1, follow_external=False, content_types=['text/ht...nk_count': 0, 'code_block_count': 0}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).stats\n    +  and   1 = CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 12, 966722), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.151873, average_time_per_page=0.151873, quality_issues=4, bytes_processed=589).successful_crawls\n    +    where CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 12, 966722), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.151873, average_time_per_page=0.151873, quality_issues=4, bytes_processed=589) = CrawlResult(target=CrawlTarget(url='https://example.com/doc3', depth=1, follow_external=False, content_types=['text/ht...nk_count': 0, 'code_block_count': 0}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).stats\n    +  and   1 = CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 12, 966722), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.151873, average_time_per_page=0.151873, quality_issues=4, bytes_processed=589).failed_crawls\n    +    where CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 12, 966722), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.151873, average_time_per_page=0.151873, quality_issues=4, bytes_processed=589) = CrawlResult(target=CrawlTarget(url='https://example.com/doc3', depth=1, follow_external=False, content_types=['text/ht...nk_count': 0, 'code_block_count': 0}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).stats\n", "test_name": "test_statistics_tracking", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_project_type_enum", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_project_identity", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_project_identifier", "rerun": "0"}, "14": {"status": "SKIP", "message": "('/home/alex/DEV/lib2docScrape/tests/test_crawler.py', 470, 'Skipped: DuckDuckGo search not available')\n", "test_name": "test_duckduckgo_search", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_url_discovery", "rerun": "0"}}, "status": {"total_pass": 14, "total_skip": 1, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "7": {"suite_name": "tests/test_crawler_advanced.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 1 == 0\n    +  where 1 = CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 13, 435583), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.002216, average_time_per_page=0.002216, quality_issues=1, bytes_processed=160).failed_crawls\n    +    where CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 13, 435583), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.002216, average_time_per_page=0.002216, quality_issues=1, bytes_processed=160) = CrawlResult(target=CrawlTarget(url='http://example.com', depth=1, follow_external=False, content_types=['text/html'], ...example.com': {'quality_score': 0.5}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).stats\n", "test_name": "test_crawler_basic_crawl", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawler_failed_crawl", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_crawler_retry_mechanism", "rerun": "0"}, "3": {"status": "SKIP", "message": "('/home/alex/DEV/lib2docScrape/tests/test_crawler_advanced.py', 153, 'Skipped: Rate limiter timing is difficult to test reliably with mocks')\n", "test_name": "test_crawler_rate_limiting", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_crawler_content_processing", "rerun": "0"}, "5": {"status": "FAIL", "message": "   assert 2 == 1\n    +  where 2 = len([QualityIssue(type=<IssueType.GENERAL: 'general'>, level=<IssueLevel.WARNING: 'warning'>, message='Low content quality... loop error: ProcessedContent.__init__() got an unexpected keyword argument 'raw_content'\", location=None, details={})])\n    +    where [QualityIssue(type=<IssueType.GENERAL: 'general'>, level=<IssueLevel.WARNING: 'warning'>, message='Low content quality... loop error: ProcessedContent.__init__() got an unexpected keyword argument 'raw_content'\", location=None, details={})] = CrawlResult(target=CrawlTarget(url='http://example.com', depth=1, follow_external=False, content_types=['text/html'], ...example.com': {'quality_score': 0.5}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).issues\n", "test_name": "test_crawler_quality_checking", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_crawler_resource_cleanup", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_crawler_concurrent_requests", "rerun": "0"}, "8": {"status": "FAIL", "message": "           AssertionError: Expected no issues for http://EXAMPLE.com, but got: [QualityIssue(type=<IssueType.GENERAL: 'general'>, level=<IssueLevel.ERROR: 'error'>, message=\"Crawler loop error: ProcessedContent.__init__() got an unexpected keyword argument 'raw_content'\", location=None, details={})]\n           assert not [QualityIssue(type=<IssueType.GENERAL: 'general'>, level=<IssueLevel.ERROR: 'error'>, message=\"Crawler loop error: ProcessedContent.__init__() got an unexpected keyword argument 'raw_content'\", location=None, details={})]\n            +  where [QualityIssue(type=<IssueType.GENERAL: 'general'>, level=<IssueLevel.ERROR: 'error'>, message=\"Crawler loop error: ProcessedContent.__init__() got an unexpected keyword argument 'raw_content'\", location=None, details={})] = CrawlResult(target=CrawlTarget(url='http://EXAMPLE.com', depth=1, follow_external=False, content_types=['text/html'], ...], metrics={'http://example.com': {}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).issues\n", "test_name": "test_crawler_url_normalization", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_crawler_error_handling", "rerun": "0"}}, "status": {"total_pass": 6, "total_skip": 1, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 3, "total_error": 0}}, "8": {"suite_name": "tests/test_gui.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_home_page", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawl_request", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_connection_manager", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "9": {"suite_name": "tests/test_helpers.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_rate_limiter", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_retry_strategy", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_timer", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_similarity_calculation", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_checksum_generation", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_logging_setup", "rerun": "0"}}, "status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "10": {"suite_name": "tests/test_integration.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: Expected 0 failed crawls, got 1\n   assert 1 == 0\n    +  where 1 = CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 32, 117581), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.004994, average_time_per_page=0.004994, quality_issues=3, bytes_processed=525).failed_crawls\n    +    where CrawlStats(start_time=datetime.datetime(2025, 4, 10, 6, 1, 32, 117581), end_time=datetime.datetime(2025, 4, 10, 6, 1, ..._crawls=1, failed_crawls=1, total_time=0.004994, average_time_per_page=0.004994, quality_issues=3, bytes_processed=525) = CrawlResult(target=CrawlTarget(url='file:///tmp/pytest-of-alex/pytest-37/test_full_site_crawl0/test_docs/index.html', ...nk_count': 0, 'code_block_count': 0}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).stats\n", "test_name": "test_full_site_crawl", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: Could not find document for file:///tmp/pytest-of-alex/pytest-37/test_content_processing_pipeli0/test_docs/guide.html in organizer\n   assert None is not None\n", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_quality_checks", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: Should have crawled all 4 pages\n   assert 1 == 4\n    +  where 1 = len([{'assets': {'images': [], 'media': [], 'scripts': [], 'stylesheets': []}, 'content': {'formatted_content': '# Test Do...* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'title': 'Test Documentation'}, 'title': 'Test Documentation', ...}])\n    +    where [{'assets': {'images': [], 'media': [], 'scripts': [], 'stylesheets': []}, 'content': {'formatted_content': '# Test Do...* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'title': 'Test Documentation'}, 'title': 'Test Documentation', ...}] = CrawlResult(target=CrawlTarget(url='file:///tmp/pytest-of-alex/pytest-37/test_document_organization0/test_docs/index.h...nk_count': 0, 'code_block_count': 0}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).documents\n", "test_name": "test_document_organization", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: Organizer should have 4 documents\n   assert 0 == 4\n    +  where 0 = len({})\n    +    where {} = <src.organizers.doc_organizer.DocumentOrganizer object at 0x7f1a2fac5f70>.documents\n    +      where <src.organizers.doc_organizer.DocumentOrganizer object at 0x7f1a2fac5f70> = <src.crawler.DocumentationCrawler object at 0x7f1a2fac6930>.document_organizer\n", "test_name": "test_search_functionality", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 4, "total_error": 0}}, "11": {"suite_name": "tests/test_integration_advanced.py", "tests": {"0": {"status": "FAIL", "message": "           AssertionError: assert 0 > 0\n            +  where 0 = len([])\n            +    where [] = CrawlResult(target=CrawlTarget(url='https://example.com', depth=2, follow_external=False, content_types=['text/html'],...cation=None, details={})], metrics={}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).documents\n", "test_name": "test_full_crawl_pipeline", "rerun": "0"}, "1": {"status": "FAIL", "message": "   Failed: DID NOT RAISE <class 'ValueError'>\n", "test_name": "test_error_handling_integration", "rerun": "0"}, "2": {"status": "FAIL", "message": "       AssertionError: assert 0 == 5\n        +  where 0 = len({})\n        +    where {} = CrawlResult(target=CrawlTarget(url='https://example.com', depth=1, follow_external=False, content_types=['text/html'],..., metrics={'https://example.com': {}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).crawled_pages\n", "test_name": "test_rate_limiting_integration", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AttributeError: 'DocumentationCrawler' object has no attribute 'backend'\n", "test_name": "test_content_processing_integration", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 4, "total_error": 0}}, "12": {"suite_name": "tests/test_link_processor.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'https://example.com' in ['https://example.com/', 'https://base.com/relative/path', 'https://base.com/parent/path', 'https://base.com/current/path']\n", "test_name": "test_basic_link_extraction", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_empty_document", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_malformed_links", "rerun": "0"}, "3": {"status": "FAIL", "message": "   assert 0 == 1\n    +  where 0 = len([])\n", "test_name": "test_duplicate_links", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: assert 'https://example.com' in ['https://base.com/', 'https://base.com/page.html', 'https://example.com/', 'https://base.com/path']\n", "test_name": "test_fragment_handling", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: assert 'https://example.com?param=value' in ['https://base.com/?param=value', 'https://base.com/path?param=value', 'https://example.com/?param=value', 'https://base.com/page.html?param1=value1\u00b6m2=value2']\n", "test_name": "test_query_params", "rerun": "0"}, "6": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_special_characters.<locals>.<genexpr> at 0x7f1a2f236e90>)\n", "test_name": "test_special_characters", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_nested_links", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_invalid_base_url", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_data_urls", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_unicode_urls", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AssertionError: assert 'https://example.com' in ['https://example.com/', 'https://cdn.example.com/asset.js', 'https://api.example.com/v1']\n", "test_name": "test_protocol_relative_urls", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AssertionError: assert 'https://different-base.com/subdir/relative' in ['https://base.com/relative', 'https://base.com/absolute', 'https://external.com/']\n", "test_name": "test_base_tag_handling", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_malformed_base_tags", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_link_attributes", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AssertionError: assert 'http://example.com' in ['http://example.com/', 'https://example.com/']\n", "test_name": "test_link_schemes", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_url_normalization", "rerun": "0"}, "17": {"status": "FAIL", "message": "   AssertionError: assert ('HTTPS://EXAMPLE.COM' in ['https://base.com/PATH', 'https://base.com/path', 'https://EXAMPLE.COM/', 'https://example.com/', 'https://base.com/Mixed/Case/PATH'] or 'https://example.com' in ['https://base.com/PATH', 'https://base.com/path', 'https://EXAMPLE.COM/', 'https://example.com/', 'https://base.com/Mixed/Case/PATH'])\n", "test_name": "test_url_case_sensitivity", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_url_encoding_handling", "rerun": "0"}}, "status": {"total_pass": 10, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 9, "total_error": 0}}, "13": {"suite_name": "tests/test_organizer.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_document_organizer_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert 1 == 2\n    +  where 1 = len([DocumentVersion(version_id='v1', timestamp=datetime.datetime(2025, 4, 10, 9, 1, 36, 124921), hash='358138f25b8fdc7fd1...': 'https://example.com/doc'}, 'assets': {}, 'headings': [], 'structure': [], 'errors': [], 'title': 'Test Document'})])\n    +    where [DocumentVersion(version_id='v1', timestamp=datetime.datetime(2025, 4, 10, 9, 1, 36, 124921), hash='358138f25b8fdc7fd1...': 'https://example.com/doc'}, 'assets': {}, 'headings': [], 'structure': [], 'errors': [], 'title': 'Test Document'})] = DocumentMetadata(title='Test Document', url='', category='reference', tags=['version', 'test', 'document'], versions=[...nal': [], 'code': []}, index_terms=['test', 'document'], last_updated=datetime.datetime(2025, 4, 10, 9, 1, 36, 124921)).versions\n", "test_name": "test_document_version_management", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 'uncategorized' is None\n    +  where 'uncategorized' = DocumentMetadata(title='Miscellaneous', url='', category='uncategorized', tags=['random', 'content', 'miscellaneous'],...ternal': [], 'code': []}, index_terms=['miscellaneous'], last_updated=datetime.datetime(2025, 4, 10, 9, 1, 36, 130565)).category\n", "test_name": "test_document_categorization", "rerun": "0"}, "3": {"status": "FAIL", "message": "                   IndexError: list index out of range\n", "test_name": "test_reference_extraction", "rerun": "0"}, "4": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_search_functionality.<locals>.<genexpr> at 0x7f1a31c0ea80>)\n", "test_name": "test_search_functionality", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_collection_management", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_document_similarity", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AssertionError: assert 'v1' > 'v1'\n    +  where 'v1' = DocumentVersion(version_id='v1', timestamp=datetime.datetime(2025, 4, 10, 9, 1, 36, 155325), hash='7ddd76e2ba7470d5b88...l': 'https://example.com/doc'}, 'assets': {}, 'headings': [], 'structure': [], 'errors': [], 'title': 'Test Document'}).version_id\n    +  and   'v1' = DocumentVersion(version_id='v1', timestamp=datetime.datetime(2025, 4, 10, 9, 1, 36, 155325), hash='7ddd76e2ba7470d5b88...l': 'https://example.com/doc'}, 'assets': {}, 'headings': [], 'structure': [], 'errors': [], 'title': 'Test Document'}).version_id\n", "test_name": "test_version_tracking", "rerun": "0"}, "8": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_search_index_generation.<locals>.<genexpr> at 0x7f1a2f2712f0>)\n", "test_name": "test_search_index_generation", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 6, "total_error": 0}}, "14": {"suite_name": "tests/test_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_content_processor_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert 'Mock Title' == 'Sample Document'\n     \n     - Sample Document\n     + Mock Title\n", "test_name": "test_full_content_processing", "rerun": "0"}, "2": {"status": "FAIL", "message": "           AttributeError: Mock object has no attribute 'config'\n", "test_name": "test_content_size_limits", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_malformed_html_handling", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_special_content_handling", "rerun": "0"}, "5": {"status": "FAIL", "message": "   assert 0 == 2\n    +  where 0 = len([])\n", "test_name": "test_content_structure_preservation", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 3, "total_error": 0}}, "15": {"suite_name": "tests/test_quality.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_quality_checker_basic", "rerun": "0"}, "1": {"status": "FAIL", "message": "   assert not True\n    +  where True = any(<generator object test_quality_checker_content_length.<locals>.<genexpr> at 0x7f1a2f270930>)\n", "test_name": "test_quality_checker_content_length", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_quality_checker_headings", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_quality_checker_links", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_quality_checker_code_blocks", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_quality_checker_metadata", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AssertionError: assert 1 == 0\n    +  where 1 = len([QualityIssue(type=<IssueType.CONTENT_LENGTH: 'content_length'>, level=<IssueLevel.ERROR: 'error'>, message='Content length (0) is below minimum (50)', location=None, details={})])\n", "test_name": "test_quality_checker_custom_config", "rerun": "0"}}, "status": {"total_pass": 5, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 0}}, "16": {"suite_name": "tests/test_url_handling.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_urlunparse_behavior", "rerun": "0"}, "1": {"status": "FAIL", "message": "       AssertionError: assert 'https://example.com' == 'https://example.com/'\n         \n         - https://example.com/\n         ?                    -\n         + https://example.com\n", "test_name": "test_url_info_creation_basic", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_url_info_path_normalization", "rerun": "0"}, "3": {"status": "FAIL", "message": "       AssertionError: assert 'http://example.com' == 'http://example.com/'\n         \n         - http://example.com/\n         ?                   -\n         + http://example.com\n", "test_name": "test_url_info_scheme_handling", "rerun": "0"}, "4": {"status": "FAIL", "message": "       AssertionError: assert 'https://exam...ram=2&query=1' == 'https://exam...ery=1&param=2'\n         \n         - https://example.com/?query=1&param=2\n         ?                    -        --------\n         + https://example.com?param=2&query=1\n         ?                     ++++++++\n", "test_name": "test_url_info_query_handling", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_url_info_fragment_handling", "rerun": "0"}, "6": {"status": "FAIL", "message": "       AssertionError: assert None == ''\n        +  where None = <src.utils.url_info.URLInfo object at 0x7f1a31e3e870>.netloc\n", "test_name": "test_url_info_invalid_urls", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_url_info_immutability", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_url_info_equality", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_url_info_type_safety", "rerun": "0"}, "10": {"status": "FAIL", "message": "       AssertionError: assert 'http://xn--nicode-2ya.com' == 'http://xn--nicode-2ya.com/'\n         \n         - http://xn--nicode-2ya.com/\n         ?                          -\n         + http://xn--nicode-2ya.com\n", "test_name": "test_url_info_edge_cases", "rerun": "0"}, "11": {"status": "FAIL", "message": "       assert True == False\n        +  where True = <src.utils.url_info.URLInfo object at 0x7f1a31c94740>.is_valid\n", "test_name": "test_url_info_security", "rerun": "0"}, "12": {"status": "FAIL", "message": "       AssertionError: assert 'http://page2.html' == 'http://examp...cs/page2.html'\n         \n         - http://example.com/docs/page2.html\n         + http://page2.html\n", "test_name": "test_url_info_relative_paths", "rerun": "0"}, "13": {"status": "FAIL", "message": "       AssertionError: assert 'http://examp...param1=value1' == 'http://examp...param1=value1'\n         \n         - http://example.com/?param1=value1\n         ?                   -\n         + http://example.com?param1=value1\n", "test_name": "test_url_info_query_parameters", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_url_info_performance", "rerun": "0"}}, "status": {"total_pass": 7, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 8, "total_error": 0}}}}, "date": "April 10, 2025", "start_time": 1744264896.2767005, "total_suite": 17, "status": "FAIL", "status_list": {"pass": "140", "fail": "40", "skip": "3", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "183"}