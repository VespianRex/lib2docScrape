{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}, "tests": {"0": {"status": "FAIL", "message": "   AssertionError: Expected pages crawled > 0, got 0\n   assert 0 > 0\n    +  where 0 = CrawlStats(start_time=datetime.datetime(2025, 5, 9, 20, 39, 49, 44517, tzinfo=datetime.timezone.utc), end_time=datetime.datetime(2025, 5, 9, 20, 39, 50, 249669, tzinfo=datetime.timezone.utc), pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=1.205152, average_time_per_page=0.0, quality_issues=0, bytes_processed=0).pages_crawled\n    +    where CrawlStats(start_time=datetime.datetime(2025, 5, 9, 20, 39, 49, 44517, tzinfo=datetime.timezone.utc), end_time=datetime.datetime(2025, 5, 9, 20, 39, 50, 249669, tzinfo=datetime.timezone.utc), pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=1.205152, average_time_per_page=0.0, quality_issues=0, bytes_processed=0) = CrawlResult(target=CrawlTarget(url='file:///tmp/pytest-of-alex/pytest-47/test_full_site_crawl0/test_docs/index.html', depth=2, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=[], max_pages=10, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2025, 5, 9, 20, 39, 49, 44517, tzinfo=datetime.timezone.utc), end_time=datetime.datetime(2025, 5, 9, 20, 39, 50, 249669, tzinfo=datetime.timezone.utc), pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=1.205152, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[], metrics={}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).stats\n", "test_name": "test_full_site_crawl", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: Expected 1 document for guide.html, got 0\n   assert 0 == 1\n    +  where 0 = len([])\n    +    where [] = CrawlResult(target=CrawlTarget(url='file:///tmp/pytest-of-alex/pytest-47/test_content_processing_pipeli0/test_docs/guide.html', depth=1, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=[], max_pages=1, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2025, 5, 9, 20, 39, 50, 283924, tzinfo=datetime.timezone.utc), end_time=datetime.datetime(2025, 5, 9, 20, 39, 51, 535956, tzinfo=datetime.timezone.utc), pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=1.252032, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[], metrics={}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).documents\n", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: Metrics for file:///tmp/pytest-of-alex/pytest-47/test_quality_checks0/test_docs/api.html not found\n   assert 'file:///tmp/pytest-of-alex/pytest-47/test_quality_checks0/test_docs/api.html' in {}\n    +  where {} = CrawlResult(target=CrawlTarget(url='file:///tmp/pytest-of-alex/pytest-47/test_quality_checks0/test_docs/api.html', depth=1, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=[], max_pages=1, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2025, 5, 9, 20, 39, 51, 549268, tzinfo=datetime.timezone.utc), end_time=datetime.datetime(2025, 5, 9, 20, 39, 52, 741507, tzinfo=datetime.timezone.utc), pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=1.192239, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[], metrics={}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).metrics\n", "test_name": "test_quality_checks", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: Should have crawled all 4 pages\n   assert 0 == 4\n    +  where 0 = len([])\n    +    where [] = CrawlResult(target=CrawlTarget(url='file:///tmp/pytest-of-alex/pytest-47/test_document_organization0/test_docs/index.html', depth=2, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=[], max_pages=10, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2025, 5, 9, 20, 39, 52, 749314, tzinfo=datetime.timezone.utc), end_time=datetime.datetime(2025, 5, 9, 20, 39, 53, 993930, tzinfo=datetime.timezone.utc), pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=1.244616, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[], metrics={}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={}).documents\n", "test_name": "test_document_organization", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: Organizer should have 4 documents\n   assert 0 == 4\n    +  where 0 = len({})\n    +    where {} = <src.organizers.doc_organizer.DocumentOrganizer object at 0x7f90b0b406b0>.documents\n    +      where <src.organizers.doc_organizer.DocumentOrganizer object at 0x7f90b0b406b0> = <src.crawler.DocumentationCrawler object at 0x7f90b0b43890>.document_organizer\n", "test_name": "test_search_functionality", "rerun": "0"}}, "suite_name": "tests/test_integration.py"}}}, "date": "May 09, 2025", "start_time": 1746823193.9996145, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "5", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "5"}