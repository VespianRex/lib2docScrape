{"content": {"suites": {"0": {"status": {"total_pass": 2, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 3, "total_error": 0}, "tests": {"0": {"status": "FAIL", "message": "   AssertionError: Expected 4 documents, got 1\n   assert 1 == 4\n    +  where 1 = len([{'assets': {'images': [], 'media': [], 'scripts': [], 'stylesheets': []}, 'content': {'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'has_code_blocks': False, 'has_tables': False, 'title': 'Test Documentation'}, 'title': 'Test Documentation', ...}])\n    +    where [{'assets': {'images': [], 'media': [], 'scripts': [], 'stylesheets': []}, 'content': {'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'has_code_blocks': False, 'has_tables': False, 'title': 'Test Documentation'}, 'title': 'Test Documentation', ...}] = CrawlResult(target=CrawlTarget(url='file:///tmp/pytest-of-alex/pytest-52/test_full_site_crawl0/test_docs/index.html', depth=2, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=[], max_pages=10, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2025, 5, 9, 20, 50, 34, 687138, tzinfo=datetime.timezone.utc), end_time=datetime.datetime(2025, 5, 9, 20, 50, 35, 930644, tzinfo=datetime.timezone.utc), pages_crawled=1, successful_crawls=1, failed_crawls=0, total_time=1.243506, average_time_per_page=1.243506, quality_issues=3, bytes_processed=525), documents=[{'url': 'file:///tmp/pytest-of-alex/pytest-52/test_full_site_crawl0/test_docs/index.html', 'content': {'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'title': 'Test Documentation', 'has_code_blocks': False, 'has_tables': False}, 'assets': {'images': [], 'stylesheets': [], 'scripts': [], 'media': []}, 'title': 'Test Documentation'}], issues=[QualityIssue(type=<IssueType.HEADING_STRUCTURE: 'heading_structure'>, level=<IssueLevel.ERROR: 'error'>, message='Too few headings (0), minimum is 1', ...d metadata field: description', location=None, details={})], metrics={'file:///tmp/pytest-of-alex/pytest-52/test_full_site_crawl0/test_docs/index.html': {'content_length': 76, 'heading_count': 0, 'internal_link_count': 0, 'code_block_count': 0}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={'file:///tmp/pytest-of-alex/pytest-52/test_full_site_crawl0/test_docs/index.html': ProcessedContent(url='file:///tmp/pytest-of-alex/pytest-52/test_full_site_crawl0/test_docs/index.html', content={'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, metadata={'title': 'Test Documentation', 'has_code_blocks': False, 'has_tables': False}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': []}, headings=[], structure=[{'type': 'heading', 'level': 1, 'title': 'Test Documentation', 'id': '', 'classes': []}, {'type': 'list', 'tag': 'ul', 'content': [[{'type': 'link_inline', 'text': 'API Reference', 'href': 'api.html'}], [{'type': 'link_inline', 'text': 'User Guide', 'href': 'guide.html'}], [{'type': 'link_inline', 'text': 'Examples', 'href': 'examples.html'}]]}], errors=[], title='Test Documentation')}).documents\n", "test_name": "test_full_site_crawl", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_quality_checks", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: Should have crawled all 4 pages\n   assert 1 == 4\n    +  where 1 = len([{'assets': {'images': [], 'media': [], 'scripts': [], 'stylesheets': []}, 'content': {'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'has_code_blocks': False, 'has_tables': False, 'title': 'Test Documentation'}, 'title': 'Test Documentation', ...}])\n    +    where [{'assets': {'images': [], 'media': [], 'scripts': [], 'stylesheets': []}, 'content': {'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'has_code_blocks': False, 'has_tables': False, 'title': 'Test Documentation'}, 'title': 'Test Documentation', ...}] = CrawlResult(target=CrawlTarget(url='file:///tmp/pytest-of-alex/pytest-52/test_document_organization0/test_docs/index.html', depth=2, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=[], max_pages=10, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2025, 5, 9, 20, 50, 38, 461096, tzinfo=datetime.timezone.utc), end_time=datetime.datetime(2025, 5, 9, 20, 50, 39, 690146, tzinfo=datetime.timezone.utc), pages_crawled=1, successful_crawls=1, failed_crawls=0, total_time=1.22905, average_time_per_page=1.22905, quality_issues=3, bytes_processed=525), documents=[{'url': 'file:///tmp/pytest-of-alex/pytest-52/test_document_organization0/test_docs/index.html', 'content': {'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'title': 'Test Documentation', 'has_code_blocks': False, 'has_tables': False}, 'assets': {'images': [], 'stylesheets': [], 'scripts': [], 'media': []}, 'title': 'Test Documentation'}], issues=[QualityIssue(type=<IssueType.HEADING_STRUCTURE: 'heading_structure'>, level=<IssueLevel.ERROR: 'error'>, message='Too few headings (0), minim...description', location=None, details={})], metrics={'file:///tmp/pytest-of-alex/pytest-52/test_document_organization0/test_docs/index.html': {'content_length': 76, 'heading_count': 0, 'internal_link_count': 0, 'code_block_count': 0}}, structure=None, processed_url=None, failed_urls=[], errors={}, crawled_pages={'file:///tmp/pytest-of-alex/pytest-52/test_document_organization0/test_docs/index.html': ProcessedContent(url='file:///tmp/pytest-of-alex/pytest-52/test_document_organization0/test_docs/index.html', content={'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, metadata={'title': 'Test Documentation', 'has_code_blocks': False, 'has_tables': False}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': []}, headings=[], structure=[{'type': 'heading', 'level': 1, 'title': 'Test Documentation', 'id': '', 'classes': []}, {'type': 'list', 'tag': 'ul', 'content': [[{'type': 'link_inline', 'text': 'API Reference', 'href': 'api.html'}], [{'type': 'link_inline', 'text': 'User Guide', 'href': 'guide.html'}], [{'type': 'link_inline', 'text': 'Examples', 'href': 'examples.html'}]]}], errors=[], title='Test Documentation')}).documents\n", "test_name": "test_document_organization", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: Organizer should have 4 documents\n   assert 1 == 4\n    +  where 1 = len({'1491b227-9114-41db-a1bd-0d8ea7e465bb': DocumentMetadata(title='Test Documentation', url='file:///tmp/pytest-of-alex/pytest-52/test_search_functionality0/test_docs/index.html', category='uncategorized', tags=['documentation', 'test'], versions=[DocumentVersion(version_id='v1', timestamp=datetime.datetime(2025, 5, 9, 23, 50, 40, 917314), hash='a30698f3cec6ae6e152d265517eca4d715d109bcc2cba5a2d89b0df5065abe8d', changes={'url': 'file:///tmp/pytest-of-alex/pytest-52/test_search_functionality0/test_docs/index.html', 'content': {'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'title': 'Test Documentation', 'has_code_blocks': False, 'has_tables': False}, 'assets': {'images': [], 'stylesheets': [], 'scripts': [], 'media': []}, 'headings': [], 'structure': [{'type': 'heading', 'level': 1, 'title': 'Test Documentation', 'id': '', 'classes': []}, {'type': 'list', 'tag': 'ul', 'content': [[{'type': 'link_inline', 'text': 'API Reference', 'href': 'api.html'}], [{'type': 'link_inline', 'text': 'User Guide', 'href': 'guide.html'}], [{'type': 'link_inline', 'text': 'Examples', 'href': 'examples.html'}]]}], 'errors': [], 'title': 'Test Documentation'})], references={'internal': [], 'external': [], 'code': []}, index_terms=['documentation', 'test'], last_updated=datetime.datetime(2025, 5, 9, 23, 50, 40, 917314))})\n    +    where {'1491b227-9114-41db-a1bd-0d8ea7e465bb': DocumentMetadata(title='Test Documentation', url='file:///tmp/pytest-of-alex/pytest-52/test_search_functionality0/test_docs/index.html', category='uncategorized', tags=['documentation', 'test'], versions=[DocumentVersion(version_id='v1', timestamp=datetime.datetime(2025, 5, 9, 23, 50, 40, 917314), hash='a30698f3cec6ae6e152d265517eca4d715d109bcc2cba5a2d89b0df5065abe8d', changes={'url': 'file:///tmp/pytest-of-alex/pytest-52/test_search_functionality0/test_docs/index.html', 'content': {'formatted_content': '# Test Documentation\\n\\n* [API Reference](#)\\n* [User Guide](#)\\n* [Examples](#)'}, 'metadata': {'title': 'Test Documentation', 'has_code_blocks': False, 'has_tables': False}, 'assets': {'images': [], 'stylesheets': [], 'scripts': [], 'media': []}, 'headings': [], 'structure': [{'type': 'heading', 'level': 1, 'title': 'Test Documentation', 'id': '', 'classes': []}, {'type': 'list', 'tag': 'ul', 'content': [[{'type': 'link_inline', 'text': 'API Reference', 'href': 'api.html'}], [{'type': 'link_inline', 'text': 'User Guide', 'href': 'guide.html'}], [{'type': 'link_inline', 'text': 'Examples', 'href': 'examples.html'}]]}], 'errors': [], 'title': 'Test Documentation'})], references={'internal': [], 'external': [], 'code': []}, index_terms=['documentation', 'test'], last_updated=datetime.datetime(2025, 5, 9, 23, 50, 40, 917314))} = <src.organizers.doc_organizer.DocumentOrganizer object at 0x7fae40224e60>.documents\n    +      where <src.organizers.doc_organizer.DocumentOrganizer object at 0x7fae40224e60> = <src.crawler.DocumentationCrawler object at 0x7fae402249e0>.document_organizer\n", "test_name": "test_search_functionality", "rerun": "0"}}, "suite_name": "tests/test_integration.py"}}}, "date": "May 09, 2025", "start_time": 1746823839.7003644, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "2", "fail": "3", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "5"}