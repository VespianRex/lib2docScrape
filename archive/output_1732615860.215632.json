{"content": {"suites": {"0": {"status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 13, "total_error": 0}, "tests": {"0": {"status": "FAIL", "message": "   pydantic_core._pydantic_core.ValidationError: 5 validation errors for URLInfo\n   original\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   normalized\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   scheme\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   netloc\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   path\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n", "test_name": "test_crawl_with_urlinfo", "rerun": "0"}, "1": {"status": "FAIL", "message": "   assert 0 >= 3\n    +  where 0 = len([])\n", "test_name": "test_crawl_depth_first", "rerun": "0"}, "2": {"status": "FAIL", "message": "   assert False\n    +  where False = all(<generator object test_rate_limiting_precision.<locals>.<genexpr> at 0x1074d9700>)\n", "test_name": "test_rate_limiting_precision", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_concurrent_request_limit", "rerun": "0"}, "4": {"status": "FAIL", "message": "       pydantic_core._pydantic_core.ValidationError: 5 validation errors for URLInfo\n       original\n         Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n           For further information visit https://errors.pydantic.dev/2.10/v/missing\n       normalized\n         Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n           For further information visit https://errors.pydantic.dev/2.10/v/missing\n       scheme\n         Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n           For further information visit https://errors.pydantic.dev/2.10/v/missing\n       netloc\n         Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n           For further information visit https://errors.pydantic.dev/2.10/v/missing\n       path\n         Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n           For further information visit https://errors.pydantic.dev/2.10/v/missing\n", "test_name": "test_url_normalization", "rerun": "0"}, "5": {"status": "FAIL", "message": "       assert 500 == 404\n        +  where 500 = CrawlResult(url='https://example.com/notfound', content={}, metadata={'error': \"'coroutine' object does not support the asynchronous context manager protocol\", 'attempts': 2, 'ssl_verified': False}, status=500, error=\"'coroutine' object does not support the asynchronous context manager protocol\").status\n", "test_name": "test_error_propagation", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AttributeError: 'NoneType' object has no attribute 'get'\n", "test_name": "test_retry_behavior", "rerun": "0"}, "7": {"status": "FAIL", "message": "   assert 0 >= 1\n", "test_name": "test_metrics_accuracy", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AttributeError: 'NoneType' object has no attribute 'closed'\n", "test_name": "test_resource_cleanup", "rerun": "0"}, "9": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_initialization[https://docs.python.org/3/-expected0]", "rerun": "0"}, "10": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_initialization[https://docs.python.org-expected1]", "rerun": "0"}, "11": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_initialization[invalid-url-expected2]", "rerun": "0"}, "12": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_hashable", "rerun": "0"}, "13": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_immutable", "rerun": "0"}}, "suite_name": "tests/test_crawl4ai_extended.py"}}}, "date": "November 26, 2024", "start_time": 1732615579.7642, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "1", "fail": "13", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "14"}