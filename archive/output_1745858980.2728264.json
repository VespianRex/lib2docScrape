{"content": {"suites": {"0": {"status": {"total_pass": 38, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 16, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[http://example.com-http://example.com/]", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://www.example.co.uk/path?a=1-https://www.example.co.uk/path?a=1]", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[http://EXAMPLE.com:80/./path/../other/-http://example.com/other/]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://xn--mnchen-3ya.de/path-https://xn--mnchen-3ya.de/path]", "rerun": "0"}, "4": {"status": "FAIL", "message": "       AssertionError: assert 'Private IP address not allowed' in 'Disallowed host: localhost'\n        +  where 'Disallowed host: localhost' = URLInfo(raw='http://localhost:8080', normalized='http://localhost:8080', status='invalid (Disallowed host: localhost)').error_message\n", "test_name": "test_valid_url_initialization[http://localhost:8080-http://localhost:8080/]", "rerun": "0"}, "5": {"status": "FAIL", "message": "       AssertionError: assert 'Private IP address not allowed' in 'Private IP not allowed: ::1'\n        +  where 'Private IP not allowed: ::1' = URLInfo(raw='http://[::1]/test', normalized='http://[::1]/test', status='invalid (Private IP not allowed: ::1)').error_message\n", "test_name": "test_valid_url_initialization[http://[::1]/test-http://[::1]/test]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://example.com/path/-https://example.com/path/]", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://example.com/path-https://example.com/path]", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[javascript:alert(1)-Disallowed scheme]", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[file:///path/to/file.txt-Disallowed scheme]", "rerun": "0"}, "10": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Auth info not allowed' but got 'Disallowed scheme: ftp' for URL 'ftp://user:pass@example.com'\n   assert 'Auth info not allowed' in 'Disallowed scheme: ftp'\n    +  where 'Disallowed scheme: ftp' = URLInfo(raw='ftp://user:pass@example.com', normalized='ftp://user:pass@example.com', status='invalid (Disallowed scheme: ftp)').error_message\n", "test_name": "test_invalid_url_initialization[ftp://user:pass@example.com-Auth info not allowed]", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Invalid label chars in netloc: <invalid>' but got 'Invalid label chars in: <invalid>' for URL 'http://<invalid>.com'\n   assert 'Invalid label chars in netloc: <invalid>' in 'Invalid label chars in: <invalid>'\n    +  where 'Invalid label chars in: <invalid>' = URLInfo(raw='http://<invalid>.com', normalized='http://<invalid>.com', status='invalid (Invalid label chars in: <invalid>)').error_message\n", "test_name": "test_invalid_url_initialization[http://<invalid>.com-Invalid label chars in netloc: <invalid>]", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Port must be between 1-65535' but got 'ValueError: Port out of range 0-65535' for URL 'http://example.com:99999'\n   assert 'Port must be between 1-65535' in 'ValueError: Port out of range 0-65535'\n    +  where 'ValueError: Port out of range 0-65535' = URLInfo(raw='http://example.com:99999', normalized='http://example.com:99999', status='invalid (ValueError: Port out of range 0-65535)').error_message\n", "test_name": "test_invalid_url_initialization[http://example.com:99999-Port must be between 1-65535]", "rerun": "0"}, "13": {"status": "FAIL", "message": "   AssertionError: assert True is False\n    +  where True = URLInfo(raw='http://example.com/../../etc/passwd', normalized='http://example.com/etc/passwd', status='valid').is_valid\n", "test_name": "test_invalid_url_initialization[http://example.com/../../etc/passwd-Directory traversal detected in path]", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Invalid character in query' but got 'Invalid chars in decoded query' for URL 'http://example.com/?q=<script>'\n   assert 'Invalid character in query' in 'Invalid chars in decoded query'\n    +  where 'Invalid chars in decoded query' = URLInfo(raw='http://example.com/?q=<script>', normalized='http://example.com/?q=<script>', status='invalid (Invalid chars in decoded query)').error_message\n", "test_name": "test_invalid_url_initialization[http://example.com/?q=<script>-Invalid character in query]", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Private IP address not allowed' but got 'Private IP not allowed: 192.168.1.1' for URL 'http://192.168.1.1'\n   assert 'Private IP address not allowed' in 'Private IP not allowed: 192.168.1.1'\n    +  where 'Private IP not allowed: 192.168.1.1' = URLInfo(raw='http://192.168.1.1', normalized='http://192.168.1.1', status='invalid (Private IP not allowed: 192.168.1.1)').error_message\n", "test_name": "test_invalid_url_initialization[http://192.168.1.1-Private IP address not allowed]", "rerun": "0"}, "16": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Private IP address not allowed' but got 'Private IP not allowed: 127.0.0.1' for URL 'http://127.0.0.1'\n   assert 'Private IP address not allowed' in 'Private IP not allowed: 127.0.0.1'\n    +  where 'Private IP not allowed: 127.0.0.1' = URLInfo(raw='http://127.0.0.1', normalized='http://127.0.0.1', status='invalid (Private IP not allowed: 127.0.0.1)').error_message\n", "test_name": "test_invalid_url_initialization[http://127.0.0.1-Private IP address not allowed]", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[-URL cannot be None or empty]", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[None-URL cannot be None or empty]", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Null byte detected in path' but got 'Null byte detected in raw URL path or query' for URL 'http://example.com/path%00.txt'\n   assert 'Null byte detected in path' in 'Null byte detected in raw URL path or query'\n    +  where 'Null byte detected in raw URL path or query' = URLInfo(raw='http://example.com/path%00.txt', normalized='http://example.com/path%00.txt', status='invalid (Null byte detected in raw URL path or query)').error_message\n", "test_name": "test_invalid_url_initialization[http://example.com/path%00.txt-Null byte detected in path]", "rerun": "0"}, "20": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Domain label cannot start or end with hyphen' but got 'Invalid domain label length or empty label' for URL 'http://example..com'\n   assert 'Domain label cannot start or end with hyphen' in 'Invalid domain label length or empty label'\n    +  where 'Invalid domain label length or empty label' = URLInfo(raw='http://example..com', normalized='http://example..com', status='invalid (Invalid domain label length or empty label)').error_message\n", "test_name": "test_invalid_url_initialization[http://example..com-Domain label cannot start or end with hyphen]", "rerun": "0"}, "21": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Domain label cannot start or end with hyphen' but got 'Invalid label chars in: -example' for URL 'http://-example.com'\n   assert 'Domain label cannot start or end with hyphen' in 'Invalid label chars in: -example'\n    +  where 'Invalid label chars in: -example' = URLInfo(raw='http://-example.com', normalized='http://-example.com', status='invalid (Invalid label chars in: -example)').error_message\n", "test_name": "test_invalid_url_initialization[http://-example.com-Domain label cannot start or end with hyphen]", "rerun": "0"}, "22": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Domain label cannot start or end with hyphen' but got 'Invalid label chars in: example-' for URL 'http://example-.com'\n   assert 'Domain label cannot start or end with hyphen' in 'Invalid label chars in: example-'\n    +  where 'Invalid label chars in: example-' = URLInfo(raw='http://example-.com', normalized='http://example-.com', status='invalid (Invalid label chars in: example-)').error_message\n", "test_name": "test_invalid_url_initialization[http://example-.com-Domain label cannot start or end with hyphen]", "rerun": "0"}, "23": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Invalid top-level domain' but got 'Invalid TLD length: c' for URL 'http://example.c'\n   assert 'Invalid top-level domain' in 'Invalid TLD length: c'\n    +  where 'Invalid TLD length: c' = URLInfo(raw='http://example.c', normalized='http://example.c', status='invalid (Invalid TLD length: c)').error_message\n", "test_name": "test_invalid_url_initialization[http://example.c-Invalid top-level domain]", "rerun": "0"}, "24": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[page2.html-http://example.com/docs/page1.html-http://example.com/docs/page2.html]", "rerun": "0"}, "25": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[../index.html-http://example.com/docs/page1.html-http://example.com/index.html]", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[/images/logo.png-http://example.com/docs/page1.html-http://example.com/images/logo.png]", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[//other.com/path-https://example.com/docs/-https://other.com/path]", "rerun": "0"}, "28": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[?query=new-http://example.com/page?a=1-http://example.com/page?query=new]", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[#fragment-http://example.com/page-http://example.com/page]", "rerun": "0"}, "30": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[path/./../sub/./file-http://example.com/base/-http://example.com/base/sub/file]", "rerun": "0"}, "31": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[path/-http://example.com/base-http://example.com/path/]", "rerun": "0"}, "32": {"status": "PASS", "message": "", "test_name": "test_url_properties", "rerun": "0"}, "33": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[https://www.example.co.uk/path-www-example-co.uk-example.co.uk]", "rerun": "0"}, "34": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://blog.example.com-blog-example-com-example.com]", "rerun": "0"}, "35": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[https://justadomain.com-None-justadomain-com-justadomain.com]", "rerun": "0"}, "36": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://xn--mnchen-3ya.de-None-xn--mnchen-3ya-de-xn--mnchen-3ya.de]", "rerun": "0"}, "37": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://localhost:8080-None-localhost-None-localhost]", "rerun": "0"}, "38": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://[::1]-None-::1-None-::1]", "rerun": "0"}, "39": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://10.0.0.1-None-10.0.0.1-None-10.0.0.1]", "rerun": "0"}, "40": {"status": "PASS", "message": "", "test_name": "test_tldextract_fallback", "rerun": "0"}, "41": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "42": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[/relative/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "43": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://www.example.com/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "44": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[http://example.com/path-https://example.com/base-URLType.EXTERNAL]", "rerun": "0"}, "45": {"status": "FAIL", "message": "   AssertionError: assert None == <URLType.EXTERNAL: 2>\n    +  where None = URLInfo(raw='https://other.com/path', normalized='https://other.com/path', status='valid').url_type\n", "test_name": "test_url_type_determination[https://other.com/path-https://example.com/base-URLType.EXTERNAL]", "rerun": "0"}, "46": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[page.html-https://example.com/base/-URLType.INTERNAL]", "rerun": "0"}, "47": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com:443/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "48": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com:8443/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "49": {"status": "PASS", "message": "", "test_name": "test_url_equality_and_hash", "rerun": "0"}, "50": {"status": "FAIL", "message": "   AssertionError: Modifying returned query_params dict affected internal state\n   assert 'new' not in {'a': ['1'], 'new': ['value']}\n    +  where {'a': ['1'], 'new': ['value']} = URLInfo(raw='http://example.com/path?a=1', normalized='http://example.com/path?a=1', status='valid').query_params\n", "test_name": "test_immutability", "rerun": "0"}, "51": {"status": "PASS", "message": "", "test_name": "test_fragment_removal", "rerun": "0"}, "52": {"status": "PASS", "message": "", "test_name": "test_long_url_edge_case", "rerun": "0"}, "53": {"status": "PASS", "message": "", "test_name": "test_url_info_performance", "rerun": "0"}}, "suite_name": "tests/url/test_info.py"}, "1": {"suite_name": "tests/url/test_normalization.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_is_default_port", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 'http:/example.com' == 'http://example.com/'\n     \n     - http://example.com/\n     ?      -            -\n     + http:/example.com\n", "test_name": "test_normalize_path", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_normalize_url", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "2": {"suite_name": "tests/url/test_security.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'ftp' not in {'ftp': 21, 'http': 80, 'https': 443}\n    +  where {'ftp': 21, 'http': 80, 'https': 443} = URLSecurityConfig.DEFAULT_PORTS\n", "test_name": "test_security_config_constants", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_security_regex_patterns", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "3": {"suite_name": "tests/url/test_types.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_url_type_enum", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "4": {"suite_name": "tests/url/test_validation.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'Invalid scheme' in 'Disallowed scheme: javascript'\n", "test_name": "test_validate_scheme", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_validate_netloc", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_validate_port", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_validate_path", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_validate_query", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_validate_security_patterns", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_validate_url", "rerun": "0"}}, "status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}}}, "date": "April 28, 2025", "start_time": 1745858823.4771454, "total_suite": 5, "status": "FAIL", "status_list": {"pass": "49", "fail": "19", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "68"}