{"content": {"suites": {"0": {"status": {"total_pass": 39, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 62, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_init_default_config", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_init_custom_config", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_extract_title_with_title_tag", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_extract_title_with_h1_fallback", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_extract_title_no_title", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_extract_text_basic", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_scripts", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_extract_text_preserve_code", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AssertionError: assert 1 == 4\n    +  where 1 = len([{'children': [{'children': [{'children': [...], 'id': 'h3', 'level': 3, 'text': 'Heading 3'}], 'id': '', 'level': 2, 'text': 'Heading 2'}], 'id': 'h1', 'level': 1, 'text': 'Heading 1'}])\n", "test_name": "test_extract_headings", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_extract_links", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AssertionError: assert '/test1.jpg' in [{'alt': 'Test 1', 'src': '/test1.jpg', 'srcset': '', 'title': ''}, {'alt': 'Test 2', 'src': 'https://example.com/test2.jpg', 'srcset': '', 'title': ''}]\n", "test_name": "test_extract_images", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AssertionError: assert '/style1.css' in [{'href': '/style1.css', 'media': '', 'type': 'text/css'}, {'href': 'https://example.com/style2.css', 'media': '', 'type': 'text/css'}]\n", "test_name": "test_extract_stylesheets", "rerun": "0"}, "13": {"status": "FAIL", "message": "   assert 3 == 2\n    +  where 3 = len([{'async': False, 'content': '', 'defer': False, 'src': '/script1.js', ...}, {'async': False, 'content': '', 'defer': False, 'src': 'https://example.com/script2.js', ...}, {'async': False, 'content': \"console.log('inline');\", 'defer': False, 'src': '', ...}])\n", "test_name": "test_extract_scripts", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AssertionError: assert 2 == 3\n    +  where 2 = len([{'sources': [], 'src': '/video.mp4', 'type': 'video'}, {'sources': [], 'src': '/audio.mp3', 'type': 'audio'}])\n", "test_name": "test_extract_media", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AssertionError: assert 1 == 2\n    +  where 1 = len([{'children': [{'children': [{'children': [], 'id': '', 'level': 3, 'text': 'Section 1', ...}, {'children': [], 'id': '', 'level': 3, 'text': 'Paragraph 1', ...}, {'children': [], 'id': '', 'level': 3, 'text': 'def test(): pass', ...}, {'children': [], 'id': '', 'level': 3, 'text': 'Section 2', ...}, {'children': [], 'id': '', 'level': 3, 'text': 'Paragraph 2', ...}], 'id': '', 'level': 2, 'text': 'Section 1 Paragraph 1 def test(): pass Section 2 Paragraph 2', ...}], 'id': '', 'level': 1, 'text': 'Section 1 Paragraph 1 def test(): pass Section 2 Paragraph 2', ...}])\n", "test_name": "test_extract_content_structure", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_process_basic", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_process_large_content", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_find_main_content", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AssertionError: assert '> Quote' in '# Heading 1\\n\\nParagraph\\n\\n```\\nCode block\\n```\\n\\n- Item 1\\n- Item 2\\n\\nQuote'\n", "test_name": "test_format_as_markdown", "rerun": "0"}, "20": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_convert_table_to_markdown'\n", "test_name": "test_convert_table_to_markdown", "rerun": "0"}, "21": {"status": "FAIL", "message": "   assert 'alert' not in \"\\nalert('te...olor:red;}\\n\"\n     \n     'alert' is contained here:\n       \n       alert('test');\n     ? +++++\n       <p>Test &amp; content</p>\n       .test{color:red;}\n", "test_name": "test_safe_content", "rerun": "0"}, "22": {"status": "FAIL", "message": "   TypeError: ContentProcessor._safe_content() got an unexpected keyword argument 'preserve_whitespace'\n", "test_name": "test_safe_content_preserve_whitespace", "rerun": "0"}, "23": {"status": "FAIL", "message": "   TypeError: ContentProcessor._safe_content() got an unexpected keyword argument 'preserve_entities'\n", "test_name": "test_safe_content_preserve_entities", "rerun": "0"}, "24": {"status": "FAIL", "message": "   KeyError: 'title'\n", "test_name": "test_extract_metadata", "rerun": "0"}, "25": {"status": "FAIL", "message": "   AssertionError: assert '/image.jpg' in ['https://example.com/image.jpg']\n", "test_name": "test_collect_assets", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_nested_content", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_comments", "rerun": "0"}, "28": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_special_characters", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_extract_headings_empty", "rerun": "0"}, "30": {"status": "FAIL", "message": "   AssertionError: assert 1 >= 4\n    +  where 1 = len([{'children': [{'children': [{'children': [], 'id': '', 'level': 3, 'text': 'Subsection A'}], 'id': '', 'level': 2, 'text': 'Section One'}, {'children': [{'children': [], 'id': '', 'level': 4, 'text': 'Not included'}], 'id': '', 'level': 2, 'text': 'Section Two'}], 'id': '', 'level': 1, 'text': 'Main Heading with emphasis'}])\n", "test_name": "test_extract_headings_with_nested_content", "rerun": "0"}, "31": {"status": "FAIL", "message": "   AssertionError: assert 2 == 0\n    +  where 2 = len([{'source': 'content', 'text': 'Email Link', 'title': '', 'url': 'mailto:test@example.com'}, {'source': 'content', 'text': 'Hash Link', 'title': '', 'url': '#'}])\n", "test_name": "test_extract_links_with_invalid_urls", "rerun": "0"}, "32": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_links_with_relative_paths.<locals>.<genexpr> at 0x11ad11540>)\n", "test_name": "test_extract_links_with_relative_paths", "rerun": "0"}, "33": {"status": "FAIL", "message": "   AssertionError: assert 'python' == 'language-python'\n     \n     - language-python\n     + python\n", "test_name": "test_extract_code_blocks_with_attributes", "rerun": "0"}, "34": {"status": "FAIL", "message": "   AssertionError: assert 1 == 2\n    +  where 1 = len([{'alt': '', 'src': '/image.jpg', 'srcset': 'small.jpg 300w, large.jpg 900w', 'title': ''}])\n", "test_name": "test_extract_images_with_data_urls", "rerun": "0"}, "35": {"status": "FAIL", "message": "   AssertionError: assert 'base.css' in [{'href': 'base.css', 'media': '', 'type': 'text/css'}, {'href': 'print.css', 'media': 'print', 'type': 'text/css'}, {'href': 'mobile.css', 'media': 'screen and (max-width: 600px)', 'type': 'text/css'}]\n", "test_name": "test_extract_stylesheets_with_media_queries", "rerun": "0"}, "36": {"status": "FAIL", "message": "   assert 5 == 4\n    +  where 5 = len([{'async': False, 'content': '', 'defer': False, 'src': 'sync.js', ...}, {'async': True, 'content': '', 'defer': False, 'src': 'async.js', ...}, {'async': False, 'content': '', 'defer': True, 'src': 'defer.js', ...}, {'async': False, 'content': '', 'defer': False, 'src': 'module.js', ...}, {'async': False, 'content': '{\"@type\": \"test\"}', 'defer': False, 'src': '', ...}])\n", "test_name": "test_extract_scripts_with_attributes", "rerun": "0"}, "37": {"status": "FAIL", "message": "   AssertionError: assert 2 == 4\n    +  where 2 = len([{'sources': [{'src': 'video.mp4', 'type': 'video/mp4'}, {'src': 'video.webm', 'type': 'video/webm'}], 'src': '', 'type': 'video'}, {'sources': [{'src': 'audio.mp3', 'type': 'audio/mpeg'}, {'src': 'audio.ogg', 'type': 'audio/ogg'}], 'src': '', 'type': 'audio'}])\n", "test_name": "test_extract_media_with_sources", "rerun": "0"}, "38": {"status": "FAIL", "message": "   assert 'og:title' in \"{'title': 'Complex Test', 'meta_tags': {'description': 'Test description', 'keywords': 'test, complex, metadata', 'author': 'Test Author', 'generator': '', 'canonical': '', 'robots': 'index, follow', 'viewport': '', 'language': ''}, 'open_graph': {'title': 'OG Title', 'description': 'OG Description', 'image': 'og-image.jpg'}, 'twitter': {'card': 'summary_large_image', 'title': 'Twitter Title'}, 'schema': {}, 'errors': [], 'description': 'Test description'}\"\n    +  where \"{'title': 'Complex Test', 'meta_tags': {'description': 'Test description', 'keywords': 'test, complex, metadata', 'author': 'Test Author', 'generator': '', 'canonical': '', 'robots': 'index, follow', 'viewport': '', 'language': ''}, 'open_graph': {'title': 'OG Title', 'description': 'OG Description', 'image': 'og-image.jpg'}, 'twitter': {'card': 'summary_large_image', 'title': 'Twitter Title'}, 'schema': {}, 'errors': [], 'description': 'Test description'}\" = str({'description': 'Test description', 'errors': [], 'meta_tags': {'author': 'Test Author', 'canonical': '', 'description': 'Test description', 'generator': '', ...}, 'open_graph': {'description': 'OG Description', 'image': 'og-image.jpg', 'title': 'OG Title'}, ...})\n    +    where {'description': 'Test description', 'errors': [], 'meta_tags': {'author': 'Test Author', 'canonical': '', 'description': 'Test description', 'generator': '', ...}, 'open_graph': {'description': 'OG Description', 'image': 'og-image.jpg', 'title': 'OG Title'}, ...} = ProcessedContent(url=None, title='Complex Test', content={'raw': '\\n    <html>\\n        <head>\\n            <title>Complex Test</title>\\n            <meta name=\"description\" content=\"Test description\">\\n            <meta property=\"og:title\" content=\"OG Title\">\\n            <meta property=\"og:description\" content=\"OG Description\">\\n            <meta property=\"og:image\" content=\"og-image.jpg\">\\n            <meta name=\"twitter:card\" content=\"summary_large_image\">\\n            <meta name=\"twitter:title\" content=\"Twitter Title\">\\n            <meta name=\"keywords\" content=\"test, complex, metadata\">\\n            <meta name=\"author\" content=\"Test Author\">\\n            <meta name=\"robots\" content=\"index, follow\">\\n        </head>\\n        <body>\\n            <h1>Test Content</h1>\\n            <p>Test paragraph.</p>\\n        </body>\\n    </html>\\n    ', 'formatted_content': '# Test Content\\n\\nTest paragraph.'}, metadata={'title': 'Complex Test', 'meta_tags': {'description': 'Test description', 'keywords': 'test, complex, metadata', 'author': 'Test Author', 'generator': '', 'canonical': '', 'robots': 'index, follow', 'viewport': '', 'language': ''}, 'open_graph': {'title': 'OG Title', 'description': 'OG Description', 'image': 'og-image.jpg'}, 'twitter': {'card': 'summary_large_image', 'title': 'Twitter Title'}, 'schema': {}, 'errors': [], 'description': 'Test description'}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).metadata\n", "test_name": "test_process_with_complex_metadata", "rerun": "0"}, "39": {"status": "FAIL", "message": "   assert 'script' not in \"\\nalert('xs...a>\\n\\n\\n\\n\\n\"\n     \n     'script' is contained here:\n       \n       alert('xss');\n       <img src=\"x\"/>\n       <a href=\"javascript:alert('xss')\">click me</a>\n     ?              ++++++...\n     \n     ...Full output truncated (4 lines hidden), use '-vv' to show\n", "test_name": "test_safe_content_with_malicious_content", "rerun": "0"}, "40": {"status": "FAIL", "message": "   AssertionError: assert 0 > 0\n    +  where 0 = len('')\n", "test_name": "test_extract_metadata_with_missing_values", "rerun": "0"}, "41": {"status": "PASS", "message": "", "test_name": "test_collect_assets_with_base_tag", "rerun": "0"}, "42": {"status": "FAIL", "message": "   assert 'Malformed HTML' in ''\n    +  where '' = ProcessedContent(url=None, title='', content={'raw': '\\n    <html>\\n        <head>\\n            <title>Malformed HTML\\n        <body>\\n            <p>Unclosed paragraph\\n            <div>Unclosed div\\n            <span>Mixed closing tags</div>\\n            <a href=\"test.html\">Unclosed link\\n    ', 'formatted_content': 'Unclosed paragraph\\n\\nUnclosed div\\n\\nMixed closing tags\\n\\n[Unclosed link](test.html)'}, metadata={'title': '', 'meta_tags': {'description': '', 'keywords': '', 'author': '', 'generator': '', 'canonical': '', 'robots': '', 'viewport': '', 'language': ''}, 'open_graph': {}, 'twitter': {}, 'schema': {}, 'errors': []}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).title\n", "test_name": "test_process_with_invalid_html", "rerun": "0"}, "43": {"status": "PASS", "message": "", "test_name": "test_process_with_unicode_content", "rerun": "0"}, "44": {"status": "PASS", "message": "", "test_name": "test_process_with_mixed_content_types", "rerun": "0"}, "45": {"status": "PASS", "message": "", "test_name": "test_process_with_microdata", "rerun": "0"}, "46": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_process_with_frames.<locals>.<genexpr> at 0x1076981e0>)\n", "test_name": "test_process_with_frames", "rerun": "0"}, "47": {"status": "PASS", "message": "", "test_name": "test_process_with_custom_elements", "rerun": "0"}, "48": {"status": "FAIL", "message": "   AssertionError: assert 'IE specific content' not in '[if IE]>\\n ...ular content'\n     \n     'IE specific content' is contained here:\n       [if IE]>\n                   <p>IE specific content</p>\n                   <![endif]\n       \n       [if !IE]><!...\n     \n     ...Full output truncated (8 lines hidden), use '-vv' to show\n", "test_name": "test_process_with_conditional_comments", "rerun": "0"}, "49": {"status": "PASS", "message": "", "test_name": "test_process_with_data_attributes", "rerun": "0"}, "50": {"status": "FAIL", "message": "   assert 'https://example.com/new' in \"{'title': 'Meta Redirect', 'meta_tags': {'description': '', 'keywords': '', 'author': '', 'generator': '', 'canonical': '', 'robots': '', 'viewport': '', 'language': ''}, 'open_graph': {}, 'twitter': {}, 'schema': {}, 'errors': []}\"\n    +  where \"{'title': 'Meta Redirect', 'meta_tags': {'description': '', 'keywords': '', 'author': '', 'generator': '', 'canonical': '', 'robots': '', 'viewport': '', 'language': ''}, 'open_graph': {}, 'twitter': {}, 'schema': {}, 'errors': []}\" = str({'errors': [], 'meta_tags': {'author': '', 'canonical': '', 'description': '', 'generator': '', ...}, 'open_graph': {}, 'schema': {}, ...})\n    +    where {'errors': [], 'meta_tags': {'author': '', 'canonical': '', 'description': '', 'generator': '', ...}, 'open_graph': {}, 'schema': {}, ...} = ProcessedContent(url=None, title='Meta Redirect', content={'raw': '\\n    <html>\\n        <head>\\n            <title>Meta Redirect</title>\\n            <meta http-equiv=\"refresh\" content=\"0; URL=\\'https://example.com/new\\'\">\\n            <meta http-equiv=\"refresh\" content=\"5; URL=\\'https://example.com/delayed\\'\">\\n        </head>\\n        <body>\\n            <p>Redirecting...</p>\\n        </body>\\n    </html>\\n    ', 'formatted_content': 'Redirecting...'}, metadata={'title': 'Meta Redirect', 'meta_tags': {'description': '', 'keywords': '', 'author': '', 'generator': '', 'canonical': '', 'robots': '', 'viewport': '', 'language': ''}, 'open_graph': {}, 'twitter': {}, 'schema': {}, 'errors': []}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).metadata\n", "test_name": "test_process_with_meta_redirects", "rerun": "0"}, "51": {"status": "FAIL", "message": "   KeyError: 'links'\n", "test_name": "test_process_with_base_urls", "rerun": "0"}, "52": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_complex_content", "rerun": "0"}, "53": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_sphinx_content", "rerun": "0"}, "54": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_empty_elements", "rerun": "0"}, "55": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_headings_with_ids.<locals>.<genexpr> at 0x13a26cad0>)\n", "test_name": "test_extract_headings_with_ids", "rerun": "0"}, "56": {"status": "FAIL", "message": "   assert not True\n    +  where True = any(<generator object test_extract_links_with_complex_navigation.<locals>.<genexpr> at 0x11ad11c40>)\n", "test_name": "test_extract_links_with_complex_navigation", "rerun": "0"}, "57": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_links_with_base_url.<locals>.<genexpr> at 0x11ad12180>)\n", "test_name": "test_extract_links_with_base_url", "rerun": "0"}, "58": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_code_blocks_with_languages.<locals>.<genexpr> at 0x11ad104a0>)\n", "test_name": "test_extract_code_blocks_with_languages", "rerun": "0"}, "59": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_code_blocks_with_nested_content.<locals>.<genexpr> at 0x13a0e65e0>)\n", "test_name": "test_extract_code_blocks_with_nested_content", "rerun": "0"}, "60": {"status": "FAIL", "message": "   AssertionError: assert 'Level 4' not in '# Title\\n\\n...st; end\\n```'\n     \n     'Level 4' is contained here:\n       # Title\n       \n       #### Level 4\n       \n       Paragraph...\n     \n     ...Full output truncated (12 lines hidden), use '-vv' to show\n", "test_name": "test_process_with_custom_config", "rerun": "0"}, "61": {"status": "FAIL", "message": "   AssertionError: assert '   1. Sub first' in '- Top level\\n\\n  - Nested item 1\\n  - Nested item 2\\n\\n    - Deep nested item\\n\\n1. First\\n\\n  1. Sub first\\n  2. Sub second\\n2. Second\\n\\n- Mixed content:\\n\\n  1. Numbered in unordered'\n", "test_name": "test_format_as_markdown_with_lists", "rerun": "0"}, "62": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_tables", "rerun": "0"}, "63": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_definition_lists", "rerun": "0"}, "64": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_code_and_pre", "rerun": "0"}, "65": {"status": "FAIL", "message": "   AssertionError: assert 'Copyright 2024' in 'Copyright \u00a9 2024\\n\\nA & B\\n\\n<tag>\\n\\nPrice: \u00a3100\\n\\nTemperature: 20\u00b0C'\n", "test_name": "test_format_as_markdown_with_html_entities", "rerun": "0"}, "66": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_special_blocks", "rerun": "0"}, "67": {"status": "FAIL", "message": "   AssertionError: assert 'alpha + beta = gamma' in 'Inline math:\\n\\nE = mc^2\\n\\n\\\\[ f(x) = \\\\int_{-\\\\infty}^{\\\\infty} \\\\hat f(\\\\xi)\\\\,e^{2 \\\\pi i \\\\xi x} \\\\,d\\\\xi \\\\]\\n\\nMore inline math:\\n\\n\\\\alpha + \\\\beta = \\\\gamma'\n", "test_name": "test_format_as_markdown_with_math", "rerun": "0"}, "68": {"status": "FAIL", "message": "   AssertionError: assert ('Text with a footnote[^1]' in 'Text with a footnote\\n\\n[1](#fn1)\\n\\n.\\n\\nAnother footnote\\n\\n[2](#fn2)\\n\\n.\\n\\n1. First footnote content\\n\\n2. Second footnote content' or 'Text with a footnote^1^' in 'Text with a footnote\\n\\n[1](#fn1)\\n\\n.\\n\\nAnother footnote\\n\\n[2](#fn2)\\n\\n.\\n\\n1. First footnote content\\n\\n2. Second footnote content')\n", "test_name": "test_format_as_markdown_with_footnotes", "rerun": "0"}, "69": {"status": "FAIL", "message": "   AssertionError: assert 'World Health Organization' in 'WHO\\n\\nASAP\\n\\nHTML'\n", "test_name": "test_format_as_markdown_with_abbreviations", "rerun": "0"}, "70": {"status": "FAIL", "message": "   AssertionError: assert (not '- \\n\\n|  |\\n| --- |\\n\\n\\n\\n```\\n\\n```\\n\\n``' or 2 <= 1)\n    +  where '- \\n\\n|  |\\n| --- |\\n\\n\\n\\n```\\n\\n```\\n\\n``' = <built-in method strip of str object at 0x13a1b6b50>()\n    +    where <built-in method strip of str object at 0x13a1b6b50> = '- \\n\\n|  |\\n| --- |\\n\\n\\n\\n```\\n\\n```\\n\\n``'.strip\n    +  and   2 = len(['- \\n\\n|  |\\n| --- |', '\\n```\\n\\n```\\n\\n``'])\n    +    where ['- \\n\\n|  |\\n| --- |', '\\n```\\n\\n```\\n\\n``'] = <built-in method split of str object at 0x13a1b6b50>('\\n\\n\\n')\n    +      where <built-in method split of str object at 0x13a1b6b50> = '- \\n\\n|  |\\n| --- |\\n\\n\\n\\n```\\n\\n```\\n\\n``'.split\n    +        where '- \\n\\n|  |\\n| --- |\\n\\n\\n\\n```\\n\\n```\\n\\n``' = <built-in method strip of str object at 0x13a1b6b50>()\n    +          where <built-in method strip of str object at 0x13a1b6b50> = '- \\n\\n|  |\\n| --- |\\n\\n\\n\\n```\\n\\n```\\n\\n``'.strip\n", "test_name": "test_format_as_markdown_with_empty_elements", "rerun": "0"}, "71": {"status": "FAIL", "message": "   AssertionError: assert 'Invalid p in ul' in 'Start\\n\\nInvalid div inside p\\n\\nEnd\\n\\n- Valid item\\n\\n| Valid cell |\\n| --- |\\n\\n'\n", "test_name": "test_format_as_markdown_with_invalid_nesting", "rerun": "0"}, "72": {"status": "FAIL", "message": "           IndexError: list index out of range\n", "test_name": "test_format_as_markdown_with_malformed_attributes", "rerun": "0"}, "73": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_mixed_encodings", "rerun": "0"}, "74": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_deeply_nested_structure", "rerun": "0"}, "75": {"status": "FAIL", "message": "   AssertionError: assert '    Preserved' in '```\\nPreserved\\n    Spaces    Here\\n        And    Here\\n```\\n\\n`Also    Here`\\n\\nNormal     Text\\n\\nPreserved\\n                Indentation'\n", "test_name": "test_format_as_markdown_with_whitespace_preservation", "rerun": "0"}, "76": {"status": "FAIL", "message": "   AssertionError: assert 'Comment' not in 'Comment bef...omment after'\n     \n     'Comment' is contained here:\n       Comment before\n       \n       Visible content\n       \n       Comment...\n     \n     ...Full output truncated (6 lines hidden), use '-vv' to show\n", "test_name": "test_format_as_markdown_with_comments", "rerun": "0"}, "77": {"status": "FAIL", "message": "   assert 'alert' not in \"alert('test...ible content\"\n     \n     'alert' is contained here:\n       alert('test');\n     ? +++++\n       \n       body { color: red; }\n       \n       Visible content\n", "test_name": "test_format_as_markdown_with_script_and_style", "rerun": "0"}, "78": {"status": "FAIL", "message": "   assert 'alert' not in \"alert('xss'...alert('xss')\"\n     \n     'alert' is contained here:\n       alert('xss');\n     ? +++++\n       \n       ![](x)\n       ...\n     \n     ...Full output truncated (5 lines hidden), use '-vv' to show\n", "test_name": "test_format_as_markdown_with_xss_attempts", "rerun": "0"}, "79": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_large_content", "rerun": "0"}, "80": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_recursive_structures", "rerun": "0"}, "81": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_malformed_urls", "rerun": "0"}, "82": {"status": "FAIL", "message": "   AssertionError: assert '\\x00' not in 'Text with\\x...nNormal text'\n     \n     '\\x00' is contained here:\n       Text with\u0000null\n     ?          +\n       \n       Text with\u0007bell\n       ...\n     \n     ...Full output truncated (6 lines hidden), use '-vv' to show\n", "test_name": "test_format_as_markdown_with_control_characters", "rerun": "0"}, "83": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_nested_links", "rerun": "0"}, "84": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_custom_tags", "rerun": "0"}, "85": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_with_base_url", "rerun": "0"}, "86": {"status": "FAIL", "message": "   AssertionError: assert 'key1' in []\n    +  where [] = <built-in method get of dict object at 0x13a0c2980>('keywords', [])\n    +    where <built-in method get of dict object at 0x13a0c2980> = {'description': 'Page description', 'errors': [], 'meta_tags': {'author': 'Author Name', 'canonical': '', 'custom-tag': 'Custom value', 'description': 'Page description', ...}, 'open_graph': {'description': 'OG description', 'image': 'https://example.com/image.jpg', 'title': 'OG Title', 'url': 'https://example.com/page'}, ...}.get\n", "test_name": "test_extract_metadata_with_all_types", "rerun": "0"}, "87": {"status": "FAIL", "message": "   AssertionError: assert 'Second description' == 'First description'\n     \n     - First description\n     + Second description\n", "test_name": "test_extract_metadata_with_duplicates", "rerun": "0"}, "88": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_empty_values", "rerun": "0"}, "89": {"status": "FAIL", "message": "   AssertionError: assert '\u00f1' in ''\n    +  where '' = <built-in method get of dict object at 0x13a364f80>('og:title', '')\n    +    where <built-in method get of dict object at 0x13a364f80> = {'description': 'Description with  and ', 'errors': [], 'meta_tags': {'author': '', 'canonical': '', 'description': 'Description with  and ', 'generator': '', ...}, 'open_graph': {'title': 'Title with \u00f1, \u00e9, \u00fc'}, ...}.get\n", "test_name": "test_extract_metadata_with_special_characters", "rerun": "0"}, "90": {"status": "FAIL", "message": "   AssertionError: assert None == 'Product Name'\n    +  where None = <built-in method get of dict object at 0x13a3b0040>('schema:name')\n    +    where <built-in method get of dict object at 0x13a3b0040> = {'errors': [], 'meta_tags': {'author': '', 'canonical': '', 'description': '', 'generator': '', ...}, 'open_graph': {}, 'schema': {'description': 'Product description', 'name': 'Product Name'}, ...}.get\n", "test_name": "test_extract_metadata_with_schema_org", "rerun": "0"}, "91": {"status": "FAIL", "message": "   AssertionError: assert 'Outside head' == 'Inside head'\n     \n     - Inside head\n     ? ^^\n     + Outside head\n     ? ^^^\n", "test_name": "test_extract_metadata_with_invalid_html", "rerun": "0"}, "92": {"status": "FAIL", "message": "   KeyError: 'headings'\n", "test_name": "test_processor_with_custom_config", "rerun": "0"}, "93": {"status": "FAIL", "message": "   AssertionError: assert 'exceeds limit' in 'Content exceeds maximum size limit of 100 bytes'\n", "test_name": "test_processor_with_size_limits", "rerun": "0"}, "94": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute 'add_metadata_extractor'\n", "test_name": "test_processor_with_custom_extractors", "rerun": "0"}, "95": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute 'add_url_filter'\n", "test_name": "test_processor_with_custom_filters", "rerun": "0"}, "96": {"status": "FAIL", "message": "   KeyError: 'opengraph'\n", "test_name": "test_metadata_extraction", "rerun": "0"}, "97": {"status": "FAIL", "message": "   KeyError: 'stylesheets'\n", "test_name": "test_asset_collection", "rerun": "0"}, "98": {"status": "FAIL", "message": "   AssertionError: assert '   1. Sub first' in '- First level 1\\n\\n  - Second level 1\\n  - Second level 2\\n\\n    - Third level 1\\n- First level 2\\n\\n1. Numbered item 1\\n\\n  1. Sub first\\n  2. Sub second\\n2. Numbered item 2\\n\\n- Mixed content:\\n\\n  1. Numbered in unordered'\n", "test_name": "test_nested_list_formatting", "rerun": "0"}, "99": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_convert_table_to_markdown'\n", "test_name": "test_convert_table_to_markdown_with_custom_attributes", "rerun": "0"}, "100": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_convert_table_to_markdown'\n", "test_name": "test_convert_table_to_markdown_basic", "rerun": "0"}}, "suite_name": "tests/test_content_processor.py"}}}, "date": "December 02, 2024", "start_time": 1733147266.3434591, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "39", "fail": "62", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "101"}