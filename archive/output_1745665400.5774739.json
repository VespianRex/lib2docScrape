{"content": {"suites": {"0": {"status": {"total_pass": 41, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 13, "total_error": 0}, "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'http://example.com' == 'http://example.com/'\n     \n     - http://example.com/\n     ?                   -\n     + http://example.com\n", "test_name": "test_valid_url_initialization[http://example.com-http://example.com/]", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://www.example.co.uk/path?a=1-https://www.example.co.uk/path?a=1]", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert False is True\n    +  where False = URLInfo(raw='http://EXAMPLE.com:80/./path/../other/', normalized='http://EXAMPLE.com:80/./path/../other/', status='invalid (Directory traversal pattern detected in original path)').is_valid\n", "test_name": "test_valid_url_initialization[http://EXAMPLE.com:80/./path/../other/-http://example.com/other/]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://xn--mnchen-3ya.de/path-https://xn--mnchen-3ya.de/path]", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: assert 'http://localhost:8080' == 'http://localhost:8080/'\n     \n     - http://localhost:8080/\n     ?                      -\n     + http://localhost:8080\n", "test_name": "test_valid_url_initialization[http://localhost:8080-http://localhost:8080/]", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: assert False is True\n    +  where False = URLInfo(raw='http://[::1]/test', normalized='http://[::1]/test', status='invalid (Private IP not allowed: ::1)').is_valid\n", "test_name": "test_valid_url_initialization[http://[::1]/test-http://[::1]/test]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[file:///path/to/file.txt-file:///path/to/file.txt]", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://example.com/path/-https://example.com/path/]", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://example.com/path-https://example.com/path]", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[javascript:alert(1)-Disallowed scheme]", "rerun": "0"}, "10": {"status": "FAIL", "message": "   AssertionError: assert True is False\n    +  where True = URLInfo(raw='ftp://user:pass@example.com', normalized='ftp://example.com', status='valid').is_valid\n", "test_name": "test_invalid_url_initialization[ftp://user:pass@example.com-Auth info not allowed]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://<invalid>.com-Invalid label chars]", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Invalid port' but got 'ValueError: Port out of range 0-65535' for URL 'http://example.com:99999'\n   assert 'Invalid port' in 'ValueError: Port out of range 0-65535'\n    +  where 'ValueError: Port out of range 0-65535' = URLInfo(raw='http://example.com:99999', normalized='http://example.com:99999', status='invalid (ValueError: Port out of range 0-65535)').error_message\n", "test_name": "test_invalid_url_initialization[http://example.com:99999-Invalid port]", "rerun": "0"}, "13": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Path traversal attempt detected after normalization' but got 'Directory traversal pattern detected in original path' for URL 'http://example.com/../../etc/passwd'\n   assert 'Path traversal attempt detected after normalization' in 'Directory traversal pattern detected in original path'\n    +  where 'Directory traversal pattern detected in original path' = URLInfo(raw='http://example.com/../../etc/passwd', normalized='http://example.com/../../etc/passwd', status='invalid (Directory traversal pattern detected in original path)').error_message\n", "test_name": "test_invalid_url_initialization[http://example.com/../../etc/passwd-Path traversal attempt detected after normalization]", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'XSS pattern' but got 'Invalid chars in decoded query' for URL 'http://example.com/?q=<script>'\n   assert 'XSS pattern' in 'Invalid chars in decoded query'\n    +  where 'Invalid chars in decoded query' = URLInfo(raw='http://example.com/?q=<script>', normalized='http://example.com/?q=<script>', status='invalid (Invalid chars in decoded query)').error_message\n", "test_name": "test_invalid_url_initialization[http://example.com/?q=<script>-XSS pattern]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://192.168.1.1-Private IP not allowed]", "rerun": "0"}, "16": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Loopback IP not allowed' but got 'Private IP not allowed: 127.0.0.1' for URL 'http://127.0.0.1'\n   assert 'Loopback IP not allowed' in 'Private IP not allowed: 127.0.0.1'\n    +  where 'Private IP not allowed: 127.0.0.1' = URLInfo(raw='http://127.0.0.1', normalized='http://127.0.0.1', status='invalid (Private IP not allowed: 127.0.0.1)').error_message\n", "test_name": "test_invalid_url_initialization[http://127.0.0.1-Loopback IP not allowed]", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[-URL cannot be None or empty]", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[None-URL cannot be None or empty]", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AssertionError: Expected error containing 'Null byte in path' but got 'Invalid chars in decoded path' for URL 'http://example.com/path%00.txt'\n   assert 'Null byte in path' in 'Invalid chars in decoded path'\n    +  where 'Invalid chars in decoded path' = URLInfo(raw='http://example.com/path%00.txt', normalized='http://example.com/path%00.txt', status='invalid (Invalid chars in decoded path)').error_message\n", "test_name": "test_invalid_url_initialization[http://example.com/path%00.txt-Null byte in path]", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://example..com-Invalid domain label length or empty label]", "rerun": "0"}, "21": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://-example.com-Invalid label chars]", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://example-.com-Invalid label chars]", "rerun": "0"}, "23": {"status": "FAIL", "message": "   AssertionError: assert True is False\n    +  where True = URLInfo(raw='http://example.c', normalized='http://example.c', status='valid').is_valid\n", "test_name": "test_invalid_url_initialization[http://example.c-Invalid domain (requires TLD)]", "rerun": "0"}, "24": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[page2.html-http://example.com/docs/page1.html-http://example.com/docs/page2.html]", "rerun": "0"}, "25": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[../index.html-http://example.com/docs/page1.html-http://example.com/index.html]", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[/images/logo.png-http://example.com/docs/page1.html-http://example.com/images/logo.png]", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[//other.com/path-https://example.com/docs/-https://other.com/path]", "rerun": "0"}, "28": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[?query=new-http://example.com/page?a=1-http://example.com/page?query=new]", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[#fragment-http://example.com/page-http://example.com/page]", "rerun": "0"}, "30": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[path/./../sub/./file-http://example.com/base/-http://example.com/base/sub/file]", "rerun": "0"}, "31": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[path/-http://example.com/base-http://example.com/path/]", "rerun": "0"}, "32": {"status": "FAIL", "message": "   AssertionError: assert 'Auth info not allowed' in 'Cmd Injection pattern'\n    +  where 'Cmd Injection pattern' = URLInfo(raw='https://user:pass@www.example.co.uk:8443/path/to/page?a=1&b=two#section', normalized='https://www.example.co.uk:8443/path/to/page?a=1&b=two', status='invalid (Cmd Injection pattern)').error_message\n", "test_name": "test_url_properties", "rerun": "0"}, "33": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[https://www.example.co.uk/path-www-example-co.uk-example.co.uk]", "rerun": "0"}, "34": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://blog.example.com-blog-example-com-example.com]", "rerun": "0"}, "35": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[https://justadomain.com-None-justadomain-com-justadomain.com]", "rerun": "0"}, "36": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://xn--mnchen-3ya.de-None-xn--mnchen-3ya-de-xn--mnchen-3ya.de]", "rerun": "0"}, "37": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://localhost:8080-None-localhost-None-localhost]", "rerun": "0"}, "38": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://[::1]-None-::1-None-::1]", "rerun": "0"}, "39": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://10.0.0.1-None-10.0.0.1-None-10.0.0.1]", "rerun": "0"}, "40": {"status": "PASS", "message": "", "test_name": "test_tldextract_fallback", "rerun": "0"}, "41": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "42": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[/relative/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "43": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://www.example.com/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "44": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[http://example.com/path-https://example.com/base-URLType.EXTERNAL]", "rerun": "0"}, "45": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://other.com/path-https://example.com/base-URLType.EXTERNAL]", "rerun": "0"}, "46": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[page.html-https://example.com/base/-URLType.INTERNAL]", "rerun": "0"}, "47": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com:443/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "48": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com:8443/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "49": {"status": "PASS", "message": "", "test_name": "test_url_equality_and_hash", "rerun": "0"}, "50": {"status": "FAIL", "message": "       AttributeError: Cannot set attribute 'normalized_url' on immutable URLInfo object\n   AssertionError: Regex pattern did not match.\n    Regex: \"can't set attribute\"\n    Input: \"Cannot set attribute 'normalized_url' on immutable URLInfo object\"\n", "test_name": "test_immutability", "rerun": "0"}, "51": {"status": "PASS", "message": "", "test_name": "test_fragment_removal", "rerun": "0"}, "52": {"status": "PASS", "message": "", "test_name": "test_long_url_edge_case", "rerun": "0"}, "53": {"status": "PASS", "message": "", "test_name": "test_url_info_performance", "rerun": "0"}}, "suite_name": "tests/url/test_info.py"}}}, "date": "April 26, 2025", "start_time": 1745651342.1552618, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "41", "fail": "13", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "54"}