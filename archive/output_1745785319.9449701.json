{"content": {"suites": {"0": {"status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_backend_lifecycle", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawler_backend_error_handling", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_backend_selector_registration", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_backend_selector_selection", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_backend_selector_advanced_selection", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_mock_crawler_backend_edge_cases", "rerun": "0"}}, "suite_name": "tests/test_base.py"}, "1": {"suite_name": "tests/test_content_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_extract_text_basic", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_process_basic", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_nested_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_special_characters", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_complex_content", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_mixed_content_types", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_scripts", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_script_tags_non_json_ld", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_script_tags_with_invalid_json", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_script_tags_with_different_types", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_scripts_with_data_attributes", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[javascript-console.log(\"Hello, World!\");-```javascript\\nconsole.log(\"Hello, World!\");\\n```]", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[python-print(\"Hello, World!\")-```python\\nprint(\"Hello, World!\")\\n```]", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[ruby-puts \"Hello, Ruby!\"-```ruby\\nputs \"Hello, Ruby!\"\\n```]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[None-Inline code-`Inline code`]", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks_with_attributes", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks_with_nested_content", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_code_blocks_with_disallowed_languages", "rerun": "0"}, "19": {"status": "PASS", "message": "", "test_name": "test_extract_content_structure", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_extract_headings_hierarchy", "rerun": "0"}, "21": {"status": "PASS", "message": "", "test_name": "test_extract_metadata", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_complex_metadata", "rerun": "0"}, "23": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_duplicates", "rerun": "0"}, "24": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_invalid_html", "rerun": "0"}, "25": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_missing_values", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_schema_org_json_ld", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_all_types", "rerun": "0"}, "28": {"status": "PASS", "message": "", "test_name": "test_collect_assets", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_images_with_data_urls", "rerun": "0"}, "30": {"status": "PASS", "message": "", "test_name": "test_extract_assets_with_invalid_urls", "rerun": "0"}, "31": {"status": "PASS", "message": "", "test_name": "test_extract_links_with_invalid_urls", "rerun": "0"}, "32": {"status": "PASS", "message": "", "test_name": "test_extract_links_with_relative_paths", "rerun": "0"}, "33": {"status": "PASS", "message": "", "test_name": "test_links_with_query_parameters", "rerun": "0"}, "34": {"status": "PASS", "message": "", "test_name": "test_links_with_anchors", "rerun": "0"}, "35": {"status": "PASS", "message": "", "test_name": "test_anchor_tags_without_href", "rerun": "0"}, "36": {"status": "PASS", "message": "", "test_name": "test_links_with_various_protocols", "rerun": "0"}, "37": {"status": "PASS", "message": "", "test_name": "test_multiple_links_in_paragraph", "rerun": "0"}, "38": {"status": "PASS", "message": "", "test_name": "test_links_with_no_text", "rerun": "0"}}, "status": {"total_pass": 39, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "2": {"suite_name": "tests/test_content_processor_advanced.py", "tests": {"0": {"status": "FAIL", "message": "       AssertionError: URL 'http://example.com:abc' normalized incorrectly. Expected: 'None', Got: 'http://example.com:abc'\n       assert 'http://example.com:abc' == None\n        +  where 'http://example.com:abc' = URLInfo(raw='http://example.com:abc', normalized='http://example.com:abc', status='invalid (ValueError: Port could not be cast to integer value as 'abc')').normalized_url\n", "test_name": "test_url_processor_port_handling", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "3": {"suite_name": "tests/test_content_processor_edge.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_empty_content", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_malformed_html", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_special_characters", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_large_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_nested_structures", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_javascript_handling", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_style_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_iframe_handling", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_form_handling", "rerun": "0"}}, "status": {"total_pass": 9, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "4": {"suite_name": "tests/test_crawl4ai.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'https://example.com' == 'https://example.com/'\n     \n     - https://example.com/\n     ?                    -\n     + https://example.com\n", "test_name": "test_crawl_basic", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawl_with_rate_limit", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_validate_content", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_process_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_backend_selection", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_metrics", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_error_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_concurrent_requests", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_cleanup", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_crawl4ai_config_validation", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_ssl_context_configuration", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_custom_headers_handling", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_domain_filtering", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_url_queue_management", "rerun": "0"}}, "status": {"total_pass": 13, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "5": {"suite_name": "tests/test_crawl4ai_extended.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_raise_for_status", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawl_with_urlinfo", "rerun": "0"}, "2": {"status": "SKIP", "message": "('/home/alex/DEV/lib2docScrape/tests/test_crawl4ai_extended.py', 168, 'Skipped: Link following is handled by the main Crawler, not the backend directly.')\n", "test_name": "test_crawl_depth_first", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_rate_limiting_application", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_concurrent_request_limit", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_url_normalization", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_error_propagation", "rerun": "0"}, "7": {"status": "FAIL", "message": "   assert 1 == 3\n    +  where 1 = len([1])\n", "test_name": "test_retry_behavior", "rerun": "0"}, "8": {"status": "FAIL", "message": "   assert datetime.datetime(2025, 4, 27, 23, 8, 20, 812730) == 1.0\n", "test_name": "test_metrics_accuracy", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_resource_cleanup", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org/3/-expected0]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org-expected1]", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org:8080/3/?query=test#fragment-expected2]", "rerun": "0"}, "13": {"status": "FAIL", "message": "   AssertionError: assert False == True\n    +  where False = URLInfo(raw='https://user:password@docs.python.org/3/', normalized='https://user:password@docs.python.org/3/', status='invalid (Auth info not allowed)').is_valid\n", "test_name": "test_url_info_initialization[https://user:password@docs.python.org/3/-expected3]", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org/path with spaces/-expected4]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org/3/../4/-expected5]", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[invalid-url-expected6]", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_url_info_hashable", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_url_info_immutable", "rerun": "0"}}, "status": {"total_pass": 15, "total_skip": 1, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 3, "total_error": 0}}, "6": {"suite_name": "tests/test_crawler.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_initialization", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_url_filtering", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_single_url_processing", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_depth_limited_crawling", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_concurrent_processing", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_rate_limiting", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_error_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_cleanup", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_max_pages_limit", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_statistics_tracking", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_project_type_enum", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_project_identity", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_project_identifier", "rerun": "0"}, "14": {"status": "FAIL", "message": "   duckduckgo_search.exceptions.DuckDuckGoSearchException: https://lite.duckduckgo.com/lite/ 202 Ratelimit\n       src.utils.search.SearchError: Search error: https://lite.duckduckgo.com/lite/ 202 Ratelimit\n", "test_name": "test_duckduckgo_search", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_url_discovery", "rerun": "0"}}, "status": {"total_pass": 15, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "7": {"suite_name": "tests/test_crawler_advanced.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_basic_crawl", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawler_failed_crawl", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_crawler_retry_mechanism", "rerun": "0"}, "3": {"status": "SKIP", "message": "('/home/alex/DEV/lib2docScrape/tests/test_crawler_advanced.py', 160, 'Skipped: Rate limiter timing is difficult to test reliably with mocks')\n", "test_name": "test_crawler_rate_limiting", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_crawler_content_processing", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_crawler_quality_checking", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_crawler_resource_cleanup", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_crawler_concurrent_requests", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_crawler_url_normalization", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_crawler_error_handling[error0-Network error]", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_crawler_error_handling[error1-Invalid response]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_crawler_error_handling[error2-Timeout]", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_crawler_error_handling[error3-Connection failed]", "rerun": "0"}}, "status": {"total_pass": 12, "total_skip": 1, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "8": {"suite_name": "tests/test_gui.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_home_page", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawl_request", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_connection_manager", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "9": {"suite_name": "tests/test_helpers.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_rate_limiter", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_retry_strategy", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_timer", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_similarity_calculation", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_checksum_generation", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_logging_setup", "rerun": "0"}}, "status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "10": {"suite_name": "tests/test_integration.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_full_site_crawl", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_quality_checks", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_document_organization", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_search_functionality", "rerun": "0"}}, "status": {"total_pass": 5, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "11": {"suite_name": "tests/test_integration_advanced.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_full_crawl_pipeline", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_error_handling_integration", "rerun": "0"}, "2": {"status": "FAIL", "message": "       AssertionError: Expected concurrent elapsed time < 1.5s, but got 8.1565s\n       assert 8.156466792002902 < 1.5\n", "test_name": "test_rate_limiting_integration", "rerun": "0"}, "3": {"status": "FAIL", "message": "       KeyError: 'https://example.com/'\n", "test_name": "test_content_processing_integration", "rerun": "0"}}, "status": {"total_pass": 2, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 0}}, "12": {"suite_name": "tests/test_link_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_basic_link_extraction", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_empty_document", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_malformed_links", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_duplicate_links", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_fragment_handling", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_query_params", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_special_characters", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_nested_links", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_invalid_base_url", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_data_urls", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_unicode_urls", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_protocol_relative_urls", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_base_tag_handling", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_malformed_base_tags", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_link_attributes", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_link_schemes", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_url_normalization", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_url_case_sensitivity", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_url_encoding_handling", "rerun": "0"}}, "status": {"total_pass": 19, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "13": {"suite_name": "tests/test_organizer.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_document_organizer_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AttributeError: 'DocumentVersion' object has no attribute 'version_id'\n", "test_name": "test_document_version_management", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 'uncategorized' is None\n    +  where 'uncategorized' = <src.organizers.doc_organizer.Document object at 0x7f8c2536d850>.category\n", "test_name": "test_document_categorization", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AttributeError: 'Document' object has no attribute 'references'\n", "test_name": "test_reference_extraction", "rerun": "0"}, "4": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = len([])\n", "test_name": "test_search_functionality", "rerun": "0"}, "5": {"status": "FAIL", "message": "               AttributeError: 'CollectionInfo' object has no attribute 'documents'. Did you mean: 'document_ids'?\n", "test_name": "test_collection_management", "rerun": "0"}, "6": {"status": "FAIL", "message": "   ValueError: too many values to unpack (expected 2)\n", "test_name": "test_document_similarity", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AttributeError: 'DocumentOrganizer' object has no attribute 'get_document_versions'\n", "test_name": "test_version_tracking", "rerun": "0"}, "8": {"status": "FAIL", "message": "       NameError: name 'SearchIndex' is not defined\n", "test_name": "test_search_index_generation", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 8, "total_error": 0}}, "14": {"suite_name": "tests/test_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_content_processor_initialization", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_full_content_processing", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_content_size_limits", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_malformed_html_handling", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_special_content_handling", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_content_structure_preservation", "rerun": "0"}}, "status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "15": {"suite_name": "tests/test_quality.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_quality_checker_basic", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_quality_checker_content_length", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_quality_checker_headings", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_quality_checker_links", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_quality_checker_code_blocks", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_quality_checker_metadata", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_quality_checker_custom_config", "rerun": "0"}}, "status": {"total_pass": 7, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "16": {"suite_name": "tests/test_url_classification.py", "tests": {"0": {"status": "FAIL", "message": "   NameError: name 'determine_url_type' is not defined\n", "test_name": "test_determine_url_type[http://a.com/foo-http://a.com/bar-INTERNAL]", "rerun": "0"}, "1": {"status": "FAIL", "message": "   NameError: name 'determine_url_type' is not defined\n", "test_name": "test_determine_url_type[https://a.com-https://a.com/xyz-INTERNAL]", "rerun": "0"}, "2": {"status": "FAIL", "message": "   NameError: name 'determine_url_type' is not defined\n", "test_name": "test_determine_url_type[http://a.com-https://a.com-EXTERNAL]", "rerun": "0"}, "3": {"status": "FAIL", "message": "   NameError: name 'determine_url_type' is not defined\n", "test_name": "test_determine_url_type[http://sub.a.com-http://a.com-EXTERNAL]", "rerun": "0"}, "4": {"status": "FAIL", "message": "   NameError: name 'determine_url_type' is not defined\n", "test_name": "test_determine_url_type[http://a.com-http://b.com-EXTERNAL]", "rerun": "0"}, "5": {"status": "FAIL", "message": "   NameError: name 'determine_url_type' is not defined\n", "test_name": "test_determine_url_type[None-http://a.com-UNKNOWN]", "rerun": "0"}, "6": {"status": "FAIL", "message": "   NameError: name 'determine_url_type' is not defined\n", "test_name": "test_determine_url_type[http://a.com-None-UNKNOWN]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 7, "total_error": 0}}, "17": {"suite_name": "tests/test_url_classification_subdomain.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_subdomain_classification[https://docs.example.com/api/v1-https://docs.example.com/-URLType.INTERNAL-Same subdomain, internal link]", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_subdomain_classification[/faq-https://docs.example.com/-URLType.INTERNAL-Relative link, same subdomain]", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: Classification failed: Different subdomain, same parent domain - treated as external (https://blog.example.com relative to https://docs.example.com/)\n   assert <URLType.INTERNAL: 1> == <URLType.EXTERNAL: 2>\n    +  where <URLType.INTERNAL: 1> = URLInfo(raw='https://blog.example.com', normalized='https://blog.example.com', status='valid').url_type\n", "test_name": "test_subdomain_classification[https://blog.example.com-https://docs.example.com/-URLType.EXTERNAL-Different subdomain, same parent domain - treated as external]", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: Classification failed: Protocol-relative link to different subdomain (//blog.example.com/latest relative to https://docs.example.com/)\n   assert <URLType.INTERNAL: 1> == <URLType.EXTERNAL: 2>\n    +  where <URLType.INTERNAL: 1> = URLInfo(raw='//blog.example.com/latest', normalized='https://blog.example.com/latest', status='valid').url_type\n", "test_name": "test_subdomain_classification[//blog.example.com/latest-https://docs.example.com/-URLType.EXTERNAL-Protocol-relative link to different subdomain]", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: Classification failed: Link from subdomain to parent domain (https://example.com/about relative to https://docs.example.com/)\n   assert <URLType.INTERNAL: 1> == <URLType.EXTERNAL: 2>\n    +  where <URLType.INTERNAL: 1> = URLInfo(raw='https://example.com/about', normalized='https://example.com/about', status='valid').url_type\n", "test_name": "test_subdomain_classification[https://example.com/about-https://docs.example.com/-URLType.EXTERNAL-Link from subdomain to parent domain]", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_subdomain_classification[https://docs.example.com/intro-https://example.com/-URLType.INTERNAL-Link from parent to known subdomain - treated as internal]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_subdomain_classification[https://www.example.com-https://example.com/-URLType.INTERNAL-www vs non-www, same domain - often internal]", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_subdomain_classification[https://example.com-https://www.example.com/-URLType.INTERNAL-non-www vs www, same domain - often internal]", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AssertionError: Classification failed: Deeply nested different subdomain (https://api.internal.dev.example.com relative to https://docs.example.com/)\n   assert <URLType.INTERNAL: 1> == <URLType.EXTERNAL: 2>\n    +  where <URLType.INTERNAL: 1> = URLInfo(raw='https://api.internal.dev.example.com', normalized='https://api.internal.dev.example.com', status='valid').url_type\n", "test_name": "test_subdomain_classification[https://api.internal.dev.example.com-https://docs.example.com/-URLType.EXTERNAL-Deeply nested different subdomain]", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_subdomain_classification[https://api.internal.dev.example.com/status-https://api.internal.dev.example.com/-URLType.INTERNAL-Internal link within deeply nested subdomain]", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_subdomain_classification[../marketing/campaign-https://docs.example.com/team/-URLType.INTERNAL-Relative path resolving within the base domain]", "rerun": "0"}}, "status": {"total_pass": 7, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 4, "total_error": 0}}, "18": {"suite_name": "tests/test_url_handling_integration.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'https://example.com' == 'https://example.com/'\n     \n     - https://example.com/\n     ?                    -\n     + https://example.com\n", "test_name": "test_crawler_url_handling", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_url_type_classification", "rerun": "0"}, "2": {"status": "FAIL", "message": "       AssertionError: URL should be invalid: https://example.com/../../etc/passwd\n       assert not True\n        +  where True = URLInfo(raw='https://example.com/../../etc/passwd', normalized='https://example.com/etc/passwd', status='valid').is_valid\n", "test_name": "test_url_security_validation", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 0}}, "19": {"suite_name": "tests/test_url_info_enhanced.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert None == ''\n", "test_name": "test_domain_parsing", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert False\n    +  where False = URLInfo(raw='http://www.EXAMPLE.com/to/resource?a=1&b=2#fragment', normalized='http://www.EXAMPLE.com/to/resource?a=1&b=2', status='invalid (Cmd Injection pattern)').is_valid\n", "test_name": "test_backward_compatibility", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 0}}, "20": {"suite_name": "tests/test_url_normalization.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_valid[EXAMPLE.com.-example.com]", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_valid[m\\xfcller.de-xn--mller-kva.de]", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_valid[sub.Example.COM-sub.example.com]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_valid[2001:db8::1-2001:db8::1]", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_valid[localhost-localhost]", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_valid[example.com-example.com]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_valid[www.example.co.uk-www.example.co.uk]", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_valid[xn--mller-kva.de-xn--mller-kva.de]", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[]", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[foo<>bar.com]", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[example..com]", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[-startdash.com]", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[enddash-.com]", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[host_name.com]", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[host name.com]", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname_invalid[.startdot.com]", "rerun": "0"}, "18": {"status": "FAIL", "message": "   AssertionError: assert '' == '/'\n     \n     - /\n", "test_name": "test_normalize_path[-/]", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AssertionError: assert '' == '/'\n     \n     - /\n", "test_name": "test_normalize_path[/-/]", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_normalize_path[/foo/bar-/foo/bar]", "rerun": "0"}, "21": {"status": "FAIL", "message": "   AssertionError: assert 'foo/bar' == '/foo/bar'\n     \n     - /foo/bar\n     ? -\n     + foo/bar\n", "test_name": "test_normalize_path[foo/bar-/foo/bar]", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_normalize_path[/foo//bar-/foo/bar]", "rerun": "0"}, "23": {"status": "FAIL", "message": "   AssertionError: assert '' == '/'\n     \n     - /\n", "test_name": "test_normalize_path[.-/]", "rerun": "0"}, "24": {"status": "FAIL", "message": "   AssertionError: assert 'foo' == '/foo'\n     \n     - /foo\n     ? -\n     + foo\n", "test_name": "test_normalize_path[./foo-/foo]", "rerun": "0"}, "25": {"status": "PASS", "message": "", "test_name": "test_normalize_path[/foo/./bar-/foo/bar]", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_normalize_path[/foo/../bar-/bar]", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_normalize_path[/../foo-/foo]", "rerun": "0"}, "28": {"status": "FAIL", "message": "   AssertionError: assert '/foo/%20bar' == '/foo/ bar'\n     \n     - /foo/ bar\n     ?      ^\n     + /foo/%20bar\n     ?      ^^^\n", "test_name": "test_normalize_path[/foo/%20bar-/foo/ bar]", "rerun": "0"}, "29": {"status": "FAIL", "message": "   AssertionError: assert '/foo/bar' == '/foo/bar/'\n     \n     - /foo/bar/\n     ?         -\n     + /foo/bar\n", "test_name": "test_normalize_path[/foo/bar/-/foo/bar/]", "rerun": "0"}}, "status": {"total_pass": 23, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 7, "total_error": 0}}, "21": {"suite_name": "tests/test_url_normalization_idn.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: Failed check: Simple Chinese IDN (https://\u4f8b\u5b50.com)\n   assert 'https://\u4f8b\u5b50.com' == 'https://xn--fsqu00a.com/'\n     \n     - https://xn--fsqu00a.com/\n     + https://\u4f8b\u5b50.com\n", "test_name": "test_idn_normalization[https://\\u4f8b\\u5b50.com-https://xn--fsqu00a.com/-Simple Chinese IDN]", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: Failed check: German IDN with umlaut (https://b\u00fccher.de/)\n   assert 'https://b\u00fccher.de/' == 'https://xn--bcher-kva.de/'\n     \n     - https://xn--bcher-kva.de/\n     ?         ----     ----\n     + https://b\u00fccher.de/\n     ?          +\n", "test_name": "test_idn_normalization[https://b\\xfccher.de/-https://xn--bcher-kva.de/-German IDN with umlaut]", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: Failed check: Hindi IDN (http://\u0909\u0926\u093e\u0939\u0930\u0923.\u092a\u0930\u0940\u0915\u094d\u0937\u093e)\n   assert 'http://\u0909\u0926\u093e\u0939\u0930\u0923.\u092a\u0930\u0940\u0915\u094d\u0937\u093e' == 'http://xn--p...1b5bs3a9aj6g/'\n     \n     - http://xn--p1b6ci4b4b3a.xn--11b5bs3a9aj6g/\n     + http://\u0909\u0926\u093e\u0939\u0930\u0923.\u092a\u0930\u0940\u0915\u094d\u0937\u093e\n", "test_name": "test_idn_normalization[http://\\u0909\\u0926\\u093e\\u0939\\u0930\\u0923.\\u092a\\u0930\\u0940\\u0915\\u094d\\u0937\\u093e-http://xn--p1b6ci4b4b3a.xn--11b5bs3a9aj6g/-Hindi IDN]", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: Failed check: Chinese IDN with path and query (https://\u4f8b\u5b50.com/path?query=\u6d4b\u8bd5)\n   assert 'https://\u4f8b\u5b50.com/path?query=\u6d4b\u8bd5' == 'https://xn--...path?query=\u6d4b\u8bd5'\n     \n     - https://xn--fsqu00a.com/path?query=\u6d4b\u8bd5\n     ?         ^^^^^^^^^^^\n     + https://\u4f8b\u5b50.com/path?query=\u6d4b\u8bd5\n     ?         ^^\n", "test_name": "test_idn_normalization[https://\\u4f8b\\u5b50.com/path?query=\\u6d4b\\u8bd5-https://xn--fsqu00a.com/path?query=\\u6d4b\\u8bd5-Chinese IDN with path and query]", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: Failed check: IDN in TLD part (https://subdomain.\u4f8b\u5b50.com)\n   assert 'https://subdomain.\u4f8b\u5b50.com' == 'https://subd...-fsqu00a.com/'\n     \n     - https://subdomain.xn--fsqu00a.com/\n     ?                   ^^^^^^^^^^^    -\n     + https://subdomain.\u4f8b\u5b50.com\n     ?                   ^^\n", "test_name": "test_idn_normalization[https://subdomain.\\u4f8b\\u5b50.com-https://subdomain.xn--fsqu00a.com/-IDN in TLD part]", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: Failed check: IDN in subdomain part (https://\u4f8b\u5b50.subdomain.com)\n   assert 'https://\u4f8b\u5b50.subdomain.com' == 'https://xn--...ubdomain.com/'\n     \n     - https://xn--fsqu00a.subdomain.com/\n     ?         ^^^^^^^^^^^              -\n     + https://\u4f8b\u5b50.subdomain.com\n     ?         ^^\n", "test_name": "test_idn_normalization[https://\\u4f8b\\u5b50.subdomain.com-https://xn--fsqu00a.subdomain.com/-IDN in subdomain part]", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AssertionError: Failed check: Punycode input should not change (https://xn--fsqu00a.com)\n   assert 'https://xn--fsqu00a.com' == 'https://xn--fsqu00a.com/'\n     \n     - https://xn--fsqu00a.com/\n     ?                        -\n     + https://xn--fsqu00a.com\n", "test_name": "test_idn_normalization[https://xn--fsqu00a.com-https://xn--fsqu00a.com/-Punycode input should not change]", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AssertionError: Failed check: Uppercase IDN TLD (https://\u4f8b\u5b50.COM)\n   assert 'https://\u4f8b\u5b50.COM' == 'https://xn--fsqu00a.com/'\n     \n     - https://xn--fsqu00a.com/\n     + https://\u4f8b\u5b50.COM\n", "test_name": "test_idn_normalization[https://\\u4f8b\\u5b50.COM-https://xn--fsqu00a.com/-Uppercase IDN TLD]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 8, "total_error": 0}}, "22": {"suite_name": "tests/test_url_parsing.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_resolve_success[//example.com/foo-https://host.com/base/-https://example.com/foo]", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_resolve_success[foo/bar-http://host.com/base/-http://host.com/base/foo/bar]", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_resolve_success[www.foo.com-None-http://www.foo.com]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_resolve_success[/abs/path-http://host.com/dir/-http://host.com/abs/path]", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_blocked_schemes[ javascript:alert(1)]", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_blocked_schemes[data:text/html;base64...]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_blocked_schemes[vbscript:foo]", "rerun": "0"}}, "status": {"total_pass": 7, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "23": {"suite_name": "tests/test_url_parsing_windows.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_windows_path_handling[C:\\\\Users\\\\User\\\\Documents\\\\file.html-https://example.com/docs/-None-Absolute Windows path without scheme]", "rerun": "0"}, "1": {"status": "FAIL", "message": "       NameError: name 'URLType' is not defined\n", "test_name": "test_windows_path_handling[\\\\\\\\server\\\\share\\\\file.txt-https://example.com/docs/-None-UNC path without scheme]", "rerun": "0"}, "2": {"status": "FAIL", "message": "       AssertionError: Normalization failed: Backslashes in path segment (https://example.com/path\\to\\resource)\n       assert 'https://exam...to%5Cresource' == 'https://exam...h/to/resource'\n         \n         - https://example.com/path/to/resource\n         ?                         ^  ^\n         + https://example.com/path%5Cto%5Cresource\n         ?                         ^^^  ^^^\n", "test_name": "test_windows_path_handling[https://example.com/path\\\\to\\\\resource-https://example.com-https://example.com/path/to/resource-Backslashes in path segment]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_windows_path_handling[file:///C:/Users/User/Documents/file.html-None-file:///C:/Users/User/Documents/file.html-File scheme with absolute Windows path]", "rerun": "0"}, "4": {"status": "FAIL", "message": "       AssertionError: Normalization failed: Relative path with backslashes (subfolder\\file.html)\n       assert 'https://exam...r%5Cfile.html' == 'https://exam...der/file.html'\n         \n         - https://example.com/docs/subfolder/file.html\n         ?                                   ^\n         + https://example.com/docs/subfolder%5Cfile.html\n         ?                                   ^^^\n", "test_name": "test_windows_path_handling[subfolder\\\\file.html-https://example.com/docs/-https://example.com/docs/subfolder/file.html-Relative path with backslashes]", "rerun": "0"}, "5": {"status": "FAIL", "message": "       AssertionError: Normalization failed: Relative path traversal with backslashes (..\\other\\file.html)\n       assert 'https://exam...r%5Cfile.html' == 'https://exam...her/file.html'\n         \n         - https://example.com/docs/other/file.html\n         ?                               ^\n         + https://example.com/docs/folder/..%5Cother%5Cfile.html\n         ?                          ++++++++++++     ^^^\n", "test_name": "test_windows_path_handling[..\\\\other\\\\file.html-https://example.com/docs/folder/-https://example.com/docs/other/file.html-Relative path traversal with backslashes]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_windows_drive_as_scheme_or_host", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 4, "total_error": 0}}, "24": {"suite_name": "tests/test_url_security_extra.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: Failed check: Path traversal up one level (https://example.com/../secret)\n   assert True == False\n    +  where True = URLInfo(raw='https://example.com/../secret', normalized='https://example.com/secret', status='valid').is_valid\n", "test_name": "test_various_security_risks[https://example.com/../secret-False-Path traversal up one level]", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: Failed check: Path traversal up multiple levels (https://example.com/docs/../../etc/passwd)\n   assert True == False\n    +  where True = URLInfo(raw='https://example.com/docs/../../etc/passwd', normalized='https://example.com/etc/passwd', status='valid').is_valid\n", "test_name": "test_various_security_risks[https://example.com/docs/../../etc/passwd-False-Path traversal up multiple levels]", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: Failed check: URL encoded path traversal (https://example.com/%2e%2e/secret)\n   assert True == False\n    +  where True = URLInfo(raw='https://example.com/%2e%2e/secret', normalized='https://example.com/secret', status='valid').is_valid\n", "test_name": "test_various_security_risks[https://example.com/%2e%2e/secret-False-URL encoded path traversal]", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: Failed check: Mixed encoding path traversal (https://example.com/..%2fsecret)\n   assert True == False\n    +  where True = URLInfo(raw='https://example.com/..%2fsecret', normalized='https://example.com/secret', status='valid').is_valid\n", "test_name": "test_various_security_risks[https://example.com/..%2fsecret-False-Mixed encoding path traversal]", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: Failed check: Backslash path traversal (https://example.com/..\\secret)\n   assert True == False\n    +  where True = URLInfo(raw='https://example.com/..\\secret', normalized='https://example.com/..%5Csecret', status='valid').is_valid\n", "test_name": "test_various_security_risks[https://example.com/..\\\\secret-False-Backslash path traversal]", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: Failed check: Disallowed scheme: FTP (ftp://example.com/resource)\n   assert True == False\n    +  where True = URLInfo(raw='ftp://example.com/resource', normalized='ftp://example.com/resource', status='valid').is_valid\n", "test_name": "test_various_security_risks[ftp://example.com/resource-False-Disallowed scheme: FTP]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[smb://example.com/share-False-Disallowed scheme: SMB]", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AssertionError: Failed check: Disallowed scheme: local file access (file:///etc/passwd)\n   assert True == False\n    +  where True = URLInfo(raw='file:///etc/passwd', normalized='file:///etc/passwd', status='valid').is_valid\n", "test_name": "test_various_security_risks[file:///etc/passwd-False-Disallowed scheme: local file access]", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[javascript:void(0)-False-Javascript URI scheme]", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[vbscript:msgbox('XSS')-False-VBScript URI scheme]", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[http://localhost/admin-False-SSRF attempt to localhost]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[http://127.0.0.1/secrets-False-SSRF attempt to loopback IP]", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[http://169.254.169.254/latest/meta-data/-False-SSRF attempt to AWS metadata service]", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[http://metadata.google.internal/computeMetadata/v1/-False-SSRF attempt to GCP metadata service]", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AssertionError: Failed check: Cyrillic '\u0435' instead of Latin 'e' - Should ideally be handled by IDNA normalization, but basic validation passes (http://\u0435xample.com)\n   assert False == True\n    +  where False = URLInfo(raw='http://\u0435xample.com', normalized='http://\u0435xample.com', status='invalid (Invalid label chars in: \u0435xample)').is_valid\n", "test_name": "test_various_security_risks[http://\\u0435xample.com-True-Cyrillic '\\u0435' instead of Latin 'e' - Should ideally be handled by IDNA normalization, but basic validation passes]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[https://google.com@evil.com/-False-URL with username/password attempting to mask domain]", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_various_security_risks[https://example.com/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-False-Excessively long URL path]", "rerun": "0"}, "17": {"status": "FAIL", "message": "   AssertionError: Failed check: Newline character in URL (https://example.com/page\n     newline)\n   assert True == False\n    +  where True = URLInfo(raw='https://example.com/page\\nnewline', normalized='https://example.com/pagenewline', status='valid').is_valid\n", "test_name": "test_various_security_risks[https://example.com/page\\nnewline-False-Newline character in URL]", "rerun": "0"}, "18": {"status": "FAIL", "message": "   AssertionError: Failed check: Tab character in URL (https://example.com/page\t tab)\n   assert True == False\n    +  where True = URLInfo(raw='https://example.com/page\t tab', normalized='https://example.com/page%20tab', status='valid').is_valid\n", "test_name": "test_various_security_risks[https://example.com/page\\t tab-False-Tab character in URL]", "rerun": "0"}}, "status": {"total_pass": 9, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 10, "total_error": 0}}, "25": {"suite_name": "tests/url/test_info.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'http://example.com' == 'http://example.com/'\n     \n     - http://example.com/\n     ?                   -\n     + http://example.com\n", "test_name": "test_valid_url_initialization[http://example.com-http://example.com/]", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://www.example.co.uk/path?a=1-https://www.example.co.uk/path?a=1]", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[http://EXAMPLE.com:80/./path/../other/-http://example.com/other/]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://xn--mnchen-3ya.de/path-https://xn--mnchen-3ya.de/path]", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: assert False is True\n    +  where False = URLInfo(raw='http://localhost:8080', normalized='http://localhost:8080', status='invalid (Disallowed host: localhost)').is_valid\n", "test_name": "test_valid_url_initialization[http://localhost:8080-http://localhost:8080]", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: assert False is True\n    +  where False = URLInfo(raw='http://[::1]/test', normalized='http://[::1]/test', status='invalid (Private IP not allowed: ::1)').is_valid\n", "test_name": "test_valid_url_initialization[http://[::1]/test-http://[::1]/test]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[file:///path/to/file.txt-file:///path/to/file.txt]", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://example.com/path/-https://example.com/path/]", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_valid_url_initialization[https://example.com/path-https://example.com/path]", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[javascript:alert(1)-Disallowed scheme]", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[ftp://user:pass@example.com-Auth info not allowed]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://<invalid>.com-Invalid label chars in: <invalid>]", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://example.com:99999-ValueError: Port out of range 0-65535]", "rerun": "0"}, "13": {"status": "FAIL", "message": "   AssertionError: assert True is False\n    +  where True = URLInfo(raw='http://example.com/../../etc/passwd', normalized='http://example.com/etc/passwd', status='valid').is_valid\n", "test_name": "test_invalid_url_initialization[http://example.com/../../etc/passwd-Directory traversal pattern detected in original path]", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://example.com/?q=<script>-Invalid chars in decoded query]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://192.168.1.1-Private IP not allowed: 192.168.1.1]", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://127.0.0.1-Private IP not allowed: 127.0.0.1]", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[-URL cannot be None or empty]", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[None-URL cannot be None or empty]", "rerun": "0"}, "19": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://example.com/path%00.txt-Null byte in path]", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://example..com-Invalid domain label length or empty label]", "rerun": "0"}, "21": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://-example.com-Invalid label chars in: -example]", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://example-.com-Invalid label chars in: example-]", "rerun": "0"}, "23": {"status": "PASS", "message": "", "test_name": "test_invalid_url_initialization[http://example.c-Invalid TLD length: c]", "rerun": "0"}, "24": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[page2.html-http://example.com/docs/page1.html-http://example.com/docs/page2.html]", "rerun": "0"}, "25": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[../index.html-http://example.com/docs/page1.html-http://example.com/index.html]", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[/images/logo.png-http://example.com/docs/page1.html-http://example.com/images/logo.png]", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[//other.com/path-https://example.com/docs/-https://other.com/path]", "rerun": "0"}, "28": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[?query=new-http://example.com/page?a=1-http://example.com/page?query=new]", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[#fragment-http://example.com/page-http://example.com/page]", "rerun": "0"}, "30": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[path/./../sub/./file-http://example.com/base/-http://example.com/base/sub/file]", "rerun": "0"}, "31": {"status": "PASS", "message": "", "test_name": "test_relative_url_resolution[path/-http://example.com/base-http://example.com/path/]", "rerun": "0"}, "32": {"status": "PASS", "message": "", "test_name": "test_url_properties", "rerun": "0"}, "33": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[https://www.example.co.uk/path-www-example-co.uk-example.co.uk]", "rerun": "0"}, "34": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://blog.example.com-blog-example-com-example.com]", "rerun": "0"}, "35": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[https://justadomain.com-None-justadomain-com-justadomain.com]", "rerun": "0"}, "36": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://xn--mnchen-3ya.de-None-xn--mnchen-3ya-de-xn--mnchen-3ya.de]", "rerun": "0"}, "37": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://localhost:8080-None-localhost-None-localhost]", "rerun": "0"}, "38": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://[::1]-None-::1-None-::1]", "rerun": "0"}, "39": {"status": "PASS", "message": "", "test_name": "test_tldextract_properties[http://10.0.0.1-None-10.0.0.1-None-10.0.0.1]", "rerun": "0"}, "40": {"status": "PASS", "message": "", "test_name": "test_tldextract_fallback", "rerun": "0"}, "41": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "42": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[/relative/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "43": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://www.example.com/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "44": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[http://example.com/path-https://example.com/base-URLType.EXTERNAL]", "rerun": "0"}, "45": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://other.com/path-https://example.com/base-URLType.EXTERNAL]", "rerun": "0"}, "46": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[page.html-https://example.com/base/-URLType.INTERNAL]", "rerun": "0"}, "47": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com:443/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "48": {"status": "PASS", "message": "", "test_name": "test_url_type_determination[https://example.com:8443/path-https://example.com/base-URLType.INTERNAL]", "rerun": "0"}, "49": {"status": "PASS", "message": "", "test_name": "test_url_equality_and_hash", "rerun": "0"}, "50": {"status": "FAIL", "message": "   AssertionError: Modifying returned query_params dict affected internal state\n   assert 'new' not in {'a': ['1'], 'new': ['value']}\n    +  where {'a': ['1'], 'new': ['value']} = URLInfo(raw='http://example.com/path?a=1', normalized='http://example.com/path?a=1', status='valid').query_params\n", "test_name": "test_immutability", "rerun": "0"}, "51": {"status": "PASS", "message": "", "test_name": "test_fragment_removal", "rerun": "0"}, "52": {"status": "PASS", "message": "", "test_name": "test_long_url_edge_case", "rerun": "0"}, "53": {"status": "PASS", "message": "", "test_name": "test_url_info_performance", "rerun": "0"}}, "status": {"total_pass": 49, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}}, "26": {"suite_name": "tests/url/test_normalization.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_normalize_hostname", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_is_default_port", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_normalize_path", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_normalize_url", "rerun": "0"}}, "status": {"total_pass": 4, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "27": {"suite_name": "tests/url/test_security.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_security_config_constants", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_security_regex_patterns", "rerun": "0"}}, "status": {"total_pass": 2, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "28": {"suite_name": "tests/url/test_types.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_url_type_enum", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "29": {"suite_name": "tests/url/test_validation.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_validate_scheme", "rerun": "0"}, "1": {"status": "FAIL", "message": "   assert False\n", "test_name": "test_validate_netloc", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_validate_port", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_validate_path", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_validate_query", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_validate_security_patterns", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_validate_url", "rerun": "0"}}, "status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}}}, "date": "April 27, 2025", "start_time": 1745784590.61166, "total_suite": 30, "status": "FAIL", "status_list": {"pass": "270", "fail": "66", "skip": "2", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "338"}