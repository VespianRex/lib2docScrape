{"content": {"suites": {"0": {"status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_backend_lifecycle", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawler_backend_error_handling", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_backend_selector_registration", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_backend_selector_selection", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_backend_selector_advanced_selection", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_mock_crawler_backend_edge_cases", "rerun": "0"}}, "suite_name": "tests/test_base.py"}, "1": {"suite_name": "tests/test_content_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_extract_text_basic", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_process_basic", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_nested_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_special_characters", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_complex_content", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_mixed_content_types", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_scripts", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_script_tags_non_json_ld", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_script_tags_with_invalid_json", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_script_tags_with_different_types", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_scripts_with_data_attributes", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[javascript-console.log(\"Hello, World!\");-```javascript\\nconsole.log(\"Hello, World!\");\\n```]", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[python-print(\"Hello, World!\")-```python\\nprint(\"Hello, World!\")\\n```]", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[ruby-puts \"Hello, Ruby!\"-```ruby\\nputs \"Hello, Ruby!\"\\n```]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks[None-Inline code-`Inline code`]", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks_with_attributes", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_extract_code_blocks_with_nested_content", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_code_blocks_with_disallowed_languages", "rerun": "0"}, "19": {"status": "PASS", "message": "", "test_name": "test_extract_content_structure", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_extract_headings_hierarchy", "rerun": "0"}, "21": {"status": "PASS", "message": "", "test_name": "test_extract_metadata", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_complex_metadata", "rerun": "0"}, "23": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_duplicates", "rerun": "0"}, "24": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_invalid_html", "rerun": "0"}, "25": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_missing_values", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_schema_org_json_ld", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_all_types", "rerun": "0"}, "28": {"status": "PASS", "message": "", "test_name": "test_collect_assets", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_images_with_data_urls", "rerun": "0"}, "30": {"status": "PASS", "message": "", "test_name": "test_extract_assets_with_invalid_urls", "rerun": "0"}, "31": {"status": "PASS", "message": "", "test_name": "test_extract_links_with_invalid_urls", "rerun": "0"}, "32": {"status": "PASS", "message": "", "test_name": "test_extract_links_with_relative_paths", "rerun": "0"}, "33": {"status": "PASS", "message": "", "test_name": "test_links_with_query_parameters", "rerun": "0"}, "34": {"status": "PASS", "message": "", "test_name": "test_links_with_anchors", "rerun": "0"}, "35": {"status": "PASS", "message": "", "test_name": "test_anchor_tags_without_href", "rerun": "0"}, "36": {"status": "PASS", "message": "", "test_name": "test_links_with_various_protocols", "rerun": "0"}, "37": {"status": "PASS", "message": "", "test_name": "test_multiple_links_in_paragraph", "rerun": "0"}, "38": {"status": "PASS", "message": "", "test_name": "test_links_with_no_text", "rerun": "0"}}, "status": {"total_pass": 39, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "2": {"suite_name": "tests/test_content_processor_advanced.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_url_processor_port_handling", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "3": {"suite_name": "tests/test_content_processor_edge.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_empty_content", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_malformed_html", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_special_characters", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_large_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_nested_structures", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_javascript_handling", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_style_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_iframe_handling", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_form_handling", "rerun": "0"}}, "status": {"total_pass": 9, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "4": {"suite_name": "tests/test_crawl4ai.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawl_basic", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawl_with_rate_limit", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_validate_content", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_process_content", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_backend_selection", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_metrics", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_error_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_concurrent_requests", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_cleanup", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_crawl4ai_config_validation", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_ssl_context_configuration", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_custom_headers_handling", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_domain_filtering", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_url_queue_management", "rerun": "0"}}, "status": {"total_pass": 14, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "5": {"suite_name": "tests/test_crawl4ai_extended.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawl_with_urlinfo", "rerun": "0"}, "1": {"status": "SKIP", "message": "('/home/alex/DEV/lib2docScrape/tests/test_crawl4ai_extended.py', 123, 'Skipped: Link following is handled by the main Crawler, not the backend directly.')\n", "test_name": "test_crawl_depth_first", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_rate_limiting_precision", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_concurrent_request_limit", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_url_normalization", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_error_propagation", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_retry_behavior", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_metrics_accuracy", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_resource_cleanup", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org/3/-expected0]", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[https://docs.python.org-expected1]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_url_info_initialization[invalid-url-expected2]", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_url_info_hashable", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_url_info_immutable", "rerun": "0"}}, "status": {"total_pass": 13, "total_skip": 1, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "6": {"suite_name": "tests/test_crawler.py", "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_crawler_initialization", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_url_filtering", "rerun": "0"}, "2": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_single_url_processing", "rerun": "0"}, "3": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_depth_limited_crawling", "rerun": "0"}, "4": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_concurrent_processing", "rerun": "0"}, "5": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_rate_limiting", "rerun": "0"}, "6": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_error_handling", "rerun": "0"}, "7": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "8": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_cleanup", "rerun": "0"}, "9": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_max_pages_limit", "rerun": "0"}, "10": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_statistics_tracking", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_project_type_enum", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_project_identity", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_project_identifier", "rerun": "0"}, "14": {"status": "SKIP", "message": "('/home/alex/DEV/lib2docScrape/tests/test_crawler.py', 470, 'Skipped: DuckDuckGo search not available')\n", "test_name": "test_duckduckgo_search", "rerun": "0"}, "15": {"status": "ERROR", "message": "@pytest.fixture\n    def document_organizer() -> DocumentOrganizer:\n        \"\"\"Configured document organizer.\"\"\"\n>       return DocumentOrganizer(\n            config=OrganizationConfig(\n                output_dir=\"docs\",\n                group_by=[\"domain\", \"category\"],\n                index_template=\"index.html\",\n                assets_dir=\"assets\"\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/conftest.py:266: TypeError\n", "test_name": "test_url_discovery", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 1, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 12}}, "7": {"suite_name": "tests/test_crawler_advanced.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_basic_crawl", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawler_failed_crawl", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_crawler_retry_mechanism", "rerun": "0"}, "3": {"status": "SKIP", "message": "('/home/alex/DEV/lib2docScrape/tests/test_crawler_advanced.py', 157, 'Skipped: Rate limiter timing is difficult to test reliably with mocks')\n", "test_name": "test_crawler_rate_limiting", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_crawler_content_processing", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_crawler_quality_checking", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_crawler_resource_cleanup", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_crawler_concurrent_requests", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_crawler_url_normalization", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_crawler_error_handling", "rerun": "0"}}, "status": {"total_pass": 9, "total_skip": 1, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "8": {"suite_name": "tests/test_gui.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_home_page", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawl_request", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_connection_manager", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "9": {"suite_name": "tests/test_helpers.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_rate_limiter", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_retry_strategy", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_timer", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_similarity_calculation", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_checksum_generation", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_logging_setup", "rerun": "0"}}, "status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "10": {"suite_name": "tests/test_integration.py", "tests": {"0": {"status": "ERROR", "message": "test_html_dir = '/tmp/pytest-of-alex/pytest-1/test_full_site_crawl0/test_docs'\n\n    @pytest.fixture\n    def integrated_crawler(test_html_dir: str) -> DocumentationCrawler:\n        \"\"\"Create fully integrated crawler instance.\"\"\"\n        # Configure content processor\n        processor = ContentProcessor(\n            config=ProcessorConfig(\n                # Removed allowed_tags and allowed_attributes as they are not valid config fields\n                preserve_whitespace_elements=[\"pre\", \"code\"],\n                code_languages=[\"python\"],\n                max_heading_level=3,\n                max_content_length=10000,\n                min_content_length=10,\n                extract_metadata=True, # Ensure metadata is extracted\n                extract_code_blocks=True # Ensure code blocks are extracted\n            )\n        )\n    \n        # Configure quality checker\n        checker = QualityChecker(\n            config=QualityConfig(\n                min_content_length=10, # Lowered for test files\n                max_content_length=10000,\n                min_headings=1,\n                max_heading_depth=3,\n                min_internal_links=1,\n                max_broken_links_ratio=0.1,\n                required_metadata_fields={\"title\", \"description\"}\n            )\n        )\n    \n        # Configure document organizer\n>       organizer = DocumentOrganizer(\n            config=OrganizationConfig(\n                min_similarity_score=0.0, # Set to 0.0 for test to ensure comparison happens\n                max_versions_to_keep=3,\n                category_rules={\n                    \"api\": [\"api\", \"reference\", \"endpoint\"],\n                    \"guide\": [\"guide\", \"tutorial\", \"getting started\"],\n                    \"example\": [\"example\", \"sample\", \"demo\"]\n                },\n                stop_words=set() # Explicitly set stop words to empty set\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/test_integration.py:143: TypeError\n", "test_name": "test_full_site_crawl", "rerun": "0"}, "1": {"status": "ERROR", "message": "test_html_dir = '/tmp/pytest-of-alex/pytest-1/test_content_processing_pipeli0/test_docs'\n\n    @pytest.fixture\n    def integrated_crawler(test_html_dir: str) -> DocumentationCrawler:\n        \"\"\"Create fully integrated crawler instance.\"\"\"\n        # Configure content processor\n        processor = ContentProcessor(\n            config=ProcessorConfig(\n                # Removed allowed_tags and allowed_attributes as they are not valid config fields\n                preserve_whitespace_elements=[\"pre\", \"code\"],\n                code_languages=[\"python\"],\n                max_heading_level=3,\n                max_content_length=10000,\n                min_content_length=10,\n                extract_metadata=True, # Ensure metadata is extracted\n                extract_code_blocks=True # Ensure code blocks are extracted\n            )\n        )\n    \n        # Configure quality checker\n        checker = QualityChecker(\n            config=QualityConfig(\n                min_content_length=10, # Lowered for test files\n                max_content_length=10000,\n                min_headings=1,\n                max_heading_depth=3,\n                min_internal_links=1,\n                max_broken_links_ratio=0.1,\n                required_metadata_fields={\"title\", \"description\"}\n            )\n        )\n    \n        # Configure document organizer\n>       organizer = DocumentOrganizer(\n            config=OrganizationConfig(\n                min_similarity_score=0.0, # Set to 0.0 for test to ensure comparison happens\n                max_versions_to_keep=3,\n                category_rules={\n                    \"api\": [\"api\", \"reference\", \"endpoint\"],\n                    \"guide\": [\"guide\", \"tutorial\", \"getting started\"],\n                    \"example\": [\"example\", \"sample\", \"demo\"]\n                },\n                stop_words=set() # Explicitly set stop words to empty set\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/test_integration.py:143: TypeError\n", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "2": {"status": "ERROR", "message": "test_html_dir = '/tmp/pytest-of-alex/pytest-1/test_quality_checks0/test_docs'\n\n    @pytest.fixture\n    def integrated_crawler(test_html_dir: str) -> DocumentationCrawler:\n        \"\"\"Create fully integrated crawler instance.\"\"\"\n        # Configure content processor\n        processor = ContentProcessor(\n            config=ProcessorConfig(\n                # Removed allowed_tags and allowed_attributes as they are not valid config fields\n                preserve_whitespace_elements=[\"pre\", \"code\"],\n                code_languages=[\"python\"],\n                max_heading_level=3,\n                max_content_length=10000,\n                min_content_length=10,\n                extract_metadata=True, # Ensure metadata is extracted\n                extract_code_blocks=True # Ensure code blocks are extracted\n            )\n        )\n    \n        # Configure quality checker\n        checker = QualityChecker(\n            config=QualityConfig(\n                min_content_length=10, # Lowered for test files\n                max_content_length=10000,\n                min_headings=1,\n                max_heading_depth=3,\n                min_internal_links=1,\n                max_broken_links_ratio=0.1,\n                required_metadata_fields={\"title\", \"description\"}\n            )\n        )\n    \n        # Configure document organizer\n>       organizer = DocumentOrganizer(\n            config=OrganizationConfig(\n                min_similarity_score=0.0, # Set to 0.0 for test to ensure comparison happens\n                max_versions_to_keep=3,\n                category_rules={\n                    \"api\": [\"api\", \"reference\", \"endpoint\"],\n                    \"guide\": [\"guide\", \"tutorial\", \"getting started\"],\n                    \"example\": [\"example\", \"sample\", \"demo\"]\n                },\n                stop_words=set() # Explicitly set stop words to empty set\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/test_integration.py:143: TypeError\n", "test_name": "test_quality_checks", "rerun": "0"}, "3": {"status": "ERROR", "message": "test_html_dir = '/tmp/pytest-of-alex/pytest-1/test_document_organization0/test_docs'\n\n    @pytest.fixture\n    def integrated_crawler(test_html_dir: str) -> DocumentationCrawler:\n        \"\"\"Create fully integrated crawler instance.\"\"\"\n        # Configure content processor\n        processor = ContentProcessor(\n            config=ProcessorConfig(\n                # Removed allowed_tags and allowed_attributes as they are not valid config fields\n                preserve_whitespace_elements=[\"pre\", \"code\"],\n                code_languages=[\"python\"],\n                max_heading_level=3,\n                max_content_length=10000,\n                min_content_length=10,\n                extract_metadata=True, # Ensure metadata is extracted\n                extract_code_blocks=True # Ensure code blocks are extracted\n            )\n        )\n    \n        # Configure quality checker\n        checker = QualityChecker(\n            config=QualityConfig(\n                min_content_length=10, # Lowered for test files\n                max_content_length=10000,\n                min_headings=1,\n                max_heading_depth=3,\n                min_internal_links=1,\n                max_broken_links_ratio=0.1,\n                required_metadata_fields={\"title\", \"description\"}\n            )\n        )\n    \n        # Configure document organizer\n>       organizer = DocumentOrganizer(\n            config=OrganizationConfig(\n                min_similarity_score=0.0, # Set to 0.0 for test to ensure comparison happens\n                max_versions_to_keep=3,\n                category_rules={\n                    \"api\": [\"api\", \"reference\", \"endpoint\"],\n                    \"guide\": [\"guide\", \"tutorial\", \"getting started\"],\n                    \"example\": [\"example\", \"sample\", \"demo\"]\n                },\n                stop_words=set() # Explicitly set stop words to empty set\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/test_integration.py:143: TypeError\n", "test_name": "test_document_organization", "rerun": "0"}, "4": {"status": "ERROR", "message": "test_html_dir = '/tmp/pytest-of-alex/pytest-1/test_search_functionality0/test_docs'\n\n    @pytest.fixture\n    def integrated_crawler(test_html_dir: str) -> DocumentationCrawler:\n        \"\"\"Create fully integrated crawler instance.\"\"\"\n        # Configure content processor\n        processor = ContentProcessor(\n            config=ProcessorConfig(\n                # Removed allowed_tags and allowed_attributes as they are not valid config fields\n                preserve_whitespace_elements=[\"pre\", \"code\"],\n                code_languages=[\"python\"],\n                max_heading_level=3,\n                max_content_length=10000,\n                min_content_length=10,\n                extract_metadata=True, # Ensure metadata is extracted\n                extract_code_blocks=True # Ensure code blocks are extracted\n            )\n        )\n    \n        # Configure quality checker\n        checker = QualityChecker(\n            config=QualityConfig(\n                min_content_length=10, # Lowered for test files\n                max_content_length=10000,\n                min_headings=1,\n                max_heading_depth=3,\n                min_internal_links=1,\n                max_broken_links_ratio=0.1,\n                required_metadata_fields={\"title\", \"description\"}\n            )\n        )\n    \n        # Configure document organizer\n>       organizer = DocumentOrganizer(\n            config=OrganizationConfig(\n                min_similarity_score=0.0, # Set to 0.0 for test to ensure comparison happens\n                max_versions_to_keep=3,\n                category_rules={\n                    \"api\": [\"api\", \"reference\", \"endpoint\"],\n                    \"guide\": [\"guide\", \"tutorial\", \"getting started\"],\n                    \"example\": [\"example\", \"sample\", \"demo\"]\n                },\n                stop_words=set() # Explicitly set stop words to empty set\n            )\n        )\nE       TypeError: DocumentOrganizer.__init__() got an unexpected keyword argument 'config'\n\ntests/test_integration.py:143: TypeError\n", "test_name": "test_search_functionality", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 5}}, "11": {"suite_name": "tests/test_integration_advanced.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_full_crawl_pipeline", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_error_handling_integration", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_rate_limiting_integration", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_content_processing_integration", "rerun": "0"}}, "status": {"total_pass": 4, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "12": {"suite_name": "tests/test_link_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_basic_link_extraction", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_empty_document", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_malformed_links", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_duplicate_links", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_fragment_handling", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_query_params", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_special_characters", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_nested_links", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_invalid_base_url", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_data_urls", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_unicode_urls", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_protocol_relative_urls", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_base_tag_handling", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_malformed_base_tags", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_link_attributes", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_link_schemes", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_url_normalization", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_url_case_sensitivity", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_url_encoding_handling", "rerun": "0"}}, "status": {"total_pass": 19, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "13": {"suite_name": "tests/test_organizer.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_document_organizer_initialization", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_document_version_management", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_document_categorization", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_reference_extraction", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_search_functionality", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_collection_management", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_document_similarity", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_version_tracking", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_search_index_generation", "rerun": "0"}}, "status": {"total_pass": 9, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "14": {"suite_name": "tests/test_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_content_processor_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert 'Mock Title' == 'Sample Document'\n     \n     - Sample Document\n     + Mock Title\n", "test_name": "test_full_content_processing", "rerun": "0"}, "2": {"status": "FAIL", "message": "           AttributeError: Mock object has no attribute 'config'\n", "test_name": "test_content_size_limits", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_malformed_html_handling", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_special_content_handling", "rerun": "0"}, "5": {"status": "FAIL", "message": "   assert 0 == 2\n    +  where 0 = len([])\n", "test_name": "test_content_structure_preservation", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 3, "total_error": 0}}, "15": {"suite_name": "tests/test_quality.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_quality_checker_basic", "rerun": "0"}, "1": {"status": "FAIL", "message": "   assert not True\n    +  where True = any(<generator object test_quality_checker_content_length.<locals>.<genexpr> at 0x7f920aad9630>)\n", "test_name": "test_quality_checker_content_length", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_quality_checker_headings", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_quality_checker_links", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_quality_checker_code_blocks", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_quality_checker_metadata", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AssertionError: assert 1 == 0\n    +  where 1 = len([QualityIssue(type=<IssueType.CONTENT_LENGTH: 'content_length'>, level=<IssueLevel.ERROR: 'error'>, message='Content length (0) is below minimum (50)', location=None, details={})])\n", "test_name": "test_quality_checker_custom_config", "rerun": "0"}}, "status": {"total_pass": 5, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 0}}, "16": {"suite_name": "tests/test_url_handling.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_urlunparse_behavior", "rerun": "0"}, "1": {"status": "FAIL", "message": "       AssertionError: assert 'https://example.com' == 'https://example.com/'\n         \n         - https://example.com/\n         ?                    -\n         + https://example.com\n", "test_name": "test_url_info_creation_basic", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_url_info_path_normalization", "rerun": "0"}, "3": {"status": "FAIL", "message": "       AssertionError: assert 'http://example.com' == 'http://example.com/'\n         \n         - http://example.com/\n         ?                   -\n         + http://example.com\n", "test_name": "test_url_info_scheme_handling", "rerun": "0"}, "4": {"status": "FAIL", "message": "       AssertionError: assert 'https://exam...ram=2&query=1' == 'https://exam...ery=1&param=2'\n         \n         - https://example.com/?query=1&param=2\n         ?                    -        --------\n         + https://example.com?param=2&query=1\n         ?                     ++++++++\n", "test_name": "test_url_info_query_handling", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_url_info_fragment_handling", "rerun": "0"}, "6": {"status": "FAIL", "message": "       AssertionError: assert None == ''\n        +  where None = <src.utils.url_info.URLInfo object at 0x7f920ab573b0>.netloc\n", "test_name": "test_url_info_invalid_urls", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_url_info_immutability", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_url_info_equality", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_url_info_type_safety", "rerun": "0"}, "10": {"status": "FAIL", "message": "       AssertionError: assert 'http://xn--nicode-2ya.com' == 'http://xn--nicode-2ya.com/'\n         \n         - http://xn--nicode-2ya.com/\n         ?                          -\n         + http://xn--nicode-2ya.com\n", "test_name": "test_url_info_edge_cases", "rerun": "0"}, "11": {"status": "FAIL", "message": "       assert True == False\n        +  where True = <src.utils.url_info.URLInfo object at 0x7f920ac2b740>.is_valid\n", "test_name": "test_url_info_security", "rerun": "0"}, "12": {"status": "FAIL", "message": "       AssertionError: assert 'http://page2.html' == 'http://examp...cs/page2.html'\n         \n         - http://example.com/docs/page2.html\n         + http://page2.html\n", "test_name": "test_url_info_relative_paths", "rerun": "0"}, "13": {"status": "FAIL", "message": "       AssertionError: assert 'http://examp...param1=value1' == 'http://examp...param1=value1'\n         \n         - http://example.com/?param1=value1\n         ?                   -\n         + http://example.com?param1=value1\n", "test_name": "test_url_info_query_parameters", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_url_info_performance", "rerun": "0"}}, "status": {"total_pass": 7, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 8, "total_error": 0}}}}, "date": "April 11, 2025", "start_time": 1744343408.223275, "total_suite": 17, "status": "FAIL", "status_list": {"pass": "150", "fail": "13", "skip": "3", "error": "17", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "183"}