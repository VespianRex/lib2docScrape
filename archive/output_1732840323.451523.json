{"content": {"suites": {"0": {"status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 6, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_backend_lifecycle", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawler_backend_error_handling", "rerun": "0"}, "2": {"status": "FAIL", "message": "   pydantic_core._pydantic_core.ValidationError: 2 validation errors for BackendCriteria\n   priority\n     Field required [type=missing, input_value={'domains': ['example.com...t_types': ['text/html']}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   url_patterns\n     Field required [type=missing, input_value={'domains': ['example.com...t_types': ['text/html']}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n", "test_name": "test_backend_selector_registration", "rerun": "0"}, "3": {"status": "FAIL", "message": "   pydantic_core._pydantic_core.ValidationError: 2 validation errors for BackendCriteria\n   priority\n     Field required [type=missing, input_value={'domains': ['example.com...t_types': ['text/html']}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   url_patterns\n     Field required [type=missing, input_value={'domains': ['example.com...t_types': ['text/html']}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n", "test_name": "test_backend_selector_selection", "rerun": "0"}, "4": {"status": "FAIL", "message": "       TypeError: URLProcessor() takes no arguments\n", "test_name": "test_url_normalization", "rerun": "0"}, "5": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'is_valid'\n", "test_name": "test_processed_content_validation", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_concurrent_backend_operations", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AttributeError: 'dict' object has no attribute 'total_requests'\n", "test_name": "test_backend_metrics_update", "rerun": "0"}, "8": {"status": "FAIL", "message": "   pydantic_core._pydantic_core.ValidationError: 2 validation errors for BackendCriteria\n   priority\n     Field required [type=missing, input_value={'domains': ['example.com...t_types': ['text/html']}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   url_patterns\n     Field required [type=missing, input_value={'domains': ['example.com...t_types': ['text/html']}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n", "test_name": "test_backend_selector_error_handling", "rerun": "0"}}, "suite_name": "tests/test_base.py"}, "1": {"suite_name": "tests/test_content_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_init_default_config", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_init_custom_config", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_extract_title_with_title_tag", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_extract_title_with_h1_fallback", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_extract_title_no_title", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_extract_text_basic", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_scripts", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_extract_text_preserve_code", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AssertionError: assert 1 == 4\n    +  where 1 = len([{'children': [{'children': [{'children': [...], 'id': 'h3', 'level': 3, 'text': 'Heading 3'}], 'id': '', 'level': 2, 'text': 'Heading 2'}], 'id': 'h1', 'level': 1, 'text': 'Heading 1'}])\n", "test_name": "test_extract_headings", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_extract_links", "rerun": "0"}, "10": {"status": "FAIL", "message": "   assert 0 == 2\n    +  where 0 = len([])\n", "test_name": "test_extract_code_blocks", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_images'\n", "test_name": "test_extract_images", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_stylesheets'\n", "test_name": "test_extract_stylesheets", "rerun": "0"}, "13": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_scripts'\n", "test_name": "test_extract_scripts", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_media'\n", "test_name": "test_extract_media", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AssertionError: assert 1 == 2\n    +  where 1 = len([{'children': [{'children': [{'children': [], 'id': '', 'level': 1, 'text': 'Section 1', ...}, {'children': [], 'level': 2, 'text': 'Paragraph 1', 'type': 'p'}, {'children': [], 'level': 2, 'text': 'def test(): pass', 'type': 'pre'}, {'children': [], 'id': '', 'level': 2, 'text': 'Section 2', ...}, {'children': [], 'level': 2, 'text': 'Paragraph 2', 'type': 'p'}], 'level': 1, 'text': 'Section 1 Paragraph 1 def test(): pass Section 2 Paragraph 2', 'type': 'body'}], 'level': 0, 'text': 'Section 1 Paragraph 1 def test(): pass Section 2 Paragraph 2', 'type': 'html'}])\n", "test_name": "test_extract_content_structure", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_process_basic", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_process_large_content", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_find_main_content", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AssertionError: assert 'Code block' in '# Heading 1\\nHeading 1\\nParagraph\\nParagraph\\n> Quote\\nQuote'\n", "test_name": "test_format_as_markdown", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_convert_table_to_markdown", "rerun": "0"}, "21": {"status": "FAIL", "message": "   AssertionError: assert 'Test & content' in '<p>Test &amp; content</p>'\n", "test_name": "test_safe_content", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_safe_content_preserve_whitespace", "rerun": "0"}, "23": {"status": "FAIL", "message": "   TypeError: ContentProcessor._safe_content() got an unexpected keyword argument 'preserve_entities'\n", "test_name": "test_safe_content_preserve_entities", "rerun": "0"}, "24": {"status": "FAIL", "message": "   KeyError: 'title'\n", "test_name": "test_extract_metadata", "rerun": "0"}, "25": {"status": "FAIL", "message": "   AssertionError: assert '/image.jpg' in ['https://example.com/image.jpg']\n", "test_name": "test_collect_assets", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_nested_content", "rerun": "0"}, "27": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_comments", "rerun": "0"}, "28": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_special_characters", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_extract_headings_empty", "rerun": "0"}, "30": {"status": "FAIL", "message": "   AssertionError: assert 1 >= 4\n    +  where 1 = len([{'children': [{'children': [{'children': [], 'id': '', 'level': 3, 'text': 'Subsection A'}], 'id': '', 'level': 2, 'text': 'Section One'}, {'children': [{'children': [], 'id': '', 'level': 4, 'text': 'Not included'}], 'id': '', 'level': 2, 'text': 'Section Two'}], 'id': '', 'level': 1, 'text': 'Main Title with emphasis'}])\n", "test_name": "test_extract_headings_with_nested_content", "rerun": "0"}, "31": {"status": "FAIL", "message": "   AssertionError: assert 2 == 0\n    +  where 2 = len([{'is_internal': False, 'text': 'JavaScript Link', 'title': '', 'url': 'javascript:void(0)'}, {'is_internal': False, 'text': 'Email Link', 'title': '', 'url': 'mailto:test@example.com'}])\n", "test_name": "test_extract_links_with_invalid_urls", "rerun": "0"}, "32": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_links_with_relative_paths.<locals>.<genexpr> at 0x12eae18c0>)\n", "test_name": "test_extract_links_with_relative_paths", "rerun": "0"}, "33": {"status": "FAIL", "message": "   assert 1 == 3\n    +  where 1 = len([{'attributes': {'data-file': '', 'data-line-numbers': '', 'data-title': ''}, 'content': \"puts 'test'\", 'language': ''}])\n", "test_name": "test_extract_code_blocks_with_attributes", "rerun": "0"}, "34": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_images'\n", "test_name": "test_extract_images_with_data_urls", "rerun": "0"}, "35": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_stylesheets'\n", "test_name": "test_extract_stylesheets_with_media_queries", "rerun": "0"}, "36": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_scripts'\n", "test_name": "test_extract_scripts_with_attributes", "rerun": "0"}, "37": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute '_extract_media'\n", "test_name": "test_extract_media_with_sources", "rerun": "0"}, "38": {"status": "FAIL", "message": "   assert 'og:title' in \"{'meta_tags': {'description': 'Test paragraph.', 'keywords': 'Test Content'}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}\"\n    +  where \"{'meta_tags': {'description': 'Test paragraph.', 'keywords': 'Test Content'}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}\" = str({'custom': {}, 'dublin_core': {}, 'meta_tags': {'description': 'Test paragraph.', 'keywords': 'Test Content'}, 'opengraph': {}, ...})\n    +    where {'custom': {}, 'dublin_core': {}, 'meta_tags': {'description': 'Test paragraph.', 'keywords': 'Test Content'}, 'opengraph': {}, ...} = ProcessedContent(url='https://example.com', title='Complex Test', content={'formatted_content': 'Complex Test\\n# Test Content\\nTest Content\\nTest paragraph.\\nTest paragraph.', 'headings': [{'level': 1, 'text': 'Test Content', 'id': '', 'children': []}], 'links': [], 'code_blocks': [], 'structure': [{'type': 'html', 'text': 'Complex Test Test Content Test paragraph.', 'children': [{'type': 'head', 'text': 'Complex Test', 'children': [{'type': 'title', 'text': 'Complex Test', 'children': [], 'level': 2}], 'level': 1}, {'type': 'body', 'text': 'Test Content Test paragraph.', 'children': [{'type': 'h1', 'text': 'Test Content', 'children': [], 'level': 1, 'id': ''}, {'type': 'p', 'text': 'Test paragraph.', 'children': [], 'level': 2}], 'level': 1}], 'level': 0}]}, metadata={'meta_tags': {'description': 'Test paragraph.', 'keywords': 'Test Content'}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).metadata\n", "test_name": "test_process_with_complex_metadata", "rerun": "0"}, "39": {"status": "FAIL", "message": "   assert 'script' not in '<img src=\"x...click me</a>'\n     \n     'script' is contained here:\n       <img src=\"x\"/> <a href=\"javascript:alert('xss')\">click me</a>\n     ?                             ++++++\n", "test_name": "test_safe_content_with_malicious_content", "rerun": "0"}, "40": {"status": "PASS", "message": "", "test_name": "test_extract_metadata_with_missing_values", "rerun": "0"}, "41": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_collect_assets_with_base_tag.<locals>.<genexpr> at 0x12eb19700>)\n", "test_name": "test_collect_assets_with_base_tag", "rerun": "0"}, "42": {"status": "PASS", "message": "", "test_name": "test_process_with_invalid_html", "rerun": "0"}, "43": {"status": "PASS", "message": "", "test_name": "test_process_with_unicode_content", "rerun": "0"}, "44": {"status": "PASS", "message": "", "test_name": "test_process_with_mixed_content_types", "rerun": "0"}, "45": {"status": "PASS", "message": "", "test_name": "test_process_with_microdata", "rerun": "0"}, "46": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_process_with_frames.<locals>.<genexpr> at 0x12edce9b0>)\n", "test_name": "test_process_with_frames", "rerun": "0"}, "47": {"status": "PASS", "message": "", "test_name": "test_process_with_custom_elements", "rerun": "0"}, "48": {"status": "FAIL", "message": "   AssertionError: assert 'IE specific content' not in 'Conditional...ular content'\n     \n     'IE specific content' is contained here:\n       Conditional Comments\n       [if IE]>\n                   <p>IE specific content</p>\n                   <![endif]\n       [if !IE]><!...\n     \n     ...Full output truncated (6 lines hidden), use '-vv' to show\n", "test_name": "test_process_with_conditional_comments", "rerun": "0"}, "49": {"status": "PASS", "message": "", "test_name": "test_process_with_data_attributes", "rerun": "0"}, "50": {"status": "FAIL", "message": "   assert 'https://example.com/new' in \"{'meta_tags': {'description': 'Redirecting...'}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}\"\n    +  where \"{'meta_tags': {'description': 'Redirecting...'}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}\" = str({'custom': {}, 'dublin_core': {}, 'meta_tags': {'description': 'Redirecting...'}, 'opengraph': {}, ...})\n    +    where {'custom': {}, 'dublin_core': {}, 'meta_tags': {'description': 'Redirecting...'}, 'opengraph': {}, ...} = ProcessedContent(url='https://example.com', title='Meta Redirect', content={'formatted_content': 'Meta Redirect\\nRedirecting...\\nRedirecting...', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'html', 'text': 'Meta Redirect Redirecting...', 'children': [{'type': 'head', 'text': 'Meta Redirect', 'children': [{'type': 'title', 'text': 'Meta Redirect', 'children': [], 'level': 2}], 'level': 1}, {'type': 'body', 'text': 'Redirecting...', 'children': [{'type': 'p', 'text': 'Redirecting...', 'children': [], 'level': 2}], 'level': 1}], 'level': 0}]}, metadata={'meta_tags': {'description': 'Redirecting...'}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]).metadata\n", "test_name": "test_process_with_meta_redirects", "rerun": "0"}, "51": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_process_with_base_urls.<locals>.<genexpr> at 0x12eb1b2a0>)\n", "test_name": "test_process_with_base_urls", "rerun": "0"}, "52": {"status": "FAIL", "message": "   AssertionError: assert 'Header content' not in 'Header cont...ebar content'\n     \n     'Header content' is contained here:\n       Header content Navigation First paragraph Preserved whitespace and formatting def test(): pass Nested content Footer content Sidebar content\n     ? ++++++++++++++\n", "test_name": "test_extract_text_with_complex_content", "rerun": "0"}, "53": {"status": "FAIL", "message": "   AssertionError: assert 'Sidebar content' not in 'Documentati...ebar content'\n     \n     'Sidebar content' is contained here:\n       Documentation Main content def example(): return True Sidebar content\n     ?                                                       +++++++++++++++\n", "test_name": "test_extract_text_with_sphinx_content", "rerun": "0"}, "54": {"status": "PASS", "message": "", "test_name": "test_extract_text_with_empty_elements", "rerun": "0"}, "55": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_headings_with_ids.<locals>.<genexpr> at 0x12ec8d8a0>)\n", "test_name": "test_extract_headings_with_ids", "rerun": "0"}, "56": {"status": "FAIL", "message": "E   KeyError: 'source'\n", "test_name": "test_extract_links_with_complex_navigation", "rerun": "0"}, "57": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_links_with_base_url.<locals>.<genexpr> at 0x12ebd6420>)\n", "test_name": "test_extract_links_with_base_url", "rerun": "0"}, "58": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_code_blocks_with_languages.<locals>.<genexpr> at 0x12ebd4ac0>)\n", "test_name": "test_extract_code_blocks_with_languages", "rerun": "0"}, "59": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_extract_code_blocks_with_nested_content.<locals>.<genexpr> at 0x12eae35a0>)\n", "test_name": "test_extract_code_blocks_with_nested_content", "rerun": "0"}, "60": {"status": "FAIL", "message": "   KeyError: 'headings'\n", "test_name": "test_process_with_custom_config", "rerun": "0"}, "61": {"status": "FAIL", "message": "   AssertionError: assert '- Item 1' in '# Title\\nTitle\\nParagraph 1\\nParagraph 1\\n> Important quote\\nImportant quote\\n```\\ndef test():\\n    pass\\n```'\n", "test_name": "test_format_as_markdown_mixed_content", "rerun": "0"}, "62": {"status": "PASS", "message": "", "test_name": "test_format_as_markdown_nested_content", "rerun": "0"}, "63": {"status": "PASS", "message": "", "test_name": "test_find_main_content_with_article", "rerun": "0"}, "64": {"status": "PASS", "message": "", "test_name": "test_find_main_content_with_sphinx", "rerun": "0"}, "65": {"status": "FAIL", "message": "   AssertionError: assert 'exceeds limit' in 'Content exceeds maximum size limit of 1000000 bytes'\n", "test_name": "test_process_content_too_large", "rerun": "0"}, "66": {"status": "PASS", "message": "", "test_name": "test_process_content_too_small", "rerun": "0"}, "67": {"status": "PASS", "message": "", "test_name": "test_process_invalid_html", "rerun": "0"}, "68": {"status": "PASS", "message": "", "test_name": "test_process_empty_content", "rerun": "0"}, "69": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_process_with_base_tag.<locals>.<genexpr> at 0x12ec8ca00>)\n", "test_name": "test_process_with_base_tag", "rerun": "0"}, "70": {"status": "FAIL", "message": "   AssertionError: assert 'exceeds maximum length' in 'Content exceeds maximum size limit of 500 bytes'\n", "test_name": "test_processor_with_size_limits", "rerun": "0"}, "71": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute 'add_content_extractor'\n", "test_name": "test_processor_with_custom_extractors", "rerun": "0"}, "72": {"status": "FAIL", "message": "   TypeError: ContentProcessor.add_content_filter() missing 1 required positional argument: 'filter_func'\n", "test_name": "test_processor_with_custom_filters", "rerun": "0"}, "73": {"status": "FAIL", "message": "   KeyError: 'title'\n", "test_name": "test_metadata_extraction", "rerun": "0"}, "74": {"status": "FAIL", "message": "   AssertionError: assert 'http://cdn.example.com/styles/main.css' in ['http://styles/main.css']\n", "test_name": "test_asset_collection", "rerun": "0"}, "75": {"status": "FAIL", "message": "   AssertionError: assert '- First level 1' in ''\n", "test_name": "test_nested_list_formatting", "rerun": "0"}, "76": {"status": "FAIL", "message": "   assert 'Level 3' not in \"{'formatted...level': 0}]}\"\n     \n     'Level 3' is contained here:\n       {'formatted_content': \"# Title\\nTitle\\n## Subtitle\\nSubtitle\\n### Level 3\\nLevel 3\\nContent\\nContent\\nalert('test');\", 'headings': [{'level': 1, 'text': 'Title', 'id': '', 'children': [{'level': 2, 'text': 'Subtitle', 'id': '', 'children': [{'level': 3, 'text': 'Level 3', 'id': '', 'children': []}]}]}], 'links': [], 'code_blocks': [], 'structure': [{'type': 'div', 'text': 'Title Subtitle Level 3 Content', 'children': [{'type': 'h1', 'text': 'Title', 'children': [], 'level': 1, 'id': ''}, {'type': 'h2', 'text': 'Subtitle', 'children': [], 'level': 2, 'id': ''}...\n     \n     ...Full output truncated (2 lines hidden), use '-vv' to show\n", "test_name": "test_processor_with_custom_config", "rerun": "0"}}, "status": {"total_pass": 32, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 45, "total_error": 0}}, "2": {"suite_name": "tests/test_content_processor_advanced.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'Main Title' in ProcessedContent(url='', title='Test Page', content={'formatted_content': 'Test Page\\n# Main Title\\nMain Title\\nThis is a test paragraph.\\nThis is a test paragraph.', 'headings': [{'level': 1, 'text': 'Main Title', 'id': '', 'children': []}], 'links': [], 'code_blocks': [], 'structure': [{'type': 'html', 'text': 'Test Page Main Title This is a test paragraph. def test(): pass', 'children': [{'type': 'head', 'text': 'Test Page', 'children': [{'type': 'title', 'text': 'Test Page', 'children': [], 'level': 2}], 'level': 1}, {'type': 'body', 'text': 'Main Title This is a test paragraph. def test(): pass', 'children': [{'type': 'h1', 'text': 'Main Title', 'children': [], 'level': 1, 'id': ''}, {'type': 'p', 'text': 'This is a test paragraph.', 'children': [], 'level': 2}, {'type': 'div', 'text': 'def test(): pass', 'children': [{'type': 'pre', 'text': 'def test(): pass', 'children': [], 'level': 3}], 'level': 2}], 'level': 1}], 'level': 0}]}, metadata={'meta_tags': {'description': 'This is a test paragraph.', 'keywords': 'Main Title'}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[])\n", "test_name": "test_basic_html_processing", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert 'def example():' in ProcessedContent(url='', title='Untitled Document', content={'formatted_content': '```\\ndef example():\\n    return True\\n\\nfunction test() {\\n    return true;\\n}\\n```', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'div', 'text': 'def example(): return True function test() { return true; }', 'children': [{'type': 'pre', 'text': 'def example(): return True', 'children': [{'type': 'code', 'text': 'def example(): return True', 'children': [], 'level': 2, 'language': ''}], 'level': 1}, {'type': 'pre', 'text': 'function test() { return true; }', 'children': [{'type': 'code', 'text': 'function test() { return true; }', 'children': [], 'level': 2, 'language': ''}], 'level': 1}], 'level': 0}]}, metadata={'meta_tags': {}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[])\n", "test_name": "test_code_block_extraction", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 'Header 1' in ProcessedContent(url='', title='Untitled Document', content={'formatted_content': '| Header 1 | Header 2 |\\n| --- | --- |\\n| Cell 1 | Cell 2 |\\n| Cell 3 | Cell 4 |', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'table', 'text': 'Header 1 Header 2 Cell 1 Cell 2 Cell 3 Cell 4', 'children': [{'type': 'thead', 'text': 'Header 1 Header 2', 'children': [{'type': 'tr', 'text': 'Header 1 Header 2', 'children': [{'type': 'th', 'text': 'Header 1', 'children': [], 'level': 3}, {'type': 'th', 'text': 'Header 2', 'children': [], 'level': 3}], 'level': 2}], 'level': 1}, {'type': 'tbody', 'text': 'Cell 1 Cell 2 Cell 3 Cell 4', 'children': [{'type': 'tr', 'text': 'Cell 1 Cell 2', 'children': [{'type': 'td', 'text': 'Cell 1', 'children': [], 'level': 3}, {'type': 'td', 'text': 'Cell 2', 'children': [], 'level': 3}], 'level': 2}, {'type': 'tr', 'text': 'Cell 3 Cell 4', 'children': [{'type': 'td', 'text': 'Cell 3', 'children': [], 'level': 3}, {'type': 'td', 'text': 'Cell 4', 'children': [], 'level': 3}], 'level': 2}], 'level': 1}], 'level': 0}]}, metadata={'meta_tags': {}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[])\n", "test_name": "test_table_processing", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: assert ('* Item 1' in ProcessedContent(url='', title='Untitled Document', content={'formatted_content': '', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'ul', 'text': 'Item 1 Item 2', 'children': [{'type': 'li', 'text': 'Item 1', 'children': [], 'level': 1}, {'type': 'li', 'text': 'Item 2', 'children': [], 'level': 1}], 'level': 0}, {'type': 'ol', 'text': 'First Second', 'children': [{'type': 'li', 'text': 'First', 'children': [], 'level': 1}, {'type': 'li', 'text': 'Second', 'children': [], 'level': 1}], 'level': 0}]}, metadata={'meta_tags': {}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]) or '- Item 1' in ProcessedContent(url='', title='Untitled Document', content={'formatted_content': '', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'ul', 'text': 'Item 1 Item 2', 'children': [{'type': 'li', 'text': 'Item 1', 'children': [], 'level': 1}, {'type': 'li', 'text': 'Item 2', 'children': [], 'level': 1}], 'level': 0}, {'type': 'ol', 'text': 'First Second', 'children': [{'type': 'li', 'text': 'First', 'children': [], 'level': 1}, {'type': 'li', 'text': 'Second', 'children': [], 'level': 1}], 'level': 0}]}, metadata={'meta_tags': {}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[]))\n", "test_name": "test_list_processing", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: assert 'Example Link' in ProcessedContent(url='', title='Untitled Document', content={'formatted_content': '[Example Link](https://example.com)\\nExample Link\\n[Relative Link](//relative/path)\\nRelative Link\\n[Section Link](#section)\\nSection Link', 'headings': [], 'links': [{'url': 'https://example.com/', 'text': 'Example Link', 'title': '', 'source': 'content'}, {'url': 'http://relative/path', 'text': 'Relative Link', 'title': '', 'source': 'content'}], 'code_blocks': [], 'structure': [{'type': 'a', 'text': 'Example Link', 'children': [], 'level': 0, 'href': 'https://example.com'}, {'type': 'a', 'text': 'Relative Link', 'children': [], 'level': 0, 'href': 'relative/path'}, {'type': 'a', 'text': 'Section Link', 'children': [], 'level': 0, 'href': '#section'}]}, metadata={'meta_tags': {}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[])\n", "test_name": "test_link_processing", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: assert 'Test Image' in ProcessedContent(url='', title='Untitled Document', content={'formatted_content': '![Test Image](//test.jpg)\\n![Remote Image](https://example.com/img.png)', 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'img', 'text': '', 'children': [], 'level': 0, 'src': 'test.jpg', 'alt': 'Test Image'}, {'type': 'img', 'text': '', 'children': [], 'level': 0, 'src': 'https://example.com/img.png', 'alt': 'Remote Image'}]}, metadata={'meta_tags': {}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': ['http://test.jpg/', 'https://example.com/img.png'], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[])\n", "test_name": "test_image_processing", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AssertionError: assert '# Main Title' in ProcessedContent(url='', title='Content Too Small', content={}, metadata={}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=['Content is below minimum size of 100 bytes'])\n", "test_name": "test_heading_hierarchy", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AssertionError: assert ('\u00a9' in ProcessedContent(url='', title='Content Too Small', content={}, metadata={}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=['Content is below minimum size of 100 bytes']) or '(c)' in ProcessedContent(url='', title='Content Too Small', content={}, metadata={}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=['Content is below minimum size of 100 bytes']))\n", "test_name": "test_special_characters", "rerun": "0"}, "8": {"status": "FAIL", "message": "   assert 'Valid content' in ProcessedContent(url='', title='Untitled Document', content={'formatted_content': \"alert('test');\\n.test { color: red; }\\nValid content\\nValid content\\nComment\", 'headings': [], 'links': [], 'code_blocks': [], 'structure': [{'type': 'div', 'text': 'Valid content', 'children': [{'type': 'p', 'text': 'Valid content', 'children': [], 'level': 1}], 'level': 0}]}, metadata={'meta_tags': {'description': 'Valid content'}, 'opengraph': {}, 'twitter': {}, 'schema': {}, 'dublin_core': {}, 'custom': {}}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=[])\n", "test_name": "test_content_cleanup", "rerun": "0"}, "9": {"status": "FAIL", "message": "   TypeError: object of type 'ProcessedContent' has no len()\n", "test_name": "test_performance", "rerun": "0"}, "10": {"status": "FAIL", "message": "       AssertionError: assert False\n        +  where False = isinstance(ProcessedContent(url='', title='Content Too Small', content={}, metadata={}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=['Content is below minimum size of 100 bytes']), str)\n", "test_name": "test_error_handling", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AttributeError: 'ContentProcessor' object has no attribute 'extract_metadata'\n", "test_name": "test_metadata_extraction", "rerun": "0"}, "12": {"status": "FAIL", "message": "           NameError: name 'idna' is not defined\n       ValueError: URL normalization failed: name 'idna' is not defined\n", "test_name": "test_url_processor_normalization", "rerun": "0"}, "13": {"status": "FAIL", "message": "               AttributeError: 'URLInfo' object has no attribute 'url_type'\n", "test_name": "test_url_type_detection", "rerun": "0"}, "14": {"status": "FAIL", "message": "   assert False\n    +  where False = URLInfo(raw_url='http://example.com', normalized_url='http://example.com', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_validation", "rerun": "0"}, "15": {"status": "FAIL", "message": "       pydantic_core._pydantic_core.ValidationError: 2 validation errors for URLInfo\n       raw_url\n         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n           For further information visit https://errors.pydantic.dev/2.10/v/string_type\n       normalized_url\n         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n           For further information visit https://errors.pydantic.dev/2.10/v/string_type\n", "test_name": "test_url_processor_edge_cases", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_url_processor_security", "rerun": "0"}, "17": {"status": "FAIL", "message": "       assert False\n        +  where False = URLInfo(raw_url='http://m\u00fcnchen.de', normalized_url='http://m\u00fcnchen.de', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_international", "rerun": "0"}, "18": {"status": "FAIL", "message": "       assert False\n        +  where False = URLInfo(raw_url='./page', normalized_url='./page', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_relative_paths", "rerun": "0"}, "19": {"status": "FAIL", "message": "               AttributeError: 'URLInfo' object has no attribute 'url_type'\n", "test_name": "test_url_processor_asset_types", "rerun": "0"}, "20": {"status": "FAIL", "message": "       assert False\n        +  where False = URLInfo(raw_url='http://example.com/?a=1&b=2', normalized_url='http://example.com/?a=1&b=2', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_query_handling", "rerun": "0"}, "21": {"status": "FAIL", "message": "       assert False == True\n        +  where False = URLInfo(raw_url='http://example.com', normalized_url='http://example.com', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_scheme_handling", "rerun": "0"}, "22": {"status": "FAIL", "message": "           assert False\n            +  where False = URLInfo(raw_url='http://example.com:80', normalized_url='http://example.com:80', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_port_handling", "rerun": "0"}, "23": {"status": "FAIL", "message": "           assert 'authentication' in \"url normalization failed: name 'idna' is not defined\"\n            +  where \"url normalization failed: name 'idna' is not defined\" = <built-in method lower of str object at 0x12ec21760>()\n            +    where <built-in method lower of str object at 0x12ec21760> = \"URL normalization failed: name 'idna' is not defined\".lower\n            +      where \"URL normalization failed: name 'idna' is not defined\" = URLInfo(raw_url='http://user:pass@example.com', normalized_url='http://user:pass@example.com', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").error_msg\n", "test_name": "test_url_processor_auth_handling", "rerun": "0"}, "24": {"status": "FAIL", "message": "           assert False\n            +  where False = any(<generator object test_url_processor_ip_handling.<locals>.<genexpr> at 0x12eae18c0>)\n", "test_name": "test_url_processor_ip_handling", "rerun": "0"}, "25": {"status": "FAIL", "message": "       assert False\n        +  where False = URLInfo(raw_url='http://example.com/caf\u00e9', normalized_url='http://example.com/caf\u00e9', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_unicode_normalization", "rerun": "0"}, "26": {"status": "FAIL", "message": "           assert 'domain' in \"url normalization failed: name 'idna' is not defined\"\n            +  where \"url normalization failed: name 'idna' is not defined\" = <built-in method lower of str object at 0x12ec22bf0>()\n            +    where <built-in method lower of str object at 0x12ec22bf0> = \"URL normalization failed: name 'idna' is not defined\".lower\n            +      where \"URL normalization failed: name 'idna' is not defined\" = URLInfo(raw_url='http://example', normalized_url='http://example', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").error_msg\n", "test_name": "test_url_processor_domain_validation", "rerun": "0"}, "27": {"status": "FAIL", "message": "       assert False == True\n        +  where False = URLInfo(raw_url='http://example.com/normal/path', normalized_url='http://example.com/normal/path', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_path_validation", "rerun": "0"}, "28": {"status": "FAIL", "message": "       assert False == True\n        +  where False = URLInfo(raw_url='http://example.com?normal=value', normalized_url='http://example.com?normal=value', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_query_validation", "rerun": "0"}, "29": {"status": "FAIL", "message": "       assert False\n        +  where False = URLInfo(raw_url='http://example.com#section', normalized_url='http://example.com#section', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_fragment_handling", "rerun": "0"}, "30": {"status": "FAIL", "message": "   NameError: name 'RateLimiter' is not defined\n", "test_name": "test_rate_limiter", "rerun": "0"}, "31": {"status": "FAIL", "message": "   NameError: name 'RetryStrategy' is not defined\n", "test_name": "test_retry_strategy", "rerun": "0"}, "32": {"status": "FAIL", "message": "   NameError: name 'calculate_similarity' is not defined\n", "test_name": "test_calculate_similarity", "rerun": "0"}, "33": {"status": "FAIL", "message": "   NameError: name 'generate_checksum' is not defined\n", "test_name": "test_generate_checksum", "rerun": "0"}, "34": {"status": "PASS", "message": "", "test_name": "test_timer", "rerun": "0"}, "35": {"status": "FAIL", "message": "   NameError: name 'setup_logging' is not defined\n", "test_name": "test_setup_logging", "rerun": "0"}, "36": {"status": "FAIL", "message": "           NameError: name 'idna' is not defined\n       ValueError: URL normalization failed: name 'idna' is not defined\n", "test_name": "test_url_processor_normalize_url", "rerun": "0"}, "37": {"status": "FAIL", "message": "   AssertionError: assert <URLType.EXTERNAL: 'external'> == <URLType.INTERNAL: 'internal'>\n    +  where <URLType.EXTERNAL: 'external'> = <bound method URLProcessor._determine_url_type of <class 'src.utils.helpers.URLProcessor'>>('/page', 'http://example.com')\n    +    where <bound method URLProcessor._determine_url_type of <class 'src.utils.helpers.URLProcessor'>> = <src.utils.helpers.URLProcessor object at 0x12ec9d610>._determine_url_type\n    +  and   <URLType.INTERNAL: 'internal'> = URLType.INTERNAL\n", "test_name": "test_url_processor_determine_type", "rerun": "0"}, "38": {"status": "FAIL", "message": "   NameError: name 'RateLimiter' is not defined\n", "test_name": "test_rate_limiter_wait", "rerun": "0"}, "39": {"status": "FAIL", "message": "   assert False\n    +  where False = URLInfo(raw_url='http://example.com/page', normalized_url='http://example.com/page', scheme='unknown', netloc='', path='', is_valid=False, error_msg=\"URL normalization failed: name 'idna' is not defined\").is_valid\n", "test_name": "test_url_processor_process_url", "rerun": "0"}, "40": {"status": "FAIL", "message": "       NameError: name 'time' is not defined\n", "test_name": "test_timer_duration", "rerun": "0"}}, "status": {"total_pass": 2, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 39, "total_error": 0}}, "3": {"suite_name": "tests/test_content_processor_edge.py", "tests": {"0": {"status": "FAIL", "message": "   Failed: DID NOT RAISE <class 'src.processors.content_processor.ContentProcessingError'>\n", "test_name": "test_empty_content", "rerun": "0"}, "1": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'processed_content'\n", "test_name": "test_malformed_html", "rerun": "0"}, "2": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'processed_content'\n", "test_name": "test_special_characters", "rerun": "0"}, "3": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'processed_content'\n", "test_name": "test_large_content", "rerun": "0"}, "4": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'processed_content'\n", "test_name": "test_nested_structures", "rerun": "0"}, "5": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'processed_content'\n", "test_name": "test_javascript_handling", "rerun": "0"}, "6": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'processed_content'\n", "test_name": "test_style_handling", "rerun": "0"}, "7": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'processed_content'\n", "test_name": "test_iframe_handling", "rerun": "0"}, "8": {"status": "FAIL", "message": "               AttributeError: 'ProcessedContent' object has no attribute 'processed_content'\n", "test_name": "test_form_handling", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 9, "total_error": 0}}, "4": {"suite_name": "tests/test_crawl4ai.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawl_basic", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_crawl_with_rate_limit", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_validate_content", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: assert ('content' in {'links': [], 'text': 'Example Domain\\nExample Domain\\nThis domain is for use in illustrative examples in documents. You may use this\\n    domain in literature without prior coordination or asking for permission.\\nMore information...', 'title': 'Example Domain'} or 'error' in {'links': [], 'text': 'Example Domain\\nExample Domain\\nThis domain is for use in illustrative examples in documents. You may use this\\n    domain in literature without prior coordination or asking for permission.\\nMore information...', 'title': 'Example Domain'})\n", "test_name": "test_process_content", "rerun": "0"}, "4": {"status": "FAIL", "message": "   assert None is not None\n", "test_name": "test_backend_selection", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_metrics", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AssertionError: assert 0 == 500\n    +  where 0 = CrawlResult(url='https://invalid-url-that-does-not-exist.com', content={}, metadata={}, status=0, error='Failed after 2 retries: Cannot connect to host invalid-url-that-does-not-exist.com:443 ssl:default [nodename nor servname provided, or not known]', timestamp=datetime.datetime(2024, 11, 29, 0, 0, 51, 412760)).status\n", "test_name": "test_error_handling", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_concurrent_requests", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_cleanup", "rerun": "0"}, "9": {"status": "FAIL", "message": "   Failed: DID NOT RAISE <class 'ValueError'>\n", "test_name": "test_crawl4ai_config_validation", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_ssl_context_configuration", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_custom_headers_handling", "rerun": "0"}, "12": {"status": "FAIL", "message": "   assert 200 == 403\n    +  where 200 = CrawlResult(url='https://other-domain.com/page', content={'html': '<!DOCTYPE html>\\n<html lang=\"ja\">\\n<head>\\n\\t<meta charset=\"UTF-8\">\\n\\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\">\\n\\t<title>\u4f9d\u983c\u5148\u306e\u9078\u3073\u65b9\u3084\u5370\u5237\u65b9\u6cd5\u306a\u3069\uff01\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306b\u95a2\u3059\u308b\u3088\u304f\u3042\u308b\u7591\u554f\u306b\u7b54\u3048\u307e\u3059\uff01\uff5c\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306b\u95a2\u3059\u308b\u3088\u304f\u3042\u308b\u7591\u554f\\u30002024\u5e7411\u6708\u66f4\u65b0</title>\\n\\t<meta name=\"description\" content=\"\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u3092\u59cb\u3081\u3066\u884c\u3046\u3068\u306a\u3063\u305f\u3068\u304d\u3001\u591a\u304f\u306e\u4eba\u3005\u306f\u4f55\u304b\u3089\u624b\u3092\u4ed8\u3051\u308b\u3079\u304d\u304b\u8ff7\u3046\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u3002\">\\n\\t<link href=\"https://fonts.googleapis.com/css?family=Sawarabi+Gothic\" rel=\"stylesheet\">\\n\\t<link rel=\"stylesheet\" href=\"css/app.css\">\\n</head>\\n<body>\\n<div id=\"site\">\\n<div id=\"header\" class=\"navbar\"><div class=\"container-fluid\">\\n\\t<a href=\"./\" class=\"navbar-brand\">\\n\\t\\t<img width=\"200px\" height=\"40px\" src=\"./img/logo.png\" alt=\"\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306b\u95a2\u3059\u308b\u3088\u304f\u3042\u308b\u7591\u554f\">\\n\\t</a>\\n\\t<button class=\"navbar-toggler collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navigation\" aria-controls=\"navigation\" aria-expanded=\"false\">\\n\\t\\t<span class=\"navbar-toggler-icon\"></span>\\n\\t\\t<span class=\"navbar-toggler-icon\"></span>\\n\\t\\t<span class=\"navbar-toggler-icon\"></span>\\n\\t</button>\\n</div></div>\\n<div id=\"navigation\" class=\"collapse navbar-collapse\"><div class=\"container-fluid\">\\n\\t<ul cla...n2024.08.22\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306e\u6700\u65b0\u30c8\u30ec\u30f3\u30c9\u3068\u74b0\u5883\u3078\u306e\u914d\u616e\\n2024.3.15\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u3092\u5909\u9769\u3059\u308b\u30c7\u30b8\u30bf\u30eb\u306e\u529b\uff1a\u512a\u4f4d\u6027\u3068\u53ef\u80fd\u6027\u306b\u8feb\u308b\\n2024.3.15\\n\u6280\u8853\u9769\u65b0\u304c\u3082\u305f\u3089\u3059\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306e\u9032\u5316\u3068\u30c7\u30b6\u30a4\u30f3\u306e\u5909\u9769\\n2024.3.15\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u304c\u98df\u54c1\u5b89\u5168\u6027\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u3068\u305d\u306e\u91cd\u8981\u6027\u306b\u3064\u3044\u3066\u306e\u8003\u5bdf\\n2024.3.15\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u30c7\u30b6\u30a4\u30f3\u306e\u30ab\u30e9\u30fc\u30b5\u30a4\u30a8\u30f3\u30b9\\n2024.3.15\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u65b9\u6cd5\uff5c\u30db\u30c3\u30c8\u30b9\u30bf\u30f3\u30d7\u306e\u7279\u5fb4\u306f\uff1f\\n2023.10.16\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306e\u898b\u7a4d\u3082\u308a\u6642\u306b\u6ce8\u610f\u3059\u3079\u304d\u30dd\u30a4\u30f3\u30c8\u306f\uff1f\\n2023.10.16\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306e\u652f\u6255\u3044\u65b9\u6cd5\u306b\u306f\u3069\u306e\u3088\u3046\u306a\u7a2e\u985e\u304c\u3042\u308b\uff1f\\n2023.10.16\\n\u904e\u53bb\u306b\u5236\u4f5c\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u73fe\u7269\u304b\u3089\u540c\u3058\u30c7\u30b6\u30a4\u30f3\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306f\u53ef\u80fd\uff1f\\n2023.10.16\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u3067\u3088\u304f\u3042\u308b\u5931\u6557\u306f\uff1f\\n2023.10.16\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306f\u3069\u306e\u3088\u3046\u306a\u7d20\u6750\u3067\u3082\u53ef\u80fd\uff1f\\n2023.05.24\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u65b9\u6cd5\uff5c\u30aa\u30d5\u30bb\u30c3\u30c8\u5370\u5237\u306e\u7279\u5fb4\\n2023.05.24\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u65b9\u6cd5\uff5c\u30b0\u30e9\u30d3\u30a2\u5370\u5237\u306e\u7279\u5fb4\\n2023.05.24\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u65b9\u6cd5\uff5c\u30d5\u30ec\u30ad\u30bd\u5370\u5237\u306e\u7279\u5fb4\\n2023.05.24\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u65b9\u6cd5\uff5c\u30b7\u30eb\u30af\u5370\u5237\u306e\u7279\u5fb4\\n2023.05.24\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306e\u4f9d\u983c\u5148\u3092\u9078\u3076\u969b\u306e\u30dd\u30a4\u30f3\u30c8\u306f\uff1f\\n2023.04.25\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u3092\u4f9d\u983c\u3059\u308b\u969b\u306e\u6d41\u308c\u306f\uff1f\\n2023.04.25\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306e\u7d0d\u671f\u306f\u3069\u308c\u304f\u3089\u3044\u304c\u76ee\u5b89\uff1f\\n2023.04.25\\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306f1\u679a\u304b\u3089\u306e\u5c0f\u30ed\u30c3\u30c8\u3067\u3082\u767a\u6ce8\u3067\u304d\u308b\uff1f\\n2023.04.25\\n\u00a9 2024 \u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306b\u95a2\u3059\u308b\u3088\u304f\u3042\u308b\u7591\u554f', 'links': [], 'title': '\u4f9d\u983c\u5148\u306e\u9078\u3073\u65b9\u3084\u5370\u5237\u65b9\u6cd5\u306a\u3069\uff01\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306b\u95a2\u3059\u308b\u3088\u304f\u3042\u308b\u7591\u554f\u306b\u7b54\u3048\u307e\u3059\uff01\uff5c\u30d1\u30c3\u30b1\u30fc\u30b8\u5370\u5237\u306b\u95a2\u3059\u308b\u3088\u304f\u3042\u308b\u7591\u554f\\u30002024\u5e7411\u6708\u66f4\u65b0'}, metadata={'headers': {'Date': 'Fri, 29 Nov 2024 00:01:05 GMT', 'Server': 'Apache/2.4.62 (Unix) OpenSSL/1.1.1k', 'X-Powered-By': 'PHP/7.4.33', 'Vary': 'Accept-Encoding,User-Agent', 'Content-Encoding': 'gzip', 'Content-Length': '15014', 'Content-Type': 'text/html; charset=UTF-8'}}, status=200, error=None, timestamp=datetime.datetime(2024, 11, 29, 0, 0, 51, 412760)).status\n", "test_name": "test_domain_filtering", "rerun": "0"}, "13": {"status": "FAIL", "message": "   assert 5 == 3\n    +  where 5 = len([CrawlResult(url='https://example.com/page0', content={'html': '<!doctype html>\\n<html>\\n<head>\\n    <title>Example Domain</title>\\n\\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\\n    <style type=\"text/css\">\\n    body {\\n        background-color: #f0f0f2;\\n        margin: 0;\\n        padding: 0;\\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\\n        \\n    }\\n    div {\\n        width: 600px;\\n        margin: 5em auto;\\n        padding: 2em;\\n        background-color: #fdfdff;\\n        border-radius: 0.5em;\\n        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n    }\\n    a:link, a:visited {\\n        color: #38488f;\\n        text-decoration: none;\\n    }\\n    @media (max-width: 700px) {\\n        div {\\n            margin: 0 auto;\\n            width: auto;\\n        }\\n    }\\n    </style>    \\n</head>\\n\\n<body>\\n<div>\\n    <h1>Example Domain</h1>\\n    <p>This domain is for use in illustrative examples in documents. You may use this\\n    domain in literature...        margin: 0 auto;\\n            width: auto;\\n        }\\n    }\\n    </style>    \\n</head>\\n\\n<body>\\n<div>\\n    <h1>Example Domain</h1>\\n    <p>This domain is for use in illustrative examples in documents. You may use this\\n    domain in literature without prior coordination or asking for permission.</p>\\n    <p><a href=\"https://www.iana.org/domains/example\">More information...</a></p>\\n</div>\\n</body>\\n</html>\\n', 'text': 'Example Domain\\nExample Domain\\nThis domain is for use in illustrative examples in documents. You may use this\\n    domain in literature without prior coordination or asking for permission.\\nMore information...', 'links': [], 'title': 'Example Domain'}, metadata={'headers': {'Content-Encoding': 'gzip', 'Accept-Ranges': 'bytes', 'Age': '499607', 'Cache-Control': 'max-age=604800', 'Content-Type': 'text/html', 'Date': 'Fri, 29 Nov 2024 00:01:09 GMT', 'Etag': '\"1088432560+gzip\"', 'Expires': 'Fri, 06 Dec 2024 00:01:09 GMT', 'Last-Modified': 'Sat, 12 Oct 2024 03:26:51 GMT', 'Server': 'ECAcc (dcd/7D44)', 'Vary': 'Accept-Encoding', 'X-Cache': '404-HIT', 'Content-Length': '648'}}, status=404, error=None, timestamp=datetime.datetime(2024, 11, 29, 0, 0, 51, 412760))])\n", "test_name": "test_url_queue_management", "rerun": "0"}}, "status": {"total_pass": 8, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 6, "total_error": 0}}, "5": {"suite_name": "tests/test_crawl4ai_extended.py", "tests": {"0": {"status": "FAIL", "message": "   pydantic_core._pydantic_core.ValidationError: 6 validation errors for URLInfo\n   raw_url\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   normalized_url\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   scheme\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   netloc\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   path\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n   is_valid\n     Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n       For further information visit https://errors.pydantic.dev/2.10/v/missing\n", "test_name": "test_crawl_with_urlinfo", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AttributeError: 'NoneType' object has no attribute 'requests'\n", "test_name": "test_crawl_depth_first", "rerun": "0"}, "2": {"status": "FAIL", "message": "   assert False\n    +  where False = all(<generator object test_rate_limiting_precision.<locals>.<genexpr> at 0x12edb1f20>)\n", "test_name": "test_rate_limiting_precision", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_concurrent_request_limit", "rerun": "0"}, "4": {"status": "FAIL", "message": "           pydantic_core._pydantic_core.ValidationError: 6 validation errors for URLInfo\n           raw_url\n             Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n               For further information visit https://errors.pydantic.dev/2.10/v/missing\n           normalized_url\n             Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n               For further information visit https://errors.pydantic.dev/2.10/v/missing\n           scheme\n             Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n               For further information visit https://errors.pydantic.dev/2.10/v/missing\n           netloc\n             Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n               For further information visit https://errors.pydantic.dev/2.10/v/missing\n           path\n             Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n               For further information visit https://errors.pydantic.dev/2.10/v/missing\n           is_valid\n             Field required [type=missing, input_value={'url': 'https://example.com'}, input_type=dict]\n               For further information visit https://errors.pydantic.dev/2.10/v/missing\n", "test_name": "test_url_normalization", "rerun": "0"}, "5": {"status": "FAIL", "message": "           assert 0 == 500\n            +  where 0 = CrawlResult(url='https://nonexistent.example.com', content={}, metadata={}, status=0, error=\"Failed after 2 retries: 'coroutine' object does not support the asynchronous context manager protocol\", timestamp=datetime.datetime(2024, 11, 29, 0, 0, 51, 412760)).status\n", "test_name": "test_error_propagation", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AttributeError: 'NoneType' object has no attribute 'get'\n", "test_name": "test_retry_behavior", "rerun": "0"}, "7": {"status": "FAIL", "message": "   assert None is not None\n", "test_name": "test_metrics_accuracy", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AttributeError: 'NoneType' object has no attribute 'closed'\n", "test_name": "test_resource_cleanup", "rerun": "0"}, "9": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_initialization[https://docs.python.org/3/-expected0]", "rerun": "0"}, "10": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_initialization[https://docs.python.org-expected1]", "rerun": "0"}, "11": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_initialization[invalid-url-expected2]", "rerun": "0"}, "12": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_hashable", "rerun": "0"}, "13": {"status": "FAIL", "message": "   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n", "test_name": "test_url_info_immutable", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 13, "total_error": 0}}, "6": {"suite_name": "tests/test_crawler.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_crawler_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert not True\n    +  where True = <bound method DocumentationCrawler._should_crawl_url of <src.crawler.DocumentationCrawler object at 0x12ec07a10>>('https://example.com/excluded/page', CrawlTarget(url='https://example.com/doc1', depth=2, follow_external=False, content_types=['text/html'], exclude_patterns=['/excluded/'], required_patterns=['/doc'], max_pages=10, allowed_paths=[], excluded_paths=[]))\n    +    where <bound method DocumentationCrawler._should_crawl_url of <src.crawler.DocumentationCrawler object at 0x12ec07a10>> = <src.crawler.DocumentationCrawler object at 0x12ec07a10>._should_crawl_url\n", "test_name": "test_url_filtering", "rerun": "0"}, "2": {"status": "FAIL", "message": "   TypeError: DocumentationCrawler._process_url() takes 4 positional arguments but 5 were given\n", "test_name": "test_single_url_processing", "rerun": "0"}, "3": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 888480), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0).pages_crawled\n    +    where CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 888480), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0) = CrawlResult(target=CrawlTarget(url='https://example.com/doc2', depth=2, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=['/3/'], max_pages=10, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 888480), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[QualityIssue(type='error', severity='high', message=\"'Timer' object does not support the asynchronous context manager protocol\", rule_name='general', location='', metadata={})], metrics={}).stats\n", "test_name": "test_depth_limited_crawling", "rerun": "0"}, "4": {"status": "FAIL", "message": "       TypeError: DocumentationCrawler._process_url() takes 4 positional arguments but 5 were given\n", "test_name": "test_concurrent_processing", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_rate_limiting", "rerun": "0"}, "6": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 899494), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0).failed_crawls\n    +    where CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 899494), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0) = CrawlResult(target=CrawlTarget(url='https://invalid.example.com', depth=1, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=['/3/'], max_pages=1, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 899494), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[QualityIssue(type='error', severity='high', message=\"'Timer' object does not support the asynchronous context manager protocol\", rule_name='general', location='', metadata={})], metrics={}).stats\n", "test_name": "test_error_handling", "rerun": "0"}, "7": {"status": "FAIL", "message": "   assert 0 == 1\n    +  where 0 = CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 903851), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0).successful_crawls\n    +    where CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 903851), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0) = CrawlResult(target=CrawlTarget(url='https://example.com/doc2', depth=1, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=['/3/'], max_pages=1, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 903851), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[QualityIssue(type='error', severity='high', message=\"'Timer' object does not support the asynchronous context manager protocol\", rule_name='general', location='', metadata={})], metrics={}).stats\n", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "8": {"status": "FAIL", "message": "   assert None is not None\n    +  where None = <src.crawler.DocumentationCrawler object at 0x12ec735d0>.client_session\n", "test_name": "test_cleanup", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_max_pages_limit", "rerun": "0"}, "10": {"status": "FAIL", "message": "   assert None is not None\n    +  where None = CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 913815), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0).end_time\n    +    where CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 913815), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0) = CrawlResult(target=CrawlTarget(url='https://example.com/doc2', depth=1, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=['/3/'], max_pages=3, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 9, 913815), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[QualityIssue(type='error', severity='high', message=\"'Timer' object does not support the asynchronous context manager protocol\", rule_name='general', location='', metadata={})], metrics={}).stats\n", "test_name": "test_statistics_tracking", "rerun": "0"}, "11": {"status": "FAIL", "message": "   NameError: name 'ProjectType' is not defined\n", "test_name": "test_project_type_enum", "rerun": "0"}, "12": {"status": "FAIL", "message": "   NameError: name 'ProjectIdentity' is not defined\n", "test_name": "test_project_identity", "rerun": "0"}, "13": {"status": "FAIL", "message": "   NameError: name 'ProjectIdentifier' is not defined\n", "test_name": "test_project_identifier", "rerun": "0"}, "14": {"status": "FAIL", "message": "   NameError: name 'DUCKDUCKGO_AVAILABLE' is not defined\n", "test_name": "test_duckduckgo_search", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AttributeError: 'DocumentationCrawler' object has no attribute '_discover_urls'\n", "test_name": "test_url_discovery", "rerun": "0"}, "16": {"status": "FAIL", "message": "   AttributeError: 'ProjectIdentifier' object has no attribute '_identify_project_type'\n", "test_name": "test_project_type_detection", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 14, "total_error": 0}}, "7": {"suite_name": "tests/test_crawler_advanced.py", "tests": {"0": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5079398288'>\nmock_content_processor = <AsyncMock id='5082445840'>\nmock_quality_checker = <AsyncMock id='5080370128'>\nmock_document_organizer = <AsyncMock id='5080548816'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12ed44d10>\nbackend = <AsyncMock spec='CrawlerBackend' id='5079398288'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_basic_crawl", "rerun": "0"}, "1": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5079870672'>\nmock_content_processor = <AsyncMock id='5080533328'>\nmock_quality_checker = <AsyncMock id='5081700048'>\nmock_document_organizer = <AsyncMock id='5081320272'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12ecb11d0>\nbackend = <AsyncMock spec='CrawlerBackend' id='5079870672'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_failed_crawl", "rerun": "0"}, "2": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5080747664'>\nmock_content_processor = <AsyncMock id='5080420944'>\nmock_quality_checker = <AsyncMock id='5082890960'>\nmock_document_organizer = <AsyncMock id='5082370704'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12edff6d0>\nbackend = <AsyncMock spec='CrawlerBackend' id='5080747664'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_retry_mechanism", "rerun": "0"}, "3": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5082416336'>\nmock_content_processor = <AsyncMock id='5079526864'>\nmock_quality_checker = <AsyncMock id='5083072144'>\nmock_document_organizer = <AsyncMock id='5080325712'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12ee40350>\nbackend = <AsyncMock spec='CrawlerBackend' id='5082416336'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_rate_limiting", "rerun": "0"}, "4": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5080751952'>\nmock_content_processor = <AsyncMock id='5080096016'>\nmock_quality_checker = <AsyncMock id='5080474704'>\nmock_document_organizer = <AsyncMock id='5080222608'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12ece2510>\nbackend = <AsyncMock spec='CrawlerBackend' id='5080751952'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_content_processing", "rerun": "0"}, "5": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5079902992'>\nmock_content_processor = <AsyncMock id='5081584912'>\nmock_quality_checker = <AsyncMock id='5080898128'>\nmock_document_organizer = <AsyncMock id='5081648272'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12ed15350>\nbackend = <AsyncMock spec='CrawlerBackend' id='5079902992'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_quality_checking", "rerun": "0"}, "6": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5080758032'>\nmock_content_processor = <AsyncMock id='5082900176'>\nmock_quality_checker = <AsyncMock id='5079989328'>\nmock_document_organizer = <AsyncMock id='5080422992'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12ece3210>\nbackend = <AsyncMock spec='CrawlerBackend' id='5080758032'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_resource_cleanup", "rerun": "0"}, "7": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5079945488'>\nmock_content_processor = <AsyncMock id='5081339920'>\nmock_quality_checker = <AsyncMock id='5082142800'>\nmock_document_organizer = <AsyncMock id='5081945424'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12ee07450>\nbackend = <AsyncMock spec='CrawlerBackend' id='5079945488'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_concurrent_requests", "rerun": "0"}, "8": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5081423760'>\nmock_content_processor = <AsyncMock id='5080230096'>\nmock_quality_checker = <AsyncMock id='5080224592'>\nmock_document_organizer = <AsyncMock id='5081236304'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12eb1ebd0>\nbackend = <AsyncMock spec='CrawlerBackend' id='5081423760'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_url_normalization", "rerun": "0"}, "9": {"status": "ERROR", "message": "mock_backend = <AsyncMock spec='CrawlerBackend' id='5080372880'>\nmock_content_processor = <AsyncMock id='5082984016'>\nmock_quality_checker = <AsyncMock id='5082049744'>\nmock_document_organizer = <AsyncMock id='5081814864'>\n\n    @pytest.fixture\n    def crawler(mock_backend, mock_content_processor, mock_quality_checker, mock_document_organizer):\n        crawler = DocumentationCrawler(\n            content_processor=mock_content_processor,\n            quality_checker=mock_quality_checker,\n            document_organizer=mock_document_organizer\n        )\n>       crawler.backend_selector.register_backend(mock_backend, None)\n\ntests/test_crawler_advanced.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.backends.selector.BackendSelector object at 0x12efce250>\nbackend = <AsyncMock spec='CrawlerBackend' id='5080372880'>, criteria = None\n\n    def register_backend(\n        self,\n        backend: CrawlerBackend,\n        criteria: BackendCriteria\n    ) -> None:\n        \"\"\"\n        Register a crawler backend with selection criteria.\n    \n        Args:\n            backend: The crawler backend instance\n            criteria: Selection criteria for the backend\n    \n        Raises:\n            ValueError: If backend name is not set or if criteria is invalid\n        \"\"\"\n        if not hasattr(backend, 'name') or not backend.name:\n>           raise ValueError(\"Backend must have a name\")\nE           ValueError: Backend must have a name\n\nsrc/backends/selector.py:87: ValueError\n", "test_name": "test_crawler_error_handling", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 10}}, "8": {"suite_name": "tests/test_document_processor.py", "tests": {"0": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_basic_document_processing", "rerun": "0"}, "1": {"status": "FAIL", "message": "       AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_empty_document", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_no_title", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_multiple_titles", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_complex_content", "rerun": "0"}, "5": {"status": "FAIL", "message": "       AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_invalid_url", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_frames", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_scripts", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_meta_redirects", "rerun": "0"}, "9": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_base_tag", "rerun": "0"}, "10": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_special_content", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_lists", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_tables", "rerun": "0"}, "13": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_forms", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_semantic_elements", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_media_elements", "rerun": "0"}, "16": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_interactive_elements", "rerun": "0"}, "17": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_embedded_content", "rerun": "0"}, "18": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_ruby_annotations", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AttributeError: 'DocumentProcessor' object has no attribute 'process_document'\n", "test_name": "test_document_with_math_content", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 20, "total_error": 0}}, "9": {"suite_name": "tests/test_gui.py", "tests": {"0": {"status": "FAIL", "message": "       jinja2.exceptions.TemplateNotFound: index.html\n", "test_name": "test_home_page", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert 'error' == 'success'\n     \n     - success\n     + error\n", "test_name": "test_crawl_request", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_connection_manager", "rerun": "0"}, "3": {"status": "FAIL", "message": "   NameError: name 'QualityIssue' is not defined\n", "test_name": "test_crawler_thread", "rerun": "0"}, "4": {"status": "FAIL", "message": "   NameError: name 'ResultsViewer' is not defined\n", "test_name": "test_results_viewer", "rerun": "0"}, "5": {"status": "FAIL", "message": "       AssertionError: assert False\n        +  where False = <bound method Path.exists of PosixPath('/private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_save_results0/output/content.json')>()\n        +    where <bound method Path.exists of PosixPath('/private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_save_results0/output/content.json')> = (PosixPath('/private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_save_results0/output') / 'content.json').exists\n", "test_name": "test_save_results", "rerun": "0"}, "6": {"status": "FAIL", "message": "       AssertionError: Expected 'critical' to have been called once. Called 0 times.\n       AssertionError: Expected 'critical' to have been called once. Called 0 times.\n", "test_name": "test_error_handling", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 6, "total_error": 0}}, "10": {"suite_name": "tests/test_helpers.py", "tests": {"0": {"status": "FAIL", "message": "           NameError: name 'idna' is not defined\n       ValueError: URL normalization failed: name 'idna' is not defined\n", "test_name": "test_url_processor", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AttributeError: 'RateLimiter' object has no attribute 'delay'\n", "test_name": "test_rate_limiter", "rerun": "0"}, "2": {"status": "FAIL", "message": "   TypeError: RetryStrategy.__init__() got an unexpected keyword argument 'base_delay'\n", "test_name": "test_retry_strategy", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AttributeError: 'Timer' object has no attribute 'elapsed'\n", "test_name": "test_timer", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: assert 0.7777777777777778 > 0.8\n    +  where 0.7777777777777778 = calculate_similarity('This is a test document about Python programming', 'This is a test document about Python coding')\n", "test_name": "test_similarity_calculation", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_checksum_generation", "rerun": "0"}, "6": {"status": "FAIL", "message": "       AssertionError: assert None == <MagicMock name='getLogger()' id='5081663120'>\n", "test_name": "test_logging_setup", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 6, "total_error": 0}}, "11": {"suite_name": "tests/test_html_processor.py", "tests": {"0": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_basic_html_processing", "rerun": "0"}, "1": {"status": "FAIL", "message": "       AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_empty_html", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_malformed_html", "rerun": "0"}, "3": {"status": "FAIL", "message": "       AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_html_encoding", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_html_entities", "rerun": "0"}, "5": {"status": "FAIL", "message": "       AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_doctype_handling", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_comment_handling", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_script_handling", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_style_handling", "rerun": "0"}, "9": {"status": "FAIL", "message": "           AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_meta_charset_handling", "rerun": "0"}, "10": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_iframe_handling", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_form_handling", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_svg_handling", "rerun": "0"}, "13": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_math_ml_handling", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_custom_elements", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_data_attributes", "rerun": "0"}, "16": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_conditional_comments", "rerun": "0"}, "17": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_template_handling", "rerun": "0"}, "18": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_picture_source_handling", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AttributeError: 'HTMLProcessor' object has no attribute 'process_html'\n", "test_name": "test_unicode_handling", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 20, "total_error": 0}}, "12": {"suite_name": "tests/test_integration.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 0 > 0\n    +  where 0 = CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 12, 168975), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0).pages_crawled\n    +    where CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 12, 168975), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0) = CrawlResult(target=CrawlTarget(url='file:///private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_full_site_crawl0/test_docs/index.html', depth=2, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=['.html'], max_pages=10, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 12, 168975), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[QualityIssue(type='error', severity='high', message='Could not find documentation URL for package: file:///private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_full_site_crawl0/test_docs/index.html', rule_name='general', location='', metadata={})], metrics={}).stats\n", "test_name": "test_full_site_crawl", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert 0 == 1\n    +  where 0 = len([])\n    +    where [] = CrawlResult(target=CrawlTarget(url='file:///private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_content_processing_pipeli0/test_docs/guide.html', depth=1, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=['/3/'], max_pages=1, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 12, 660422), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[QualityIssue(type='error', severity='high', message='Could not find documentation URL for package: file:///private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_content_processing_pipeli0/test_docs/guide.html', rule_name='general', location='', metadata={})], metrics={}).documents\n", "test_name": "test_content_processing_pipeline", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 0 > 0\n    +  where 0 = len({})\n    +    where {} = CrawlResult(target=CrawlTarget(url='file:///private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_quality_checks0/test_docs/api.html', depth=1, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=['/3/'], max_pages=1, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 13, 176375), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[QualityIssue(type='error', severity='high', message='Could not find documentation URL for package: file:///private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_quality_checks0/test_docs/api.html', rule_name='general', location='', metadata={})], metrics={}).metrics\n", "test_name": "test_quality_checks", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_document_organization", "rerun": "0"}, "4": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = len([])\n", "test_name": "test_search_functionality", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: assert 0 > 0\n    +  where 0 = CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 14, 674932), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0).successful_crawls\n    +    where CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 14, 674932), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0) = CrawlResult(target=CrawlTarget(url='file:///private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_error_handling_and_recove0/test_docs/index.html', depth=2, follow_external=False, content_types=['text/html'], exclude_patterns=[], required_patterns=['.html', '.invalid'], max_pages=10, allowed_paths=[], excluded_paths=[]), stats=CrawlStats(start_time=datetime.datetime(2024, 11, 29, 0, 3, 14, 674932), end_time=None, pages_crawled=0, successful_crawls=0, failed_crawls=0, total_time=0.0, average_time_per_page=0.0, quality_issues=0, bytes_processed=0), documents=[], issues=[QualityIssue(type='error', severity='high', message='Could not find documentation URL for package: file:///private/var/folders/c6/0glsj2qj54s2pr7y8ncq92l40000gn/T/pytest-of-alex/pytest-138/test_error_handling_and_recove0/test_docs/index.html', rule_name='general', location='', metadata={})], metrics={}).stats\n", "test_name": "test_error_handling_and_recovery", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}}, "13": {"suite_name": "tests/test_integration_advanced.py", "tests": {"0": {"status": "FAIL", "message": "   TypeError: Crawl4AIBackend.__init__() got an unexpected keyword argument 'rate_limiter'\n", "test_name": "test_full_crawl_pipeline", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AttributeError: 'DocumentationCrawler' object has no attribute 'backend'\n", "test_name": "test_error_handling_integration", "rerun": "0"}, "2": {"status": "FAIL", "message": "   TypeError: Crawl4AIBackend.__init__() got an unexpected keyword argument 'rate_limiter'\n", "test_name": "test_rate_limiting_integration", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AttributeError: 'DocumentationCrawler' object has no attribute 'backend'\n", "test_name": "test_content_processing_integration", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 4, "total_error": 0}}, "14": {"suite_name": "tests/test_link_processor.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'https://example.com' in [{'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_basic_link_extraction", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_empty_document", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 1 == 0\n    +  where 1 = len([{'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}])\n", "test_name": "test_malformed_links", "rerun": "0"}, "3": {"status": "FAIL", "message": "   TypeError: unhashable type: 'dict'\n", "test_name": "test_duplicate_links", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: assert 'https://base.com/page.html' in [{'fragment': 'section', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': 'section', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': 'top', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': 'bottom', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_fragment_handling", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: assert 'https://base.com/?param=value' in [{'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_query_params", "rerun": "0"}, "6": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_special_characters.<locals>.<genexpr> at 0x12ee27370>)\n", "test_name": "test_special_characters", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AssertionError: assert 'https://base.com/outer' in [{'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_nested_links", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_invalid_base_url", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_data_urls", "rerun": "0"}, "10": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_unicode_urls.<locals>.<genexpr> at 0x12ef4f510>)\n", "test_name": "test_unicode_urls", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AssertionError: assert 'https://example.com' in [{'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_protocol_relative_urls", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AssertionError: assert 'https://different-base.com/subdir/relative' in [{'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_base_tag_handling", "rerun": "0"}, "13": {"status": "FAIL", "message": "   AssertionError: assert 'https://base.com/path' in [{'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_malformed_base_tags", "rerun": "0"}, "14": {"status": "FAIL", "message": "E   AttributeError: 'dict' object has no attribute 'startswith'\n", "test_name": "test_link_attributes", "rerun": "0"}, "15": {"status": "FAIL", "message": "   AssertionError: assert 'http://example.com' in [{'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_link_schemes", "rerun": "0"}, "16": {"status": "FAIL", "message": "   AssertionError: assert 'https://base.com/other' in [{'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_url_normalization", "rerun": "0"}, "17": {"status": "FAIL", "message": "   AssertionError: assert 'https://base.com/PATH' in [{'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': False, 'is_relative': False, 'is_valid': True, ...}, {'fragment': '', 'is_internal': True, 'is_relative': False, 'is_valid': True, ...}]\n", "test_name": "test_url_case_sensitivity", "rerun": "0"}, "18": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_url_encoding_handling.<locals>.<genexpr> at 0x12ed5adc0>)\n", "test_name": "test_url_encoding_handling", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 16, "total_error": 0}}, "15": {"suite_name": "tests/test_metadata_extraction.py", "tests": {"0": {"status": "FAIL", "message": "   KeyError: 'title'\n", "test_name": "test_basic_metadata_extraction", "rerun": "0"}, "1": {"status": "FAIL", "message": "   KeyError: 'title'\n", "test_name": "test_metadata_fallbacks", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 'description' in {}\n", "test_name": "test_empty_metadata", "rerun": "0"}, "3": {"status": "FAIL", "message": "   KeyError: 'description'\n", "test_name": "test_mixed_meta_properties", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_duplicate_meta_tags", "rerun": "0"}, "5": {"status": "FAIL", "message": "   KeyError: 'keywords'\n", "test_name": "test_keyword_generation", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_special_characters_metadata", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AssertionError: assert 200 <= 103\n    +  where 200 = len('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')\n", "test_name": "test_long_content_truncation", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AssertionError: assert '' != ''\n", "test_name": "test_malformed_meta_tags", "rerun": "0"}, "9": {"status": "FAIL", "message": "   assert '<script>' not in \"Test <scrip...t')</script>\"\n     \n     '<script>' is contained here:\n       Test <script>alert('test')</script>\n     ?      ++++++++\n", "test_name": "test_html_entities_in_meta", "rerun": "0"}, "10": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_nested_content_keyword_generation.<locals>.<genexpr> at 0x13a3f03c0>)\n", "test_name": "test_nested_content_keyword_generation", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_multilingual_content", "rerun": "0"}, "12": {"status": "FAIL", "message": "   AssertionError: assert None == 'Schema Title'\n    +  where None = <built-in method get of dict object at 0x13f306880>('name')\n    +    where <built-in method get of dict object at 0x13f306880> = {}.get\n", "test_name": "test_schema_org_metadata", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_meta_robots_handling", "rerun": "0"}, "14": {"status": "FAIL", "message": "   AssertionError: assert 'keywords' in {'description': 'Regular content'}\n", "test_name": "test_json_ld_fallback", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_relative_urls_in_meta", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_whitespace_handling", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_unicode_metadata", "rerun": "0"}, "18": {"status": "FAIL", "message": "   AssertionError: assert '<p>' not in '<p>Test <st...ing</em></p>'\n     \n     '<p>' is contained here:\n       <p>Test <strong>description</strong> with <em>formatting</em></p>\n     ? +++\n", "test_name": "test_nested_html_metadata", "rerun": "0"}, "19": {"status": "PASS", "message": "", "test_name": "test_mixed_case_metadata", "rerun": "0"}, "20": {"status": "FAIL", "message": "   AssertionError: assert 'python' in ['python python python', 'testing testing']\n", "test_name": "test_duplicate_keywords_handling", "rerun": "0"}, "21": {"status": "PASS", "message": "", "test_name": "test_special_punctuation_handling", "rerun": "0"}, "22": {"status": "FAIL", "message": "   KeyError: 'description'\n", "test_name": "test_schema_metadata_priority", "rerun": "0"}, "23": {"status": "FAIL", "message": "   AssertionError: assert 0 >= 3\n    +  where 0 = len(({'machine learning and neural networks'} & {'artificial', 'intelligence', 'learning', 'machine', 'neural', 'processing'}))\n    +    where {'machine learning and neural networks'} = set(['machine learning and neural networks'])\n", "test_name": "test_keyword_relevance", "rerun": "0"}, "24": {"status": "FAIL", "message": "   AssertionError: assert '' != ''\n    +  where '' = <built-in method strip of str object at 0x13a607cb0>()\n    +    where <built-in method strip of str object at 0x13a607cb0> = '   '.strip\n", "test_name": "test_empty_content_handling", "rerun": "0"}, "25": {"status": "FAIL", "message": "   AssertionError: assert '<p>' not in '<p>Unclosed...text</b></p>'\n     \n     '<p>' is contained here:\n       <p>Unclosed tag <b>Bold text</b></p>\n     ? +++\n", "test_name": "test_safe_content_edge_cases", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_invalid_meta_tags", "rerun": "0"}, "27": {"status": "FAIL", "message": "   AssertionError: assert 4 == 0\n    +  where 4 = len({'': 'Missing type', 'description': '    ', 'title': '', 'type:invalid': 'Invalid structure'})\n", "test_name": "test_malformed_opengraph", "rerun": "0"}, "28": {"status": "FAIL", "message": "   assert '<script>' not in \"<script>ale...s')</script>\"\n     \n     '<script>' is contained here:\n       <script>alert('xss')</script>\n     ? ++++++++\n", "test_name": "test_xss_prevention", "rerun": "0"}, "29": {"status": "PASS", "message": "", "test_name": "test_extreme_content_lengths", "rerun": "0"}, "30": {"status": "FAIL", "message": "   AssertionError: assert 'Standard description' in 'Mixed case description'\n", "test_name": "test_mixed_metadata_formats", "rerun": "0"}, "31": {"status": "FAIL", "message": "   AssertionError: assert ('charset' in {'format-detection': 'telephone=no', 'generator': 'WordPress 5.8', 'robots': 'noindex, nofollow', 'viewport': 'width=device-width, initial-scale=1'} or 'utf-8' in {'format-detection': 'telephone=no', 'generator': 'WordPress 5.8', 'robots': 'noindex, nofollow', 'viewport': 'width=device-width, initial-scale=1'})\n", "test_name": "test_special_meta_tags", "rerun": "0"}, "32": {"status": "FAIL", "message": "   KeyError: 'description'\n", "test_name": "test_metadata_inheritance", "rerun": "0"}, "33": {"status": "PASS", "message": "", "test_name": "test_language_metadata", "rerun": "0"}, "34": {"status": "PASS", "message": "", "test_name": "test_empty_document", "rerun": "0"}, "35": {"status": "PASS", "message": "", "test_name": "test_malformed_html_structure", "rerun": "0"}, "36": {"status": "PASS", "message": "", "test_name": "test_nested_meta_tags", "rerun": "0"}, "37": {"status": "FAIL", "message": "   AssertionError: assert 'Test with spaces' in 'Test%20with%20spaces'\n", "test_name": "test_encoded_content", "rerun": "0"}, "38": {"status": "PASS", "message": "", "test_name": "test_json_ld_metadata", "rerun": "0"}, "39": {"status": "FAIL", "message": "   assert 'Dublin Core Title' in \"{'description': 'RDFa Description', 'keywords': 'RDFa Title'}\"\n    +  where \"{'description': 'RDFa Description', 'keywords': 'RDFa Title'}\" = str({'description': 'RDFa Description', 'keywords': 'RDFa Title'})\n", "test_name": "test_rdfa_metadata", "rerun": "0"}, "40": {"status": "FAIL", "message": "   AssertionError: assert 'Microdata' in '{}'\n    +  where '{}' = str({})\n", "test_name": "test_microdata_metadata", "rerun": "0"}, "41": {"status": "FAIL", "message": "   AssertionError: assert 'refresh' in '{}'\n    +  where '{}' = str({})\n", "test_name": "test_meta_refresh_handling", "rerun": "0"}, "42": {"status": "PASS", "message": "", "test_name": "test_invalid_charset_handling", "rerun": "0"}}, "status": {"total_pass": 17, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 26, "total_error": 0}}, "16": {"suite_name": "tests/test_organizer.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_document_organizer_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AssertionError: assert 0 == 1\n    +  where 0 = len([])\n    +    where [] = DocumentMetadata(title='Test Document', url='https://example.com/doc', category='reference', tags=['document', 'version', 'test'], versions=[], references={'internal': [], 'external': [], 'code': []}, index_terms=['document', 'test'], last_updated=datetime.datetime(2024, 11, 29, 2, 3, 15, 415528)).versions\n", "test_name": "test_document_version_management", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 'example' is None\n    +  where 'example' = DocumentMetadata(title='Miscellaneous', url='https://example.com/misc', category='example', tags=['random', 'content', 'miscellaneous'], versions=[], references={'internal': [], 'external': [], 'code': []}, index_terms=['miscellaneous'], last_updated=datetime.datetime(2024, 11, 29, 2, 3, 15, 418967)).category\n", "test_name": "test_document_categorization", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_reference_extraction", "rerun": "0"}, "4": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = len([])\n", "test_name": "test_search_functionality", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_collection_management", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_document_similarity", "rerun": "0"}, "7": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = len([])\n", "test_name": "test_version_tracking", "rerun": "0"}, "8": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_search_index_generation.<locals>.<genexpr> at 0x13a3f3ca0>)\n", "test_name": "test_search_index_generation", "rerun": "0"}}, "status": {"total_pass": 4, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}}, "17": {"suite_name": "tests/test_processor.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_content_processor_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   TypeError: ContentProcessor._clean_text() got an unexpected keyword argument 'clean_regex'\n", "test_name": "test_clean_text_processing", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert '' == 'text'\n     \n     - text\n", "test_name": "test_code_language_detection", "rerun": "0"}, "3": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = len([])\n", "test_name": "test_code_block_processing", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_link_processing", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: assert 'Test description' == 'Sample description'\n     \n     - Sample description\n     ? ^^^^^\n     + Test description\n     ? ^ ++\n", "test_name": "test_metadata_extraction", "rerun": "0"}, "6": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = len([])\n", "test_name": "test_asset_collection", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AssertionError: assert 'Test Document' == 'Sample Document'\n     \n     - Sample Document\n     + Test Document\n", "test_name": "test_full_content_processing", "rerun": "0"}, "8": {"status": "FAIL", "message": "   AssertionError: assert 'Content exceeds maximum size limit' in ['Content exceeds maximum size limit of 10000 bytes']\n    +  where ['Content exceeds maximum size limit of 10000 bytes'] = ProcessedContent(url='https://example.com', title='Content Too Large', content={}, metadata={}, assets={'images': [], 'stylesheets': [], 'scripts': [], 'media': [], 'icons': [], 'embeds': [], 'plugins': [], 'documents': []}, errors=['Content exceeds maximum size limit of 10000 bytes']).errors\n", "test_name": "test_content_size_limits", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_malformed_html_handling", "rerun": "0"}, "10": {"status": "FAIL", "message": "   assert 'alert' not in \"{'formatted...level': 0}]}\"\n     \n     'alert' is contained here:\n       {'formatted_content': \"alert('test');\\nbody { color: red; }\\n# Test\\nTest\\nconsole.log('test');\", 'headings': [{'level': 1, 'text': 'Test', 'id': '', 'children': []}], 'links': [], 'code_blocks': [], 'structure': [{'type': 'html', 'text': 'Test', 'children': [{'type': 'head', 'text': '', 'children': [], 'level': 1}, {'type': 'body', 'text': 'Test', 'children': [{'type': 'h1', 'text': 'Test', 'children': [], 'level': 1, 'id': ''}], 'level': 1}], 'level': 0}]}\n     ?                        +++++\n", "test_name": "test_special_content_handling", "rerun": "0"}, "11": {"status": "FAIL", "message": "   AssertionError: assert 1 == 2\n    +  where 1 = len([{'children': [{'children': [], 'id': '', 'level': 2, 'text': 'Subtitle'}], 'id': '', 'level': 1, 'text': 'Title'}])\n", "test_name": "test_content_structure_preservation", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 9, "total_error": 0}}, "18": {"suite_name": "tests/test_quality.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_quality_checker_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_content_length_check.<locals>.<genexpr> at 0x13a332a80>)\n", "test_name": "test_content_length_check", "rerun": "0"}, "2": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_heading_structure_check.<locals>.<genexpr> at 0x13a3f20a0>)\n", "test_name": "test_heading_structure_check", "rerun": "0"}, "3": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_link_validation.<locals>.<genexpr> at 0x13a319ee0>)\n", "test_name": "test_link_validation", "rerun": "0"}, "4": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_metadata_check.<locals>.<genexpr> at 0x13a3f0040>)\n", "test_name": "test_metadata_check", "rerun": "0"}, "5": {"status": "FAIL", "message": "   assert False\n    +  where False = any(<generator object test_code_block_validation.<locals>.<genexpr> at 0x13a3f3140>)\n", "test_name": "test_code_block_validation", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_quality_issue_initialization", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_quality_issue_location_handling", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_quality_issue_metadata", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_quality_metrics_calculation", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_full_quality_check", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_quality_checker_cleanup", "rerun": "0"}}, "status": {"total_pass": 7, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}}, "19": {"suite_name": "tests/test_url_handling.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_urlunparse_behavior", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_url_info_creation_basic", "rerun": "0"}, "2": {"status": "FAIL", "message": "       AssertionError: assert 'https://example.com/path' == 'https://example.com/path/'\n         \n         - https://example.com/path/\n         ?                         -\n         + https://example.com/path\n", "test_name": "test_url_info_path_normalization", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_url_info_scheme_handling", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_url_info_query_handling", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_url_info_fragment_handling", "rerun": "0"}, "6": {"status": "FAIL", "message": "       AssertionError: assert not True\n        +  where True = URLInfo(raw_url='not a url', normalized_url='http://not a url/', scheme='http', netloc='not a url', path='/', is_valid=True, error_msg='').is_valid\n", "test_name": "test_url_info_invalid_urls", "rerun": "0"}, "7": {"status": "FAIL", "message": "   Failed: DID NOT RAISE <class 'Exception'>\n", "test_name": "test_url_info_immutability", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_url_info_equality", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_url_info_type_safety", "rerun": "0"}, "10": {"status": "FAIL", "message": "       AssertionError: assert 'http://\u00fcnicode.com/' == 'http://xn--nicode-2ya.com/'\n         \n         - http://xn--nicode-2ya.com/\n         ?        ^^^^      ----\n         + http://\u00fcnicode.com/\n         ?        ^\n", "test_name": "test_url_info_edge_cases", "rerun": "0"}, "11": {"status": "FAIL", "message": "       assert True == False\n        +  where True = URLInfo(raw_url=\"http://example.com/page?id=1' OR '1'='1\", normalized_url=\"http://example.com/page?id=1' OR '1'='1\", scheme='http', netloc='example.com', path='/page', is_valid=True, error_msg='').is_valid\n", "test_name": "test_url_info_security", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_url_info_relative_paths", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_url_info_query_parameters", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_url_info_performance", "rerun": "0"}}, "status": {"total_pass": 10, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}}}}, "date": "November 29, 2024", "start_time": 1732838596.594846, "total_suite": 20, "status": "FAIL", "status_list": {"pass": "96", "fail": "259", "skip": "0", "error": "10", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "365"}